/*
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hathora.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hathora.client.model.ContainerPort;
import com.hathora.client.model.DeploymentEnvInner;
import com.hathora.client.model.PlanName;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.hathora.client.JSON;

/**
 * Deployment is a versioned configuration for a build that describes runtime behavior.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Deployment {
  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<DeploymentEnvInner> env = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOMS_PER_PROCESS = "roomsPerProcess";
  @SerializedName(SERIALIZED_NAME_ROOMS_PER_PROCESS)
  private Integer roomsPerProcess;

  public static final String SERIALIZED_NAME_PLAN_NAME = "planName";
  @SerializedName(SERIALIZED_NAME_PLAN_NAME)
  private PlanName planName;

  public static final String SERIALIZED_NAME_ADDITIONAL_CONTAINER_PORTS = "additionalContainerPorts";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CONTAINER_PORTS)
  private List<ContainerPort> additionalContainerPorts = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_CONTAINER_PORT = "defaultContainerPort";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CONTAINER_PORT)
  private ContainerPort defaultContainerPort;

  /**
   * Gets or Sets transportType
   */
  @JsonAdapter(TransportTypeEnum.Adapter.class)
  public enum TransportTypeEnum {
    TCP("tcp"),
    
    UDP("udp"),
    
    TLS("tls");

    private String value;

    TransportTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransportTypeEnum fromValue(String value) {
      for (TransportTypeEnum b : TransportTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransportTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSPORT_TYPE = "transportType";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_TYPE)
  private TransportTypeEnum transportType;

  public static final String SERIALIZED_NAME_CONTAINER_PORT = "containerPort";
  @SerializedName(SERIALIZED_NAME_CONTAINER_PORT)
  private Double containerPort;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_REQUESTED_MEMORY_M_B = "requestedMemoryMB";
  @SerializedName(SERIALIZED_NAME_REQUESTED_MEMORY_M_B)
  private Double requestedMemoryMB;

  public static final String SERIALIZED_NAME_REQUESTED_C_P_U = "requestedCPU";
  @SerializedName(SERIALIZED_NAME_REQUESTED_C_P_U)
  private Double requestedCPU;

  public static final String SERIALIZED_NAME_DEPLOYMENT_ID = "deploymentId";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_ID)
  private Integer deploymentId;

  public static final String SERIALIZED_NAME_BUILD_ID = "buildId";
  @SerializedName(SERIALIZED_NAME_BUILD_ID)
  private Integer buildId;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public Deployment() {
  }

  public Deployment env(List<DeploymentEnvInner> env) {
    
    this.env = env;
    return this;
  }

  public Deployment addEnvItem(DeploymentEnvInner envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * The environment variable that our process will have access to at runtime.
   * @return env
  **/
  @javax.annotation.Nonnull

  public List<DeploymentEnvInner> getEnv() {
    return env;
  }


  public void setEnv(List<DeploymentEnvInner> env) {
    this.env = env;
  }


  public Deployment roomsPerProcess(Integer roomsPerProcess) {
    
    this.roomsPerProcess = roomsPerProcess;
    return this;
  }

   /**
   * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
   * minimum: 1
   * @return roomsPerProcess
  **/
  @javax.annotation.Nonnull

  public Integer getRoomsPerProcess() {
    return roomsPerProcess;
  }


  public void setRoomsPerProcess(Integer roomsPerProcess) {
    this.roomsPerProcess = roomsPerProcess;
  }


  public Deployment planName(PlanName planName) {
    
    this.planName = planName;
    return this;
  }

   /**
   * Get planName
   * @return planName
  **/
  @javax.annotation.Nonnull

  public PlanName getPlanName() {
    return planName;
  }


  public void setPlanName(PlanName planName) {
    this.planName = planName;
  }


  public Deployment additionalContainerPorts(List<ContainerPort> additionalContainerPorts) {
    
    this.additionalContainerPorts = additionalContainerPorts;
    return this;
  }

  public Deployment addAdditionalContainerPortsItem(ContainerPort additionalContainerPortsItem) {
    if (this.additionalContainerPorts == null) {
      this.additionalContainerPorts = new ArrayList<>();
    }
    this.additionalContainerPorts.add(additionalContainerPortsItem);
    return this;
  }

   /**
   * Additional ports your server listens on.
   * @return additionalContainerPorts
  **/
  @javax.annotation.Nonnull

  public List<ContainerPort> getAdditionalContainerPorts() {
    return additionalContainerPorts;
  }


  public void setAdditionalContainerPorts(List<ContainerPort> additionalContainerPorts) {
    this.additionalContainerPorts = additionalContainerPorts;
  }


  public Deployment defaultContainerPort(ContainerPort defaultContainerPort) {
    
    this.defaultContainerPort = defaultContainerPort;
    return this;
  }

   /**
   * Get defaultContainerPort
   * @return defaultContainerPort
  **/
  @javax.annotation.Nonnull

  public ContainerPort getDefaultContainerPort() {
    return defaultContainerPort;
  }


  public void setDefaultContainerPort(ContainerPort defaultContainerPort) {
    this.defaultContainerPort = defaultContainerPort;
  }


  public Deployment transportType(TransportTypeEnum transportType) {
    
    this.transportType = transportType;
    return this;
  }

   /**
   * Get transportType
   * @return transportType
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull

  public TransportTypeEnum getTransportType() {
    return transportType;
  }


  public void setTransportType(TransportTypeEnum transportType) {
    this.transportType = transportType;
  }


  public Deployment containerPort(Double containerPort) {
    
    this.containerPort = containerPort;
    return this;
  }

   /**
   * Get containerPort
   * @return containerPort
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull

  public Double getContainerPort() {
    return containerPort;
  }


  public void setContainerPort(Double containerPort) {
    this.containerPort = containerPort;
  }


  public Deployment createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * When the deployment was created.
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Deployment createdBy(String createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Email address for the user that created the deployment.
   * @return createdBy
  **/
  @javax.annotation.Nonnull

  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public Deployment requestedMemoryMB(Double requestedMemoryMB) {
    
    this.requestedMemoryMB = requestedMemoryMB;
    return this;
  }

   /**
   * The amount of memory allocated to your process.
   * @return requestedMemoryMB
  **/
  @javax.annotation.Nonnull

  public Double getRequestedMemoryMB() {
    return requestedMemoryMB;
  }


  public void setRequestedMemoryMB(Double requestedMemoryMB) {
    this.requestedMemoryMB = requestedMemoryMB;
  }


  public Deployment requestedCPU(Double requestedCPU) {
    
    this.requestedCPU = requestedCPU;
    return this;
  }

   /**
   * The number of cores allocated to your process.
   * @return requestedCPU
  **/
  @javax.annotation.Nonnull

  public Double getRequestedCPU() {
    return requestedCPU;
  }


  public void setRequestedCPU(Double requestedCPU) {
    this.requestedCPU = requestedCPU;
  }


  public Deployment deploymentId(Integer deploymentId) {
    
    this.deploymentId = deploymentId;
    return this;
  }

   /**
   * System generated id for a deployment. Increments by 1.
   * @return deploymentId
  **/
  @javax.annotation.Nonnull

  public Integer getDeploymentId() {
    return deploymentId;
  }


  public void setDeploymentId(Integer deploymentId) {
    this.deploymentId = deploymentId;
  }


  public Deployment buildId(Integer buildId) {
    
    this.buildId = buildId;
    return this;
  }

   /**
   * System generated id for a build associated with this deployment. Increments by 1.
   * @return buildId
  **/
  @javax.annotation.Nonnull

  public Integer getBuildId() {
    return buildId;
  }


  public void setBuildId(Integer buildId) {
    this.buildId = buildId;
  }


  public Deployment appId(String appId) {
    
    this.appId = appId;
    return this;
  }

   /**
   * System generated unique identifier for an application.
   * @return appId
  **/
  @javax.annotation.Nonnull

  public String getAppId() {
    return appId;
  }


  public void setAppId(String appId) {
    this.appId = appId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Deployment instance itself
   */
  public Deployment putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Deployment deployment = (Deployment) o;
    return Objects.equals(this.env, deployment.env) &&
        Objects.equals(this.roomsPerProcess, deployment.roomsPerProcess) &&
        Objects.equals(this.planName, deployment.planName) &&
        Objects.equals(this.additionalContainerPorts, deployment.additionalContainerPorts) &&
        Objects.equals(this.defaultContainerPort, deployment.defaultContainerPort) &&
        Objects.equals(this.transportType, deployment.transportType) &&
        Objects.equals(this.containerPort, deployment.containerPort) &&
        Objects.equals(this.createdAt, deployment.createdAt) &&
        Objects.equals(this.createdBy, deployment.createdBy) &&
        Objects.equals(this.requestedMemoryMB, deployment.requestedMemoryMB) &&
        Objects.equals(this.requestedCPU, deployment.requestedCPU) &&
        Objects.equals(this.deploymentId, deployment.deploymentId) &&
        Objects.equals(this.buildId, deployment.buildId) &&
        Objects.equals(this.appId, deployment.appId)&&
        Objects.equals(this.additionalProperties, deployment.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(env, roomsPerProcess, planName, additionalContainerPorts, defaultContainerPort, transportType, containerPort, createdAt, createdBy, requestedMemoryMB, requestedCPU, deploymentId, buildId, appId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Deployment {\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    roomsPerProcess: ").append(toIndentedString(roomsPerProcess)).append("\n");
    sb.append("    planName: ").append(toIndentedString(planName)).append("\n");
    sb.append("    additionalContainerPorts: ").append(toIndentedString(additionalContainerPorts)).append("\n");
    sb.append("    defaultContainerPort: ").append(toIndentedString(defaultContainerPort)).append("\n");
    sb.append("    transportType: ").append(toIndentedString(transportType)).append("\n");
    sb.append("    containerPort: ").append(toIndentedString(containerPort)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    requestedMemoryMB: ").append(toIndentedString(requestedMemoryMB)).append("\n");
    sb.append("    requestedCPU: ").append(toIndentedString(requestedCPU)).append("\n");
    sb.append("    deploymentId: ").append(toIndentedString(deploymentId)).append("\n");
    sb.append("    buildId: ").append(toIndentedString(buildId)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("env");
    openapiFields.add("roomsPerProcess");
    openapiFields.add("planName");
    openapiFields.add("additionalContainerPorts");
    openapiFields.add("defaultContainerPort");
    openapiFields.add("transportType");
    openapiFields.add("containerPort");
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");
    openapiFields.add("requestedMemoryMB");
    openapiFields.add("requestedCPU");
    openapiFields.add("deploymentId");
    openapiFields.add("buildId");
    openapiFields.add("appId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("env");
    openapiRequiredFields.add("roomsPerProcess");
    openapiRequiredFields.add("planName");
    openapiRequiredFields.add("additionalContainerPorts");
    openapiRequiredFields.add("defaultContainerPort");
    openapiRequiredFields.add("transportType");
    openapiRequiredFields.add("containerPort");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("createdBy");
    openapiRequiredFields.add("requestedMemoryMB");
    openapiRequiredFields.add("requestedCPU");
    openapiRequiredFields.add("deploymentId");
    openapiRequiredFields.add("buildId");
    openapiRequiredFields.add("appId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Deployment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Deployment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Deployment is not found in the empty JSON string", Deployment.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Deployment.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("env").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `env` to be an array in the JSON string but got `%s`", jsonObj.get("env").toString()));
      }

      JsonArray jsonArrayenv = jsonObj.getAsJsonArray("env");
      // validate the required field `env` (array)
      for (int i = 0; i < jsonArrayenv.size(); i++) {
        DeploymentEnvInner.validateJsonObject(jsonArrayenv.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("additionalContainerPorts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalContainerPorts` to be an array in the JSON string but got `%s`", jsonObj.get("additionalContainerPorts").toString()));
      }

      JsonArray jsonArrayadditionalContainerPorts = jsonObj.getAsJsonArray("additionalContainerPorts");
      // validate the required field `additionalContainerPorts` (array)
      for (int i = 0; i < jsonArrayadditionalContainerPorts.size(); i++) {
        ContainerPort.validateJsonObject(jsonArrayadditionalContainerPorts.get(i).getAsJsonObject());
      };
      // validate the required field `defaultContainerPort`
      ContainerPort.validateJsonObject(jsonObj.getAsJsonObject("defaultContainerPort"));
      if (!jsonObj.get("transportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transportType").toString()));
      }
      if (!jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if (!jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Deployment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Deployment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Deployment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Deployment.class));

       return (TypeAdapter<T>) new TypeAdapter<Deployment>() {
           @Override
           public void write(JsonWriter out, Deployment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Deployment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Deployment instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Deployment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Deployment
  * @throws IOException if the JSON string is invalid with respect to Deployment
  */
  public static Deployment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Deployment.class);
  }

 /**
  * Convert an instance of Deployment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

