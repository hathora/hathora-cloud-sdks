/*
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hathora.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hathora.client.model.AchPaymentMethod;
import com.hathora.client.model.CardPaymentMethod;
import com.hathora.client.model.LinkPaymentMethod;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.hathora.client.JSON;

/**
 * Make all properties in T optional
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod {
  public static final String SERIALIZED_NAME_CARD = "card";
  @SerializedName(SERIALIZED_NAME_CARD)
  private CardPaymentMethod card;

  public static final String SERIALIZED_NAME_ACH = "ach";
  @SerializedName(SERIALIZED_NAME_ACH)
  private AchPaymentMethod ach;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private LinkPaymentMethod link;

  public PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod() {
  }

  public PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod card(CardPaymentMethod card) {
    
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @javax.annotation.Nullable
  public CardPaymentMethod getCard() {
    return card;
  }


  public void setCard(CardPaymentMethod card) {
    this.card = card;
  }


  public PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod ach(AchPaymentMethod ach) {
    
    this.ach = ach;
    return this;
  }

   /**
   * Get ach
   * @return ach
  **/
  @javax.annotation.Nullable
  public AchPaymentMethod getAch() {
    return ach;
  }


  public void setAch(AchPaymentMethod ach) {
    this.ach = ach;
  }


  public PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod link(LinkPaymentMethod link) {
    
    this.link = link;
    return this;
  }

   /**
   * Get link
   * @return link
  **/
  @javax.annotation.Nullable
  public LinkPaymentMethod getLink() {
    return link;
  }


  public void setLink(LinkPaymentMethod link) {
    this.link = link;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod instance itself
   */
  public PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod partialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod = (PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod) o;
    return Objects.equals(this.card, partialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod.card) &&
        Objects.equals(this.ach, partialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod.ach) &&
        Objects.equals(this.link, partialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod.link)&&
        Objects.equals(this.additionalProperties, partialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(card, ach, link, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod {\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    ach: ").append(toIndentedString(ach)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card");
    openapiFields.add("ach");
    openapiFields.add("link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod is not found in the empty JSON string", PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `card`
      if (jsonObj.get("card") != null && !jsonObj.get("card").isJsonNull()) {
        CardPaymentMethod.validateJsonElement(jsonObj.get("card"));
      }
      // validate the optional field `ach`
      if (jsonObj.get("ach") != null && !jsonObj.get("ach").isJsonNull()) {
        AchPaymentMethod.validateJsonElement(jsonObj.get("ach"));
      }
      // validate the optional field `link`
      if (jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) {
        LinkPaymentMethod.validateJsonElement(jsonObj.get("link"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod.class));

       return (TypeAdapter<T>) new TypeAdapter<PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod>() {
           @Override
           public void write(JsonWriter out, PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod
  * @throws IOException if the JSON string is invalid with respect to PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod
  */
  public static PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod.class);
  }

 /**
  * Convert an instance of PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

