/*
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hathora.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.hathora.client.model.ExposedPort;
import com.hathora.client.model.Region;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.hathora.client.JSON;

/**
 * A process object represents a runtime instance of your game server and its metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Process {
  public static final String SERIALIZED_NAME_EGRESSED_BYTES = "egressedBytes";
  @SerializedName(SERIALIZED_NAME_EGRESSED_BYTES)
  private Double egressedBytes;

  public static final String SERIALIZED_NAME_IDLE_SINCE = "idleSince";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_IDLE_SINCE)
  private OffsetDateTime idleSince;

  public static final String SERIALIZED_NAME_ACTIVE_CONNECTIONS_UPDATED_AT = "activeConnectionsUpdatedAt";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CONNECTIONS_UPDATED_AT)
  private OffsetDateTime activeConnectionsUpdatedAt;

  public static final String SERIALIZED_NAME_ACTIVE_CONNECTIONS = "activeConnections";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CONNECTIONS)
  private Double activeConnections;

  public static final String SERIALIZED_NAME_ROOM_SLOTS_AVAILABLE_UPDATED_AT = "roomSlotsAvailableUpdatedAt";
  @SerializedName(SERIALIZED_NAME_ROOM_SLOTS_AVAILABLE_UPDATED_AT)
  private OffsetDateTime roomSlotsAvailableUpdatedAt;

  public static final String SERIALIZED_NAME_ROOM_SLOTS_AVAILABLE = "roomSlotsAvailable";
  @SerializedName(SERIALIZED_NAME_ROOM_SLOTS_AVAILABLE)
  private Double roomSlotsAvailable;

  public static final String SERIALIZED_NAME_DRAINING = "draining";
  @SerializedName(SERIALIZED_NAME_DRAINING)
  private Boolean draining;

  public static final String SERIALIZED_NAME_TERMINATED_AT = "terminatedAt";
  @SerializedName(SERIALIZED_NAME_TERMINATED_AT)
  private OffsetDateTime terminatedAt;

  public static final String SERIALIZED_NAME_STOPPING_AT = "stoppingAt";
  @SerializedName(SERIALIZED_NAME_STOPPING_AT)
  private OffsetDateTime stoppingAt;

  public static final String SERIALIZED_NAME_STARTED_AT = "startedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_STARTING_AT = "startingAt";
  @SerializedName(SERIALIZED_NAME_STARTING_AT)
  private OffsetDateTime startingAt;

  public static final String SERIALIZED_NAME_ROOMS_PER_PROCESS = "roomsPerProcess";
  @SerializedName(SERIALIZED_NAME_ROOMS_PER_PROCESS)
  private Integer roomsPerProcess;

  public static final String SERIALIZED_NAME_ADDITIONAL_EXPOSED_PORTS = "additionalExposedPorts";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_EXPOSED_PORTS)
  private List<ExposedPort> additionalExposedPorts = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPOSED_PORT = "exposedPort";
  @SerializedName(SERIALIZED_NAME_EXPOSED_PORT)
  private ExposedPort exposedPort;

  public static final String SERIALIZED_NAME_PORT = "port";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PORT)
  private Double port;

  public static final String SERIALIZED_NAME_HOST = "host";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private Region region;

  public static final String SERIALIZED_NAME_PROCESS_ID = "processId";
  @SerializedName(SERIALIZED_NAME_PROCESS_ID)
  private String processId;

  public static final String SERIALIZED_NAME_DEPLOYMENT_ID = "deploymentId";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_ID)
  private Integer deploymentId;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public Process() {
  }

  public Process egressedBytes(Double egressedBytes) {
    
    this.egressedBytes = egressedBytes;
    return this;
  }

   /**
   * Measures network traffic leaving the process in bytes.
   * @return egressedBytes
  **/
  @javax.annotation.Nonnull
  public Double getEgressedBytes() {
    return egressedBytes;
  }


  public void setEgressedBytes(Double egressedBytes) {
    this.egressedBytes = egressedBytes;
  }


  @Deprecated
  public Process idleSince(OffsetDateTime idleSince) {
    
    this.idleSince = idleSince;
    return this;
  }

   /**
   * Get idleSince
   * @return idleSince
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public OffsetDateTime getIdleSince() {
    return idleSince;
  }


  @Deprecated
  public void setIdleSince(OffsetDateTime idleSince) {
    this.idleSince = idleSince;
  }


  public Process activeConnectionsUpdatedAt(OffsetDateTime activeConnectionsUpdatedAt) {
    
    this.activeConnectionsUpdatedAt = activeConnectionsUpdatedAt;
    return this;
  }

   /**
   * Get activeConnectionsUpdatedAt
   * @return activeConnectionsUpdatedAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getActiveConnectionsUpdatedAt() {
    return activeConnectionsUpdatedAt;
  }


  public void setActiveConnectionsUpdatedAt(OffsetDateTime activeConnectionsUpdatedAt) {
    this.activeConnectionsUpdatedAt = activeConnectionsUpdatedAt;
  }


  public Process activeConnections(Double activeConnections) {
    
    this.activeConnections = activeConnections;
    return this;
  }

   /**
   * Tracks the number of active connections to a process.
   * @return activeConnections
  **/
  @javax.annotation.Nonnull
  public Double getActiveConnections() {
    return activeConnections;
  }


  public void setActiveConnections(Double activeConnections) {
    this.activeConnections = activeConnections;
  }


  public Process roomSlotsAvailableUpdatedAt(OffsetDateTime roomSlotsAvailableUpdatedAt) {
    
    this.roomSlotsAvailableUpdatedAt = roomSlotsAvailableUpdatedAt;
    return this;
  }

   /**
   * Get roomSlotsAvailableUpdatedAt
   * @return roomSlotsAvailableUpdatedAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getRoomSlotsAvailableUpdatedAt() {
    return roomSlotsAvailableUpdatedAt;
  }


  public void setRoomSlotsAvailableUpdatedAt(OffsetDateTime roomSlotsAvailableUpdatedAt) {
    this.roomSlotsAvailableUpdatedAt = roomSlotsAvailableUpdatedAt;
  }


  public Process roomSlotsAvailable(Double roomSlotsAvailable) {
    
    this.roomSlotsAvailable = roomSlotsAvailable;
    return this;
  }

   /**
   * Tracks the number of room slots available on the process.
   * @return roomSlotsAvailable
  **/
  @javax.annotation.Nonnull
  public Double getRoomSlotsAvailable() {
    return roomSlotsAvailable;
  }


  public void setRoomSlotsAvailable(Double roomSlotsAvailable) {
    this.roomSlotsAvailable = roomSlotsAvailable;
  }


  public Process draining(Boolean draining) {
    
    this.draining = draining;
    return this;
  }

   /**
   * Process in drain will not accept any new rooms.
   * @return draining
  **/
  @javax.annotation.Nonnull
  public Boolean getDraining() {
    return draining;
  }


  public void setDraining(Boolean draining) {
    this.draining = draining;
  }


  public Process terminatedAt(OffsetDateTime terminatedAt) {
    
    this.terminatedAt = terminatedAt;
    return this;
  }

   /**
   * When the process has been terminated.
   * @return terminatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTerminatedAt() {
    return terminatedAt;
  }


  public void setTerminatedAt(OffsetDateTime terminatedAt) {
    this.terminatedAt = terminatedAt;
  }


  public Process stoppingAt(OffsetDateTime stoppingAt) {
    
    this.stoppingAt = stoppingAt;
    return this;
  }

   /**
   * When the process is issued to stop. We use this to determine when we should stop billing.
   * @return stoppingAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStoppingAt() {
    return stoppingAt;
  }


  public void setStoppingAt(OffsetDateTime stoppingAt) {
    this.stoppingAt = stoppingAt;
  }


  public Process startedAt(OffsetDateTime startedAt) {
    
    this.startedAt = startedAt;
    return this;
  }

   /**
   * When the process bound to the specified port. We use this to determine when we should start billing.
   * @return startedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }


  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  public Process startingAt(OffsetDateTime startingAt) {
    
    this.startingAt = startingAt;
    return this;
  }

   /**
   * When the process started being provisioned.
   * @return startingAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getStartingAt() {
    return startingAt;
  }


  public void setStartingAt(OffsetDateTime startingAt) {
    this.startingAt = startingAt;
  }


  public Process roomsPerProcess(Integer roomsPerProcess) {
    
    this.roomsPerProcess = roomsPerProcess;
    return this;
  }

   /**
   * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
   * minimum: 1
   * @return roomsPerProcess
  **/
  @javax.annotation.Nonnull
  public Integer getRoomsPerProcess() {
    return roomsPerProcess;
  }


  public void setRoomsPerProcess(Integer roomsPerProcess) {
    this.roomsPerProcess = roomsPerProcess;
  }


  public Process additionalExposedPorts(List<ExposedPort> additionalExposedPorts) {
    
    this.additionalExposedPorts = additionalExposedPorts;
    return this;
  }

  public Process addAdditionalExposedPortsItem(ExposedPort additionalExposedPortsItem) {
    if (this.additionalExposedPorts == null) {
      this.additionalExposedPorts = new ArrayList<>();
    }
    this.additionalExposedPorts.add(additionalExposedPortsItem);
    return this;
  }

   /**
   * Get additionalExposedPorts
   * @return additionalExposedPorts
  **/
  @javax.annotation.Nonnull
  public List<ExposedPort> getAdditionalExposedPorts() {
    return additionalExposedPorts;
  }


  public void setAdditionalExposedPorts(List<ExposedPort> additionalExposedPorts) {
    this.additionalExposedPorts = additionalExposedPorts;
  }


  public Process exposedPort(ExposedPort exposedPort) {
    
    this.exposedPort = exposedPort;
    return this;
  }

   /**
   * Get exposedPort
   * @return exposedPort
  **/
  @javax.annotation.Nullable
  public ExposedPort getExposedPort() {
    return exposedPort;
  }


  public void setExposedPort(ExposedPort exposedPort) {
    this.exposedPort = exposedPort;
  }


  @Deprecated
  public Process port(Double port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  public Double getPort() {
    return port;
  }


  @Deprecated
  public void setPort(Double port) {
    this.port = port;
  }


  @Deprecated
  public Process host(String host) {
    
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }


  @Deprecated
  public void setHost(String host) {
    this.host = host;
  }


  public Process region(Region region) {
    
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @javax.annotation.Nonnull
  public Region getRegion() {
    return region;
  }


  public void setRegion(Region region) {
    this.region = region;
  }


  public Process processId(String processId) {
    
    this.processId = processId;
    return this;
  }

   /**
   * System generated unique identifier to a runtime instance of your game server.
   * @return processId
  **/
  @javax.annotation.Nonnull
  public String getProcessId() {
    return processId;
  }


  public void setProcessId(String processId) {
    this.processId = processId;
  }


  public Process deploymentId(Integer deploymentId) {
    
    this.deploymentId = deploymentId;
    return this;
  }

   /**
   * System generated id for a deployment. Increments by 1.
   * @return deploymentId
  **/
  @javax.annotation.Nonnull
  public Integer getDeploymentId() {
    return deploymentId;
  }


  public void setDeploymentId(Integer deploymentId) {
    this.deploymentId = deploymentId;
  }


  public Process appId(String appId) {
    
    this.appId = appId;
    return this;
  }

   /**
   * System generated unique identifier for an application.
   * @return appId
  **/
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }


  public void setAppId(String appId) {
    this.appId = appId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Process instance itself
   */
  public Process putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Process process = (Process) o;
    return Objects.equals(this.egressedBytes, process.egressedBytes) &&
        Objects.equals(this.idleSince, process.idleSince) &&
        Objects.equals(this.activeConnectionsUpdatedAt, process.activeConnectionsUpdatedAt) &&
        Objects.equals(this.activeConnections, process.activeConnections) &&
        Objects.equals(this.roomSlotsAvailableUpdatedAt, process.roomSlotsAvailableUpdatedAt) &&
        Objects.equals(this.roomSlotsAvailable, process.roomSlotsAvailable) &&
        Objects.equals(this.draining, process.draining) &&
        Objects.equals(this.terminatedAt, process.terminatedAt) &&
        Objects.equals(this.stoppingAt, process.stoppingAt) &&
        Objects.equals(this.startedAt, process.startedAt) &&
        Objects.equals(this.startingAt, process.startingAt) &&
        Objects.equals(this.roomsPerProcess, process.roomsPerProcess) &&
        Objects.equals(this.additionalExposedPorts, process.additionalExposedPorts) &&
        Objects.equals(this.exposedPort, process.exposedPort) &&
        Objects.equals(this.port, process.port) &&
        Objects.equals(this.host, process.host) &&
        Objects.equals(this.region, process.region) &&
        Objects.equals(this.processId, process.processId) &&
        Objects.equals(this.deploymentId, process.deploymentId) &&
        Objects.equals(this.appId, process.appId)&&
        Objects.equals(this.additionalProperties, process.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(egressedBytes, idleSince, activeConnectionsUpdatedAt, activeConnections, roomSlotsAvailableUpdatedAt, roomSlotsAvailable, draining, terminatedAt, stoppingAt, startedAt, startingAt, roomsPerProcess, additionalExposedPorts, exposedPort, port, host, region, processId, deploymentId, appId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Process {\n");
    sb.append("    egressedBytes: ").append(toIndentedString(egressedBytes)).append("\n");
    sb.append("    idleSince: ").append(toIndentedString(idleSince)).append("\n");
    sb.append("    activeConnectionsUpdatedAt: ").append(toIndentedString(activeConnectionsUpdatedAt)).append("\n");
    sb.append("    activeConnections: ").append(toIndentedString(activeConnections)).append("\n");
    sb.append("    roomSlotsAvailableUpdatedAt: ").append(toIndentedString(roomSlotsAvailableUpdatedAt)).append("\n");
    sb.append("    roomSlotsAvailable: ").append(toIndentedString(roomSlotsAvailable)).append("\n");
    sb.append("    draining: ").append(toIndentedString(draining)).append("\n");
    sb.append("    terminatedAt: ").append(toIndentedString(terminatedAt)).append("\n");
    sb.append("    stoppingAt: ").append(toIndentedString(stoppingAt)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    startingAt: ").append(toIndentedString(startingAt)).append("\n");
    sb.append("    roomsPerProcess: ").append(toIndentedString(roomsPerProcess)).append("\n");
    sb.append("    additionalExposedPorts: ").append(toIndentedString(additionalExposedPorts)).append("\n");
    sb.append("    exposedPort: ").append(toIndentedString(exposedPort)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    processId: ").append(toIndentedString(processId)).append("\n");
    sb.append("    deploymentId: ").append(toIndentedString(deploymentId)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("egressedBytes");
    openapiFields.add("idleSince");
    openapiFields.add("activeConnectionsUpdatedAt");
    openapiFields.add("activeConnections");
    openapiFields.add("roomSlotsAvailableUpdatedAt");
    openapiFields.add("roomSlotsAvailable");
    openapiFields.add("draining");
    openapiFields.add("terminatedAt");
    openapiFields.add("stoppingAt");
    openapiFields.add("startedAt");
    openapiFields.add("startingAt");
    openapiFields.add("roomsPerProcess");
    openapiFields.add("additionalExposedPorts");
    openapiFields.add("exposedPort");
    openapiFields.add("port");
    openapiFields.add("host");
    openapiFields.add("region");
    openapiFields.add("processId");
    openapiFields.add("deploymentId");
    openapiFields.add("appId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("egressedBytes");
    openapiRequiredFields.add("idleSince");
    openapiRequiredFields.add("activeConnectionsUpdatedAt");
    openapiRequiredFields.add("activeConnections");
    openapiRequiredFields.add("roomSlotsAvailableUpdatedAt");
    openapiRequiredFields.add("roomSlotsAvailable");
    openapiRequiredFields.add("draining");
    openapiRequiredFields.add("terminatedAt");
    openapiRequiredFields.add("stoppingAt");
    openapiRequiredFields.add("startedAt");
    openapiRequiredFields.add("startingAt");
    openapiRequiredFields.add("roomsPerProcess");
    openapiRequiredFields.add("additionalExposedPorts");
    openapiRequiredFields.add("port");
    openapiRequiredFields.add("host");
    openapiRequiredFields.add("region");
    openapiRequiredFields.add("processId");
    openapiRequiredFields.add("deploymentId");
    openapiRequiredFields.add("appId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Process
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Process.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Process is not found in the empty JSON string", Process.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Process.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("additionalExposedPorts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalExposedPorts` to be an array in the JSON string but got `%s`", jsonObj.get("additionalExposedPorts").toString()));
      }

      JsonArray jsonArrayadditionalExposedPorts = jsonObj.getAsJsonArray("additionalExposedPorts");
      // validate the required field `additionalExposedPorts` (array)
      for (int i = 0; i < jsonArrayadditionalExposedPorts.size(); i++) {
        ExposedPort.validateJsonElement(jsonArrayadditionalExposedPorts.get(i));
      };
      // validate the optional field `exposedPort`
      if (jsonObj.get("exposedPort") != null && !jsonObj.get("exposedPort").isJsonNull()) {
        ExposedPort.validateJsonElement(jsonObj.get("exposedPort"));
      }
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if (!jsonObj.get("processId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processId").toString()));
      }
      if (!jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Process.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Process' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Process> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Process.class));

       return (TypeAdapter<T>) new TypeAdapter<Process>() {
           @Override
           public void write(JsonWriter out, Process value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Process read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Process instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Process given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Process
  * @throws IOException if the JSON string is invalid with respect to Process
  */
  public static Process fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Process.class);
  }

 /**
  * Convert an instance of Process to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

