/*
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hathora.client.api;

import com.hathora.client.ApiException;
import com.hathora.client.model.ApiError;
import com.hathora.client.model.CreateLobbyParams;
import com.hathora.client.model.CreatePrivateLobbyRequest;
import com.hathora.client.model.Lobby;
import com.hathora.client.model.Region;
import com.hathora.client.model.SetLobbyStateParams;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LobbyV2Api
 */
@Disabled
public class LobbyV2ApiTest {

    private final LobbyV2Api api = new LobbyV2Api();

    /**
     * Create a new lobby for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). A lobby object is a wrapper around a [room](https://hathora.dev/docs/concepts/hathora-entities#room) object. With a lobby, you get additional functionality like configuring the visibility of the room, managing the state of a match, and retrieving a list of public lobbies to display to players.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLobbyDeprecatedTest() throws ApiException {
        String appId = null;
        CreateLobbyParams createLobbyParams = null;
        String roomId = null;
        Lobby response = api.createLobbyDeprecated(appId, createLobbyParams, roomId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLocalLobbyTest() throws ApiException {
        String appId = null;
        CreatePrivateLobbyRequest createPrivateLobbyRequest = null;
        String roomId = null;
        Lobby response = api.createLocalLobby(appId, createPrivateLobbyRequest, roomId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPrivateLobbyTest() throws ApiException {
        String appId = null;
        CreatePrivateLobbyRequest createPrivateLobbyRequest = null;
        String roomId = null;
        Lobby response = api.createPrivateLobby(appId, createPrivateLobbyRequest, roomId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPublicLobbyTest() throws ApiException {
        String appId = null;
        CreatePrivateLobbyRequest createPrivateLobbyRequest = null;
        String roomId = null;
        Lobby response = api.createPublicLobby(appId, createPrivateLobbyRequest, roomId);
        // TODO: test validations
    }

    /**
     * Get details for a lobby.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLobbyInfoTest() throws ApiException {
        String appId = null;
        String roomId = null;
        Lobby response = api.getLobbyInfo(appId, roomId);
        // TODO: test validations
    }

    /**
     * Get all active lobbies for a an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter by optionally passing in a &#x60;region&#x60;. Use this endpoint to display all public lobbies that a player can join in the game client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listActivePublicLobbiesDeprecatedV2Test() throws ApiException {
        String appId = null;
        Region region = null;
        List<Lobby> response = api.listActivePublicLobbiesDeprecatedV2(appId, region);
        // TODO: test validations
    }

    /**
     * Set the state of a lobby. State is intended to be set by the server and must be smaller than 1MB. Use this endpoint to store match data like live player count to enforce max number of clients or persist end-game data (i.e. winner or final scores).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setLobbyStateTest() throws ApiException {
        String appId = null;
        String roomId = null;
        SetLobbyStateParams setLobbyStateParams = null;
        Lobby response = api.setLobbyState(appId, roomId, setLobbyStateParams);
        // TODO: test validations
    }

}
