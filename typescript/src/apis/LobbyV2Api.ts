/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLobbyRequest,
  CreatePrivateLobbyRequest,
  Lobby,
  Region,
  SetLobbyStateRequest,
} from '../models';
import {
    CreateLobbyRequestFromJSON,
    CreateLobbyRequestToJSON,
    CreatePrivateLobbyRequestFromJSON,
    CreatePrivateLobbyRequestToJSON,
    LobbyFromJSON,
    LobbyToJSON,
    RegionFromJSON,
    RegionToJSON,
    SetLobbyStateRequestFromJSON,
    SetLobbyStateRequestToJSON,
} from '../models';

export interface CreateLobbyOperationRequest {
    appId: string;
    authorization: string;
    createLobbyRequest: CreateLobbyRequest;
    roomId?: string;
}

export interface CreateLocalLobbyRequest {
    appId: string;
    authorization: string;
    createPrivateLobbyRequest: CreatePrivateLobbyRequest;
    roomId?: string;
}

export interface CreatePrivateLobbyOperationRequest {
    appId: string;
    authorization: string;
    createPrivateLobbyRequest: CreatePrivateLobbyRequest;
    roomId?: string;
}

export interface CreatePublicLobbyRequest {
    appId: string;
    authorization: string;
    createPrivateLobbyRequest: CreatePrivateLobbyRequest;
    roomId?: string;
}

export interface GetLobbyInfoRequest {
    appId: string;
    roomId: string;
}

export interface ListActivePublicLobbiesRequest {
    appId: string;
    region?: Region;
}

export interface SetLobbyStateOperationRequest {
    appId: string;
    roomId: string;
    setLobbyStateRequest: SetLobbyStateRequest;
}

/**
 * LobbyV2Api - interface
 * 
 * @export
 * @interface LobbyV2ApiInterface
 */
export interface LobbyV2ApiInterface {
    /**
     * 
     * @param {string} appId 
     * @param {string} authorization 
     * @param {CreateLobbyRequest} createLobbyRequest 
     * @param {string} [roomId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyV2ApiInterface
     */
    createLobbyRaw(requestParameters: CreateLobbyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lobby>>;

    /**
     */
    createLobby(appId: string, authorization: string, createLobbyRequest: CreateLobbyRequest, roomId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lobby>;

    /**
     * 
     * @param {string} appId 
     * @param {string} authorization 
     * @param {CreatePrivateLobbyRequest} createPrivateLobbyRequest 
     * @param {string} [roomId] 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LobbyV2ApiInterface
     */
    createLocalLobbyRaw(requestParameters: CreateLocalLobbyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lobby>>;

    /**
     */
    createLocalLobby(appId: string, authorization: string, createPrivateLobbyRequest: CreatePrivateLobbyRequest, roomId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lobby>;

    /**
     * 
     * @param {string} appId 
     * @param {string} authorization 
     * @param {CreatePrivateLobbyRequest} createPrivateLobbyRequest 
     * @param {string} [roomId] 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LobbyV2ApiInterface
     */
    createPrivateLobbyRaw(requestParameters: CreatePrivateLobbyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lobby>>;

    /**
     */
    createPrivateLobby(appId: string, authorization: string, createPrivateLobbyRequest: CreatePrivateLobbyRequest, roomId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lobby>;

    /**
     * 
     * @param {string} appId 
     * @param {string} authorization 
     * @param {CreatePrivateLobbyRequest} createPrivateLobbyRequest 
     * @param {string} [roomId] 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LobbyV2ApiInterface
     */
    createPublicLobbyRaw(requestParameters: CreatePublicLobbyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lobby>>;

    /**
     */
    createPublicLobby(appId: string, authorization: string, createPrivateLobbyRequest: CreatePrivateLobbyRequest, roomId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lobby>;

    /**
     * 
     * @param {string} appId 
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyV2ApiInterface
     */
    getLobbyInfoRaw(requestParameters: GetLobbyInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lobby>>;

    /**
     */
    getLobbyInfo(appId: string, roomId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lobby>;

    /**
     * 
     * @param {string} appId 
     * @param {Region} [region] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyV2ApiInterface
     */
    listActivePublicLobbiesRaw(requestParameters: ListActivePublicLobbiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Lobby>>>;

    /**
     */
    listActivePublicLobbies(appId: string, region?: Region, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Lobby>>;

    /**
     * 
     * @param {string} appId 
     * @param {string} roomId 
     * @param {SetLobbyStateRequest} setLobbyStateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyV2ApiInterface
     */
    setLobbyStateRaw(requestParameters: SetLobbyStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lobby>>;

    /**
     */
    setLobbyState(appId: string, roomId: string, setLobbyStateRequest: SetLobbyStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lobby>;

}

/**
 * 
 */
export class LobbyV2Api extends runtime.BaseAPI implements LobbyV2ApiInterface {

    /**
     */
    async createLobbyRaw(requestParameters: CreateLobbyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lobby>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createLobby.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling createLobby.');
        }

        if (requestParameters.createLobbyRequest === null || requestParameters.createLobbyRequest === undefined) {
            throw new runtime.RequiredError('createLobbyRequest','Required parameter requestParameters.createLobbyRequest was null or undefined when calling createLobby.');
        }

        const queryParameters: any = {};

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/lobby/v2/{appId}/create`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLobbyRequestToJSON(requestParameters.createLobbyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
    }

    /**
     */
    async createLobby(appId: string, authorization: string, createLobbyRequest: CreateLobbyRequest, roomId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lobby> {
        const response = await this.createLobbyRaw({ appId: appId, authorization: authorization, createLobbyRequest: createLobbyRequest, roomId: roomId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createLocalLobbyRaw(requestParameters: CreateLocalLobbyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lobby>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createLocalLobby.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling createLocalLobby.');
        }

        if (requestParameters.createPrivateLobbyRequest === null || requestParameters.createPrivateLobbyRequest === undefined) {
            throw new runtime.RequiredError('createPrivateLobbyRequest','Required parameter requestParameters.createPrivateLobbyRequest was null or undefined when calling createLocalLobby.');
        }

        const queryParameters: any = {};

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/lobby/v2/{appId}/create/local`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePrivateLobbyRequestToJSON(requestParameters.createPrivateLobbyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
    }

    /**
     */
    async createLocalLobby(appId: string, authorization: string, createPrivateLobbyRequest: CreatePrivateLobbyRequest, roomId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lobby> {
        const response = await this.createLocalLobbyRaw({ appId: appId, authorization: authorization, createPrivateLobbyRequest: createPrivateLobbyRequest, roomId: roomId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createPrivateLobbyRaw(requestParameters: CreatePrivateLobbyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lobby>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createPrivateLobby.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling createPrivateLobby.');
        }

        if (requestParameters.createPrivateLobbyRequest === null || requestParameters.createPrivateLobbyRequest === undefined) {
            throw new runtime.RequiredError('createPrivateLobbyRequest','Required parameter requestParameters.createPrivateLobbyRequest was null or undefined when calling createPrivateLobby.');
        }

        const queryParameters: any = {};

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/lobby/v2/{appId}/create/private`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePrivateLobbyRequestToJSON(requestParameters.createPrivateLobbyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
    }

    /**
     */
    async createPrivateLobby(appId: string, authorization: string, createPrivateLobbyRequest: CreatePrivateLobbyRequest, roomId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lobby> {
        const response = await this.createPrivateLobbyRaw({ appId: appId, authorization: authorization, createPrivateLobbyRequest: createPrivateLobbyRequest, roomId: roomId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async createPublicLobbyRaw(requestParameters: CreatePublicLobbyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lobby>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createPublicLobby.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling createPublicLobby.');
        }

        if (requestParameters.createPrivateLobbyRequest === null || requestParameters.createPrivateLobbyRequest === undefined) {
            throw new runtime.RequiredError('createPrivateLobbyRequest','Required parameter requestParameters.createPrivateLobbyRequest was null or undefined when calling createPublicLobby.');
        }

        const queryParameters: any = {};

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/lobby/v2/{appId}/create/public`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePrivateLobbyRequestToJSON(requestParameters.createPrivateLobbyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
    }

    /**
     */
    async createPublicLobby(appId: string, authorization: string, createPrivateLobbyRequest: CreatePrivateLobbyRequest, roomId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lobby> {
        const response = await this.createPublicLobbyRaw({ appId: appId, authorization: authorization, createPrivateLobbyRequest: createPrivateLobbyRequest, roomId: roomId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLobbyInfoRaw(requestParameters: GetLobbyInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lobby>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getLobbyInfo.');
        }

        if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
            throw new runtime.RequiredError('roomId','Required parameter requestParameters.roomId was null or undefined when calling getLobbyInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lobby/v2/{appId}/info/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
    }

    /**
     */
    async getLobbyInfo(appId: string, roomId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lobby> {
        const response = await this.getLobbyInfoRaw({ appId: appId, roomId: roomId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async listActivePublicLobbiesRaw(requestParameters: ListActivePublicLobbiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Lobby>>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling listActivePublicLobbies.');
        }

        const queryParameters: any = {};

        if (requestParameters.region !== undefined) {
            queryParameters['region'] = requestParameters.region;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lobby/v2/{appId}/list/public`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LobbyFromJSON));
    }

    /**
     */
    async listActivePublicLobbies(appId: string, region?: Region, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Lobby>> {
        const response = await this.listActivePublicLobbiesRaw({ appId: appId, region: region }, initOverrides);
        return await response.value();
    }

    /**
     */
    async setLobbyStateRaw(requestParameters: SetLobbyStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lobby>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling setLobbyState.');
        }

        if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
            throw new runtime.RequiredError('roomId','Required parameter requestParameters.roomId was null or undefined when calling setLobbyState.');
        }

        if (requestParameters.setLobbyStateRequest === null || requestParameters.setLobbyStateRequest === undefined) {
            throw new runtime.RequiredError('setLobbyStateRequest','Required parameter requestParameters.setLobbyStateRequest was null or undefined when calling setLobbyState.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("auth0", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lobby/v2/{appId}/setState/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetLobbyStateRequestToJSON(requestParameters.setLobbyStateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
    }

    /**
     */
    async setLobbyState(appId: string, roomId: string, setLobbyStateRequest: SetLobbyStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lobby> {
        const response = await this.setLobbyStateRaw({ appId: appId, roomId: roomId, setLobbyStateRequest: setLobbyStateRequest }, initOverrides);
        return await response.value();
    }

}
