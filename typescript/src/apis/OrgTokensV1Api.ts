/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError,
  CreateOrgToken,
  CreatedOrgToken,
  ListOrgTokens,
} from '../models';
import {
    ApiErrorFromJSON,
    ApiErrorToJSON,
    CreateOrgTokenFromJSON,
    CreateOrgTokenToJSON,
    CreatedOrgTokenFromJSON,
    CreatedOrgTokenToJSON,
    ListOrgTokensFromJSON,
    ListOrgTokensToJSON,
} from '../models';

export interface CreateOrgTokenRequest {
    orgId: string;
    createOrgToken: CreateOrgToken;
}

export interface GetOrgTokensRequest {
    orgId: string;
}

export interface RevokeOrgTokenRequest {
    orgId: string;
    orgTokenId: string;
}

/**
 * OrgTokensV1Api - interface
 * 
 * @export
 * @interface OrgTokensV1ApiInterface
 */
export interface OrgTokensV1ApiInterface {
    /**
     * Create a new organization token.
     * @param {string} orgId 
     * @param {CreateOrgToken} createOrgToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgTokensV1ApiInterface
     */
    createOrgTokenRaw(requestParameters: CreateOrgTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatedOrgToken>>;

    /**
     * Create a new organization token.
     */
    createOrgToken(orgId: string, createOrgToken: CreateOrgToken, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatedOrgToken>;

    /**
     * List all organization tokens for a given org.
     * @param {string} orgId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgTokensV1ApiInterface
     */
    getOrgTokensRaw(requestParameters: GetOrgTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOrgTokens>>;

    /**
     * List all organization tokens for a given org.
     */
    getOrgTokens(orgId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOrgTokens>;

    /**
     * Revoke an organization token.
     * @param {string} orgId 
     * @param {string} orgTokenId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgTokensV1ApiInterface
     */
    revokeOrgTokenRaw(requestParameters: RevokeOrgTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>>;

    /**
     * Revoke an organization token.
     */
    revokeOrgToken(orgId: string, orgTokenId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean>;

}

/**
 * 
 */
export class OrgTokensV1Api extends runtime.BaseAPI implements OrgTokensV1ApiInterface {

    /**
     * Create a new organization token.
     */
    async createOrgTokenRaw(requestParameters: CreateOrgTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatedOrgToken>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling createOrgToken.');
        }

        if (requestParameters.createOrgToken === null || requestParameters.createOrgToken === undefined) {
            throw new runtime.RequiredError('createOrgToken','Required parameter requestParameters.createOrgToken was null or undefined when calling createOrgToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("hathoraDevToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tokens/v1/orgs/{orgId}/create`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrgTokenToJSON(requestParameters.createOrgToken),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatedOrgTokenFromJSON(jsonValue));
    }

    /**
     * Create a new organization token.
     */
    async createOrgToken(orgId: string, createOrgToken: CreateOrgToken, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatedOrgToken> {
        const response = await this.createOrgTokenRaw({ orgId: orgId, createOrgToken: createOrgToken }, initOverrides);
        return await response.value();
    }

    /**
     * List all organization tokens for a given org.
     */
    async getOrgTokensRaw(requestParameters: GetOrgTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOrgTokens>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getOrgTokens.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("hathoraDevToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tokens/v1/orgs/{orgId}`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOrgTokensFromJSON(jsonValue));
    }

    /**
     * List all organization tokens for a given org.
     */
    async getOrgTokens(orgId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOrgTokens> {
        const response = await this.getOrgTokensRaw({ orgId: orgId }, initOverrides);
        return await response.value();
    }

    /**
     * Revoke an organization token.
     */
    async revokeOrgTokenRaw(requestParameters: RevokeOrgTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling revokeOrgToken.');
        }

        if (requestParameters.orgTokenId === null || requestParameters.orgTokenId === undefined) {
            throw new runtime.RequiredError('orgTokenId','Required parameter requestParameters.orgTokenId was null or undefined when calling revokeOrgToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("hathoraDevToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tokens/v1/orgs/{orgId}/tokens/{orgTokenId}/revoke`.replace(`{${"orgId"}}`, encodeURIComponent(String(requestParameters.orgId))).replace(`{${"orgTokenId"}}`, encodeURIComponent(String(requestParameters.orgTokenId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Revoke an organization token.
     */
    async revokeOrgToken(orgId: string, orgTokenId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.revokeOrgTokenRaw({ orgId: orgId, orgTokenId: orgTokenId }, initOverrides);
        return await response.value();
    }

}
