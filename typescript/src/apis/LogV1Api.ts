/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Region,
} from '../models';
import {
    RegionFromJSON,
    RegionToJSON,
} from '../models';

export interface GetLogsForAppRequest {
    appId: string;
    follow?: boolean;
    tailLines?: number;
    region?: Region;
}

export interface GetLogsForDeploymentRequest {
    appId: string;
    deploymentId: number;
    follow?: boolean;
    tailLines?: number;
}

export interface GetLogsForProcessRequest {
    appId: string;
    processId: string;
    follow?: boolean;
    tailLines?: number;
}

/**
 * LogV1Api - interface
 * 
 * @export
 * @interface LogV1ApiInterface
 */
export interface LogV1ApiInterface {
    /**
     * 
     * @param {string} appId 
     * @param {boolean} [follow] 
     * @param {number} [tailLines] 
     * @param {Region} [region] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogV1ApiInterface
     */
    getLogsForAppRaw(requestParameters: GetLogsForAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     */
    getLogsForApp(appId: string, follow?: boolean, tailLines?: number, region?: Region, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @param {string} appId 
     * @param {number} deploymentId 
     * @param {boolean} [follow] 
     * @param {number} [tailLines] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogV1ApiInterface
     */
    getLogsForDeploymentRaw(requestParameters: GetLogsForDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     */
    getLogsForDeployment(appId: string, deploymentId: number, follow?: boolean, tailLines?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @param {string} appId 
     * @param {string} processId 
     * @param {boolean} [follow] 
     * @param {number} [tailLines] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogV1ApiInterface
     */
    getLogsForProcessRaw(requestParameters: GetLogsForProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     */
    getLogsForProcess(appId: string, processId: string, follow?: boolean, tailLines?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}

/**
 * 
 */
export class LogV1Api extends runtime.BaseAPI implements LogV1ApiInterface {

    /**
     */
    async getLogsForAppRaw(requestParameters: GetLogsForAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getLogsForApp.');
        }

        const queryParameters: any = {};

        if (requestParameters.follow !== undefined) {
            queryParameters['follow'] = requestParameters.follow;
        }

        if (requestParameters.tailLines !== undefined) {
            queryParameters['tailLines'] = requestParameters.tailLines;
        }

        if (requestParameters.region !== undefined) {
            queryParameters['region'] = requestParameters.region;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("auth0", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/logs/v1/{appId}/all`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getLogsForApp(appId: string, follow?: boolean, tailLines?: number, region?: Region, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getLogsForAppRaw({ appId: appId, follow: follow, tailLines: tailLines, region: region }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLogsForDeploymentRaw(requestParameters: GetLogsForDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getLogsForDeployment.');
        }

        if (requestParameters.deploymentId === null || requestParameters.deploymentId === undefined) {
            throw new runtime.RequiredError('deploymentId','Required parameter requestParameters.deploymentId was null or undefined when calling getLogsForDeployment.');
        }

        const queryParameters: any = {};

        if (requestParameters.follow !== undefined) {
            queryParameters['follow'] = requestParameters.follow;
        }

        if (requestParameters.tailLines !== undefined) {
            queryParameters['tailLines'] = requestParameters.tailLines;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("auth0", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/logs/v1/{appId}/deployment/{deploymentId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getLogsForDeployment(appId: string, deploymentId: number, follow?: boolean, tailLines?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getLogsForDeploymentRaw({ appId: appId, deploymentId: deploymentId, follow: follow, tailLines: tailLines }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLogsForProcessRaw(requestParameters: GetLogsForProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getLogsForProcess.');
        }

        if (requestParameters.processId === null || requestParameters.processId === undefined) {
            throw new runtime.RequiredError('processId','Required parameter requestParameters.processId was null or undefined when calling getLogsForProcess.');
        }

        const queryParameters: any = {};

        if (requestParameters.follow !== undefined) {
            queryParameters['follow'] = requestParameters.follow;
        }

        if (requestParameters.tailLines !== undefined) {
            queryParameters['tailLines'] = requestParameters.tailLines;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("auth0", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/logs/v1/{appId}/process/{processId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getLogsForProcess(appId: string, processId: string, follow?: boolean, tailLines?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getLogsForProcessRaw({ appId: appId, processId: processId, follow: follow, tailLines: tailLines }, initOverrides);
        return await response.value();
    }

}
