/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Region } from './Region';
import {
    RegionFromJSON,
    RegionFromJSONTyped,
    RegionToJSON,
} from './Region';

/**
 * 
 * @export
 * @interface Process
 */
export interface Process {
    /**
     * 
     * @type {number}
     * @memberof Process
     */
    egressedBytes: number;
    /**
     * 
     * @type {Date}
     * @memberof Process
     */
    idleSince: Date | null;
    /**
     * 
     * @type {number}
     * @memberof Process
     */
    activeConnections: number;
    /**
     * 
     * @type {number}
     * @memberof Process
     */
    roomSlotsAvailable: number;
    /**
     * 
     * @type {boolean}
     * @memberof Process
     */
    draining: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Process
     */
    terminatedAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Process
     */
    stoppingAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Process
     */
    startedAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Process
     */
    startingAt: Date;
    /**
     * 
     * @type {number}
     * @memberof Process
     */
    roomsPerProcess: number;
    /**
     * 
     * @type {number}
     * @memberof Process
     */
    port: number;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    host: string;
    /**
     * 
     * @type {Region}
     * @memberof Process
     */
    region: Region;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    processId: string;
    /**
     * 
     * @type {number}
     * @memberof Process
     */
    deploymentId: number;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    appId: string;
}

/**
 * Check if a given object implements the Process interface.
 */
export function instanceOfProcess(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "egressedBytes" in value;
    isInstance = isInstance && "idleSince" in value;
    isInstance = isInstance && "activeConnections" in value;
    isInstance = isInstance && "roomSlotsAvailable" in value;
    isInstance = isInstance && "draining" in value;
    isInstance = isInstance && "terminatedAt" in value;
    isInstance = isInstance && "stoppingAt" in value;
    isInstance = isInstance && "startedAt" in value;
    isInstance = isInstance && "startingAt" in value;
    isInstance = isInstance && "roomsPerProcess" in value;
    isInstance = isInstance && "port" in value;
    isInstance = isInstance && "host" in value;
    isInstance = isInstance && "region" in value;
    isInstance = isInstance && "processId" in value;
    isInstance = isInstance && "deploymentId" in value;
    isInstance = isInstance && "appId" in value;

    return isInstance;
}

export function ProcessFromJSON(json: any): Process {
    return ProcessFromJSONTyped(json, false);
}

export function ProcessFromJSONTyped(json: any, ignoreDiscriminator: boolean): Process {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'egressedBytes': json['egressedBytes'],
        'idleSince': (json['idleSince'] === null ? null : new Date(json['idleSince'])),
        'activeConnections': json['activeConnections'],
        'roomSlotsAvailable': json['roomSlotsAvailable'],
        'draining': json['draining'],
        'terminatedAt': (json['terminatedAt'] === null ? null : new Date(json['terminatedAt'])),
        'stoppingAt': (json['stoppingAt'] === null ? null : new Date(json['stoppingAt'])),
        'startedAt': (json['startedAt'] === null ? null : new Date(json['startedAt'])),
        'startingAt': (new Date(json['startingAt'])),
        'roomsPerProcess': json['roomsPerProcess'],
        'port': json['port'],
        'host': json['host'],
        'region': RegionFromJSON(json['region']),
        'processId': json['processId'],
        'deploymentId': json['deploymentId'],
        'appId': json['appId'],
    };
}

export function ProcessToJSON(value?: Process | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'egressedBytes': value.egressedBytes,
        'idleSince': (value.idleSince === null ? null : value.idleSince.toISOString()),
        'activeConnections': value.activeConnections,
        'roomSlotsAvailable': value.roomSlotsAvailable,
        'draining': value.draining,
        'terminatedAt': (value.terminatedAt === null ? null : value.terminatedAt.toISOString()),
        'stoppingAt': (value.stoppingAt === null ? null : value.stoppingAt.toISOString()),
        'startedAt': (value.startedAt === null ? null : value.startedAt.toISOString()),
        'startingAt': (value.startingAt.toISOString()),
        'roomsPerProcess': value.roomsPerProcess,
        'port': value.port,
        'host': value.host,
        'region': RegionToJSON(value.region),
        'processId': value.processId,
        'deploymentId': value.deploymentId,
        'appId': value.appId,
    };
}

