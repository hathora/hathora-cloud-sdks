/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InviteStatusAccepted
 */
export interface InviteStatusAccepted {
    /**
     * System generated unique identifier for a user. Not guaranteed to have a specific format.
     * @type {string}
     * @memberof InviteStatusAccepted
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof InviteStatusAccepted
     */
    type: InviteStatusAcceptedTypeEnum;
}


/**
 * @export
 */
export const InviteStatusAcceptedTypeEnum = {
    Accepted: 'accepted'
} as const;
export type InviteStatusAcceptedTypeEnum = typeof InviteStatusAcceptedTypeEnum[keyof typeof InviteStatusAcceptedTypeEnum];


/**
 * Check if a given object implements the InviteStatusAccepted interface.
 */
export function instanceOfInviteStatusAccepted(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function InviteStatusAcceptedFromJSON(json: any): InviteStatusAccepted {
    return InviteStatusAcceptedFromJSONTyped(json, false);
}

export function InviteStatusAcceptedFromJSONTyped(json: any, ignoreDiscriminator: boolean): InviteStatusAccepted {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'userId': json['userId'],
        'type': json['type'],
    };
}

export function InviteStatusAcceptedToJSON(value?: InviteStatusAccepted | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'userId': value.userId,
        'type': value.type,
    };
}

