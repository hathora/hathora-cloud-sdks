/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrganizationInviteStatus } from './OrganizationInviteStatus';
import {
    OrganizationInviteStatusFromJSON,
    OrganizationInviteStatusFromJSONTyped,
    OrganizationInviteStatusToJSON,
} from './OrganizationInviteStatus';

/**
 * 
 * @export
 * @interface OrgPermission
 */
export interface OrgPermission {
    /**
     * 
     * @type {Date}
     * @memberof OrgPermission
     */
    updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof OrgPermission
     */
    createdAt: Date;
    /**
     * 
     * @type {OrganizationInviteStatus}
     * @memberof OrgPermission
     */
    status: OrganizationInviteStatus;
    /**
     * 
     * @type {string}
     * @memberof OrgPermission
     */
    userEmail: string;
    /**
     * System generated unique identifier for a user. Not guaranteed to have a specific format.
     * @type {string}
     * @memberof OrgPermission
     */
    invitedBy: string;
    /**
     * System generated unique identifier for an organization. Not guaranteed to have a specific format.
     * @type {string}
     * @memberof OrgPermission
     */
    orgId: string;
}

/**
 * Check if a given object implements the OrgPermission interface.
 */
export function instanceOfOrgPermission(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "userEmail" in value;
    isInstance = isInstance && "invitedBy" in value;
    isInstance = isInstance && "orgId" in value;

    return isInstance;
}

export function OrgPermissionFromJSON(json: any): OrgPermission {
    return OrgPermissionFromJSONTyped(json, false);
}

export function OrgPermissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrgPermission {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'updatedAt': (new Date(json['updatedAt'])),
        'createdAt': (new Date(json['createdAt'])),
        'status': OrganizationInviteStatusFromJSON(json['status']),
        'userEmail': json['userEmail'],
        'invitedBy': json['invitedBy'],
        'orgId': json['orgId'],
    };
}

export function OrgPermissionToJSON(value?: OrgPermission | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'updatedAt': (value.updatedAt.toISOString()),
        'createdAt': (value.createdAt.toISOString()),
        'status': OrganizationInviteStatusToJSON(value.status),
        'userEmail': value.userEmail,
        'invitedBy': value.invitedBy,
        'orgId': value.orgId,
    };
}

