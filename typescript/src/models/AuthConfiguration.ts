/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthConfigurationGoogle } from './AuthConfigurationGoogle';
import {
    AuthConfigurationGoogleFromJSON,
    AuthConfigurationGoogleFromJSONTyped,
    AuthConfigurationGoogleToJSON,
} from './AuthConfigurationGoogle';

/**
 * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
 * @export
 * @interface AuthConfiguration
 */
export interface AuthConfiguration {
    /**
     * 
     * @type {AuthConfigurationGoogle}
     * @memberof AuthConfiguration
     */
    google?: AuthConfigurationGoogle;
    /**
     * Construct a type with a set of properties K of type T
     * @type {object}
     * @memberof AuthConfiguration
     */
    nickname?: object;
    /**
     * Construct a type with a set of properties K of type T
     * @type {object}
     * @memberof AuthConfiguration
     */
    anonymous?: object;
}

/**
 * Check if a given object implements the AuthConfiguration interface.
 */
export function instanceOfAuthConfiguration(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuthConfigurationFromJSON(json: any): AuthConfiguration {
    return AuthConfigurationFromJSONTyped(json, false);
}

export function AuthConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthConfiguration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'google': !exists(json, 'google') ? undefined : AuthConfigurationGoogleFromJSON(json['google']),
        'nickname': !exists(json, 'nickname') ? undefined : json['nickname'],
        'anonymous': !exists(json, 'anonymous') ? undefined : json['anonymous'],
    };
}

export function AuthConfigurationToJSON(value?: AuthConfiguration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'google': AuthConfigurationGoogleToJSON(value.google),
        'nickname': value.nickname,
        'anonymous': value.anonymous,
    };
}

