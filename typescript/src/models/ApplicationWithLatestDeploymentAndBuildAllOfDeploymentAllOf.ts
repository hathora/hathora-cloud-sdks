/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Build } from './Build';
import {
    BuildFromJSON,
    BuildFromJSONTyped,
    BuildToJSON,
} from './Build';

/**
 * 
 * @export
 * @interface ApplicationWithLatestDeploymentAndBuildAllOfDeploymentAllOf
 */
export interface ApplicationWithLatestDeploymentAndBuildAllOfDeploymentAllOf {
    /**
     * 
     * @type {Build}
     * @memberof ApplicationWithLatestDeploymentAndBuildAllOfDeploymentAllOf
     */
    build: Build;
}

/**
 * Check if a given object implements the ApplicationWithLatestDeploymentAndBuildAllOfDeploymentAllOf interface.
 */
export function instanceOfApplicationWithLatestDeploymentAndBuildAllOfDeploymentAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "build" in value;

    return isInstance;
}

export function ApplicationWithLatestDeploymentAndBuildAllOfDeploymentAllOfFromJSON(json: any): ApplicationWithLatestDeploymentAndBuildAllOfDeploymentAllOf {
    return ApplicationWithLatestDeploymentAndBuildAllOfDeploymentAllOfFromJSONTyped(json, false);
}

export function ApplicationWithLatestDeploymentAndBuildAllOfDeploymentAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationWithLatestDeploymentAndBuildAllOfDeploymentAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'build': BuildFromJSON(json['build']),
    };
}

export function ApplicationWithLatestDeploymentAndBuildAllOfDeploymentAllOfToJSON(value?: ApplicationWithLatestDeploymentAndBuildAllOfDeploymentAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'build': BuildToJSON(value.build),
    };
}

