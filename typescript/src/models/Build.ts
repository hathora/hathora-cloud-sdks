/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BuildRegionalContainerTagsInner } from './BuildRegionalContainerTagsInner';
import {
    BuildRegionalContainerTagsInnerFromJSON,
    BuildRegionalContainerTagsInnerFromJSONTyped,
    BuildRegionalContainerTagsInnerToJSON,
} from './BuildRegionalContainerTagsInner';

/**
 * Build is a versioned artifact for a game server's container image and its data.
 * @export
 * @interface Build
 */
export interface Build {
    /**
     * An alias for the container image in our regional registries.
     * @type {Array<BuildRegionalContainerTagsInner>}
     * @memberof Build
     */
    regionalContainerTags: Array<BuildRegionalContainerTagsInner>;
    /**
     * Image size in MB.
     * @type {number}
     * @memberof Build
     */
    imageSize: number;
    /**
     * Status of creating a build.
     * 
     * `created`: a new `buildId` was generated
     * 
     * `running`: the container image is being built
     * 
     * `succeeded`: the container image was successfully built and stored in our registry
     * 
     * `failed`: there was an issue creating and storing the container image in our container registry
     * @type {string}
     * @memberof Build
     */
    status: BuildStatusEnum;
    /**
     * When the container image was deleted.
     * @type {Date}
     * @memberof Build
     */
    deletedAt: Date | null;
    /**
     * When the container image finished being built.
     * @type {Date}
     * @memberof Build
     */
    finishedAt: Date | null;
    /**
     * When the container image starts getting built.
     * @type {Date}
     * @memberof Build
     */
    startedAt: Date | null;
    /**
     * When a new `buildId` is generated.
     * @type {Date}
     * @memberof Build
     */
    createdAt: Date;
    /**
     * Email address for the user that created the build.
     * @type {string}
     * @memberof Build
     */
    createdBy: string;
    /**
     * System generated id for a build. Increments by 1.
     * @type {number}
     * @memberof Build
     */
    buildId: number;
    /**
     * System generated unique identifier for an application.
     * @type {string}
     * @memberof Build
     */
    appId: string;
}


/**
 * @export
 */
export const BuildStatusEnum = {
    Created: 'created',
    Running: 'running',
    Succeeded: 'succeeded',
    Failed: 'failed'
} as const;
export type BuildStatusEnum = typeof BuildStatusEnum[keyof typeof BuildStatusEnum];


/**
 * Check if a given object implements the Build interface.
 */
export function instanceOfBuild(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "regionalContainerTags" in value;
    isInstance = isInstance && "imageSize" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "deletedAt" in value;
    isInstance = isInstance && "finishedAt" in value;
    isInstance = isInstance && "startedAt" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "buildId" in value;
    isInstance = isInstance && "appId" in value;

    return isInstance;
}

export function BuildFromJSON(json: any): Build {
    return BuildFromJSONTyped(json, false);
}

export function BuildFromJSONTyped(json: any, ignoreDiscriminator: boolean): Build {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'regionalContainerTags': ((json['regionalContainerTags'] as Array<any>).map(BuildRegionalContainerTagsInnerFromJSON)),
        'imageSize': json['imageSize'],
        'status': json['status'],
        'deletedAt': (json['deletedAt'] === null ? null : new Date(json['deletedAt'])),
        'finishedAt': (json['finishedAt'] === null ? null : new Date(json['finishedAt'])),
        'startedAt': (json['startedAt'] === null ? null : new Date(json['startedAt'])),
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'],
        'buildId': json['buildId'],
        'appId': json['appId'],
    };
}

export function BuildToJSON(value?: Build | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'regionalContainerTags': ((value.regionalContainerTags as Array<any>).map(BuildRegionalContainerTagsInnerToJSON)),
        'imageSize': value.imageSize,
        'status': value.status,
        'deletedAt': (value.deletedAt === null ? null : value.deletedAt.toISOString()),
        'finishedAt': (value.finishedAt === null ? null : value.finishedAt.toISOString()),
        'startedAt': (value.startedAt === null ? null : value.startedAt.toISOString()),
        'createdAt': (value.createdAt.toISOString()),
        'createdBy': value.createdBy,
        'buildId': value.buildId,
        'appId': value.appId,
    };
}

