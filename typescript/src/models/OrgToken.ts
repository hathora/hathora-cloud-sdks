/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrgTokenStatus } from './OrgTokenStatus';
import {
    OrgTokenStatusFromJSON,
    OrgTokenStatusFromJSONTyped,
    OrgTokenStatusToJSON,
} from './OrgTokenStatus';

/**
 * 
 * @export
 * @interface OrgToken
 */
export interface OrgToken {
    /**
     * 
     * @type {Date}
     * @memberof OrgToken
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof OrgToken
     */
    createdBy: string;
    /**
     * 
     * @type {string}
     * @memberof OrgToken
     */
    lastFourCharsOfKey: string;
    /**
     * 
     * @type {OrgTokenStatus}
     * @memberof OrgToken
     */
    status: OrgTokenStatus;
    /**
     * Readable name for a token. Must be unique within an organization.
     * @type {string}
     * @memberof OrgToken
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof OrgToken
     */
    orgId: string;
    /**
     * System generated unique identifier for an organization token.
     * @type {string}
     * @memberof OrgToken
     */
    orgTokenId: string;
}

/**
 * Check if a given object implements the OrgToken interface.
 */
export function instanceOfOrgToken(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "lastFourCharsOfKey" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "orgId" in value;
    isInstance = isInstance && "orgTokenId" in value;

    return isInstance;
}

export function OrgTokenFromJSON(json: any): OrgToken {
    return OrgTokenFromJSONTyped(json, false);
}

export function OrgTokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrgToken {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'],
        'lastFourCharsOfKey': json['lastFourCharsOfKey'],
        'status': OrgTokenStatusFromJSON(json['status']),
        'name': json['name'],
        'orgId': json['orgId'],
        'orgTokenId': json['orgTokenId'],
    };
}

export function OrgTokenToJSON(value?: OrgToken | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createdAt': (value.createdAt.toISOString()),
        'createdBy': value.createdBy,
        'lastFourCharsOfKey': value.lastFourCharsOfKey,
        'status': OrgTokenStatusToJSON(value.status),
        'name': value.name,
        'orgId': value.orgId,
        'orgTokenId': value.orgTokenId,
    };
}

