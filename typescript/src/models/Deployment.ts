/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContainerPort } from './ContainerPort';
import {
    ContainerPortFromJSON,
    ContainerPortFromJSONTyped,
    ContainerPortToJSON,
} from './ContainerPort';
import type { DeploymentEnvInner } from './DeploymentEnvInner';
import {
    DeploymentEnvInnerFromJSON,
    DeploymentEnvInnerFromJSONTyped,
    DeploymentEnvInnerToJSON,
} from './DeploymentEnvInner';
import type { PlanName } from './PlanName';
import {
    PlanNameFromJSON,
    PlanNameFromJSONTyped,
    PlanNameToJSON,
} from './PlanName';
import type { TransportType } from './TransportType';
import {
    TransportTypeFromJSON,
    TransportTypeFromJSONTyped,
    TransportTypeToJSON,
} from './TransportType';

/**
 * 
 * @export
 * @interface Deployment
 */
export interface Deployment {
    /**
     * 
     * @type {Array<DeploymentEnvInner>}
     * @memberof Deployment
     */
    env: Array<DeploymentEnvInner>;
    /**
     * 
     * @type {number}
     * @memberof Deployment
     */
    roomsPerProcess: number;
    /**
     * 
     * @type {PlanName}
     * @memberof Deployment
     */
    planName: PlanName;
    /**
     * 
     * @type {Array<ContainerPort>}
     * @memberof Deployment
     */
    additionalContainerPorts: Array<ContainerPort>;
    /**
     * 
     * @type {ContainerPort}
     * @memberof Deployment
     */
    defaultContainerPort: ContainerPort;
    /**
     * 
     * @type {TransportType}
     * @memberof Deployment
     */
    transportType: TransportType;
    /**
     * 
     * @type {number}
     * @memberof Deployment
     * @deprecated
     */
    containerPort: number;
    /**
     * 
     * @type {Date}
     * @memberof Deployment
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Deployment
     */
    createdBy: string;
    /**
     * 
     * @type {number}
     * @memberof Deployment
     */
    requestedMemoryMB: number;
    /**
     * 
     * @type {number}
     * @memberof Deployment
     */
    requestedCPU: number;
    /**
     * 
     * @type {number}
     * @memberof Deployment
     */
    deploymentId: number;
    /**
     * 
     * @type {number}
     * @memberof Deployment
     */
    buildId: number;
    /**
     * 
     * @type {string}
     * @memberof Deployment
     */
    appId: string;
}

/**
 * Check if a given object implements the Deployment interface.
 */
export function instanceOfDeployment(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "env" in value;
    isInstance = isInstance && "roomsPerProcess" in value;
    isInstance = isInstance && "planName" in value;
    isInstance = isInstance && "additionalContainerPorts" in value;
    isInstance = isInstance && "defaultContainerPort" in value;
    isInstance = isInstance && "transportType" in value;
    isInstance = isInstance && "containerPort" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "requestedMemoryMB" in value;
    isInstance = isInstance && "requestedCPU" in value;
    isInstance = isInstance && "deploymentId" in value;
    isInstance = isInstance && "buildId" in value;
    isInstance = isInstance && "appId" in value;

    return isInstance;
}

export function DeploymentFromJSON(json: any): Deployment {
    return DeploymentFromJSONTyped(json, false);
}

export function DeploymentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Deployment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'env': ((json['env'] as Array<any>).map(DeploymentEnvInnerFromJSON)),
        'roomsPerProcess': json['roomsPerProcess'],
        'planName': PlanNameFromJSON(json['planName']),
        'additionalContainerPorts': ((json['additionalContainerPorts'] as Array<any>).map(ContainerPortFromJSON)),
        'defaultContainerPort': ContainerPortFromJSON(json['defaultContainerPort']),
        'transportType': TransportTypeFromJSON(json['transportType']),
        'containerPort': json['containerPort'],
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'],
        'requestedMemoryMB': json['requestedMemoryMB'],
        'requestedCPU': json['requestedCPU'],
        'deploymentId': json['deploymentId'],
        'buildId': json['buildId'],
        'appId': json['appId'],
    };
}

export function DeploymentToJSON(value?: Deployment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'env': ((value.env as Array<any>).map(DeploymentEnvInnerToJSON)),
        'roomsPerProcess': value.roomsPerProcess,
        'planName': PlanNameToJSON(value.planName),
        'additionalContainerPorts': ((value.additionalContainerPorts as Array<any>).map(ContainerPortToJSON)),
        'defaultContainerPort': ContainerPortToJSON(value.defaultContainerPort),
        'transportType': TransportTypeToJSON(value.transportType),
        'containerPort': value.containerPort,
        'createdAt': (value.createdAt.toISOString()),
        'createdBy': value.createdBy,
        'requestedMemoryMB': value.requestedMemoryMB,
        'requestedCPU': value.requestedCPU,
        'deploymentId': value.deploymentId,
        'buildId': value.buildId,
        'appId': value.appId,
    };
}

