/*
 * Hathora Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Hathora.Cloud.Sdk.Client;
using Hathora.Cloud.Sdk.Model;

namespace Hathora.Cloud.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILobbyV1ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        [Obsolete]
        string CreatePrivateLobbyDeprecated(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        [Obsolete]
        ApiResponse<string> CreatePrivateLobbyDeprecatedWithHttpInfo(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        [Obsolete]
        string CreatePublicLobbyDeprecated(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        [Obsolete]
        ApiResponse<string> CreatePublicLobbyDeprecatedWithHttpInfo(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Lobby&gt;</returns>
        [Obsolete]
        List<Lobby> ListActivePublicLobbiesDeprecated(string appId, string authorization, bool? local = default(bool?), Region? region = default(Region?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Lobby&gt;</returns>
        [Obsolete]
        ApiResponse<List<Lobby>> ListActivePublicLobbiesDeprecatedWithHttpInfo(string appId, string authorization, bool? local = default(bool?), Region? region = default(Region?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILobbyV1ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        [Obsolete]
        System.Threading.Tasks.Task<string> CreatePrivateLobbyDeprecatedAsync(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<string>> CreatePrivateLobbyDeprecatedWithHttpInfoAsync(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        [Obsolete]
        System.Threading.Tasks.Task<string> CreatePublicLobbyDeprecatedAsync(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<string>> CreatePublicLobbyDeprecatedWithHttpInfoAsync(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Lobby&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<Lobby>> ListActivePublicLobbiesDeprecatedAsync(string appId, string authorization, bool? local = default(bool?), Region? region = default(Region?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Lobby&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<Lobby>>> ListActivePublicLobbiesDeprecatedWithHttpInfoAsync(string appId, string authorization, bool? local = default(bool?), Region? region = default(Region?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILobbyV1Api : ILobbyV1ApiSync, ILobbyV1ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LobbyV1Api : ILobbyV1Api
    {
        private Hathora.Cloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LobbyV1Api"/> class.
        /// </summary>
        /// <returns></returns>
        public LobbyV1Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LobbyV1Api"/> class.
        /// </summary>
        /// <returns></returns>
        public LobbyV1Api(string basePath)
        {
            this.Configuration = Hathora.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                Hathora.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                new Hathora.Cloud.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Hathora.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Hathora.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Hathora.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LobbyV1Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LobbyV1Api(Hathora.Cloud.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Hathora.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                Hathora.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Hathora.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Hathora.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Hathora.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LobbyV1Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LobbyV1Api(Hathora.Cloud.Sdk.Client.ISynchronousClient client, Hathora.Cloud.Sdk.Client.IAsynchronousClient asyncClient, Hathora.Cloud.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Hathora.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Hathora.Cloud.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Hathora.Cloud.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Hathora.Cloud.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Hathora.Cloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        [Obsolete]
        public string CreatePrivateLobbyDeprecated(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0)
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<string> localVarResponse = CreatePrivateLobbyDeprecatedWithHttpInfo(appId, authorization, region, local);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        [Obsolete]
        public Hathora.Cloud.Sdk.Client.ApiResponse<string> CreatePrivateLobbyDeprecatedWithHttpInfo(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV1Api->CreatePrivateLobbyDeprecated");
            }

            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV1Api->CreatePrivateLobbyDeprecated");
            }

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (local != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "local", local));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "LobbyV1Api.CreatePrivateLobbyDeprecated";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/lobby/v1/{appId}/create/private", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePrivateLobbyDeprecated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<string> CreatePrivateLobbyDeprecatedAsync(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<string> localVarResponse = await CreatePrivateLobbyDeprecatedWithHttpInfoAsync(appId, authorization, region, local, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<string>> CreatePrivateLobbyDeprecatedWithHttpInfoAsync(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV1Api->CreatePrivateLobbyDeprecated");
            }

            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV1Api->CreatePrivateLobbyDeprecated");
            }


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (local != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "local", local));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "LobbyV1Api.CreatePrivateLobbyDeprecated";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/lobby/v1/{appId}/create/private", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePrivateLobbyDeprecated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        [Obsolete]
        public string CreatePublicLobbyDeprecated(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0)
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<string> localVarResponse = CreatePublicLobbyDeprecatedWithHttpInfo(appId, authorization, region, local);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        [Obsolete]
        public Hathora.Cloud.Sdk.Client.ApiResponse<string> CreatePublicLobbyDeprecatedWithHttpInfo(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV1Api->CreatePublicLobbyDeprecated");
            }

            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV1Api->CreatePublicLobbyDeprecated");
            }

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (local != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "local", local));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "LobbyV1Api.CreatePublicLobbyDeprecated";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/lobby/v1/{appId}/create/public", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePublicLobbyDeprecated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<string> CreatePublicLobbyDeprecatedAsync(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<string> localVarResponse = await CreatePublicLobbyDeprecatedWithHttpInfoAsync(appId, authorization, region, local, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="region"> (optional)</param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<string>> CreatePublicLobbyDeprecatedWithHttpInfoAsync(string appId, string authorization, Region? region = default(Region?), bool? local = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV1Api->CreatePublicLobbyDeprecated");
            }

            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV1Api->CreatePublicLobbyDeprecated");
            }


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (local != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "local", local));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "LobbyV1Api.CreatePublicLobbyDeprecated";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/lobby/v1/{appId}/create/public", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePublicLobbyDeprecated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Lobby&gt;</returns>
        [Obsolete]
        public List<Lobby> ListActivePublicLobbiesDeprecated(string appId, string authorization, bool? local = default(bool?), Region? region = default(Region?), int operationIndex = 0)
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<List<Lobby>> localVarResponse = ListActivePublicLobbiesDeprecatedWithHttpInfo(appId, authorization, local, region);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Lobby&gt;</returns>
        [Obsolete]
        public Hathora.Cloud.Sdk.Client.ApiResponse<List<Lobby>> ListActivePublicLobbiesDeprecatedWithHttpInfo(string appId, string authorization, bool? local = default(bool?), Region? region = default(Region?), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV1Api->ListActivePublicLobbiesDeprecated");
            }

            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV1Api->ListActivePublicLobbiesDeprecated");
            }

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (local != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "local", local));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "LobbyV1Api.ListActivePublicLobbiesDeprecated";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Lobby>>("/lobby/v1/{appId}/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListActivePublicLobbiesDeprecated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Lobby&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<Lobby>> ListActivePublicLobbiesDeprecatedAsync(string appId, string authorization, bool? local = default(bool?), Region? region = default(Region?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<List<Lobby>> localVarResponse = await ListActivePublicLobbiesDeprecatedWithHttpInfoAsync(appId, authorization, local, region, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="authorization"></param>
        /// <param name="local"> (optional, default to false)</param>
        /// <param name="region"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Lobby&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<List<Lobby>>> ListActivePublicLobbiesDeprecatedWithHttpInfoAsync(string appId, string authorization, bool? local = default(bool?), Region? region = default(Region?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling LobbyV1Api->ListActivePublicLobbiesDeprecated");
            }

            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling LobbyV1Api->ListActivePublicLobbiesDeprecated");
            }


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (local != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "local", local));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "LobbyV1Api.ListActivePublicLobbiesDeprecated";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Lobby>>("/lobby/v1/{appId}/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListActivePublicLobbiesDeprecated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
