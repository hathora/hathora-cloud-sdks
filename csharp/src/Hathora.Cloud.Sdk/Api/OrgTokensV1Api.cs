/*
 * Hathora Cloud API
 *
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Hathora.Cloud.Sdk.Client;
using Hathora.Cloud.Sdk.Model;

namespace Hathora.Cloud.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrgTokensV1ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new organization token.
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="createOrgToken"></param>
        /// <returns>CreatedOrgToken</returns>
        CreatedOrgToken CreateOrgToken(string orgId, CreateOrgToken createOrgToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new organization token.
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="createOrgToken"></param>
        /// <returns>ApiResponse of CreatedOrgToken</returns>
        ApiResponse<CreatedOrgToken> CreateOrgTokenWithHttpInfo(string orgId, CreateOrgToken createOrgToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all organization tokens for a given org.
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <returns>ListOrgTokens</returns>
        ListOrgTokens GetOrgTokens(string orgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all organization tokens for a given org.
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <returns>ApiResponse of ListOrgTokens</returns>
        ApiResponse<ListOrgTokens> GetOrgTokensWithHttpInfo(string orgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revoke an organization token.
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="orgTokenId"></param>
        /// <returns>bool</returns>
        bool RevokeOrgToken(string orgId, string orgTokenId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revoke an organization token.
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="orgTokenId"></param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> RevokeOrgTokenWithHttpInfo(string orgId, string orgTokenId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrgTokensV1ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new organization token.
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="createOrgToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatedOrgToken</returns>
        System.Threading.Tasks.Task<CreatedOrgToken> CreateOrgTokenAsync(string orgId, CreateOrgToken createOrgToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new organization token.
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="createOrgToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatedOrgToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedOrgToken>> CreateOrgTokenWithHttpInfoAsync(string orgId, CreateOrgToken createOrgToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all organization tokens for a given org.
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOrgTokens</returns>
        System.Threading.Tasks.Task<ListOrgTokens> GetOrgTokensAsync(string orgId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all organization tokens for a given org.
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOrgTokens)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOrgTokens>> GetOrgTokensWithHttpInfoAsync(string orgId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revoke an organization token.
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="orgTokenId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> RevokeOrgTokenAsync(string orgId, string orgTokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revoke an organization token.
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="orgTokenId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> RevokeOrgTokenWithHttpInfoAsync(string orgId, string orgTokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrgTokensV1Api : IOrgTokensV1ApiSync, IOrgTokensV1ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrgTokensV1Api : IDisposable, IOrgTokensV1Api
    {
        private Hathora.Cloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrgTokensV1Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public OrgTokensV1Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrgTokensV1Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public OrgTokensV1Api(string basePath)
        {
            this.Configuration = Hathora.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                Hathora.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                new Hathora.Cloud.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Hathora.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Hathora.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrgTokensV1Api"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public OrgTokensV1Api(Hathora.Cloud.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Hathora.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                Hathora.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Hathora.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Hathora.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrgTokensV1Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public OrgTokensV1Api(Hathora.Cloud.Sdk.Client.ISynchronousClient client, Hathora.Cloud.Sdk.Client.IAsynchronousClient asyncClient, Hathora.Cloud.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Hathora.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Hathora.Cloud.Sdk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Hathora.Cloud.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Hathora.Cloud.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Hathora.Cloud.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Hathora.Cloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Create a new organization token.
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="createOrgToken"></param>
        /// <returns>CreatedOrgToken</returns>
        public CreatedOrgToken CreateOrgToken(string orgId, CreateOrgToken createOrgToken)
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<CreatedOrgToken> localVarResponse = CreateOrgTokenWithHttpInfo(orgId, createOrgToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new organization token.
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="createOrgToken"></param>
        /// <returns>ApiResponse of CreatedOrgToken</returns>
        public Hathora.Cloud.Sdk.Client.ApiResponse<CreatedOrgToken> CreateOrgTokenWithHttpInfo(string orgId, CreateOrgToken createOrgToken)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'orgId' when calling OrgTokensV1Api->CreateOrgToken");

            // verify the required parameter 'createOrgToken' is set
            if (createOrgToken == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'createOrgToken' when calling OrgTokensV1Api->CreateOrgToken");

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orgId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(orgId)); // path parameter
            localVarRequestOptions.Data = createOrgToken;

            // authentication (hathoraDevToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatedOrgToken>("/tokens/v1/orgs/{orgId}/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrgToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new organization token.
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="createOrgToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatedOrgToken</returns>
        public async System.Threading.Tasks.Task<CreatedOrgToken> CreateOrgTokenAsync(string orgId, CreateOrgToken createOrgToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateOrgTokenWithHttpInfoAsync(orgId, createOrgToken, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Hathora.Cloud.Sdk.Client.ApiResponse<CreatedOrgToken> localVarResponse = await task.ConfigureAwait(false);
#else
            Hathora.Cloud.Sdk.Client.ApiResponse<CreatedOrgToken> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new organization token.
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="createOrgToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatedOrgToken)</returns>
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<CreatedOrgToken>> CreateOrgTokenWithHttpInfoAsync(string orgId, CreateOrgToken createOrgToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'orgId' when calling OrgTokensV1Api->CreateOrgToken");

            // verify the required parameter 'createOrgToken' is set
            if (createOrgToken == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'createOrgToken' when calling OrgTokensV1Api->CreateOrgToken");


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orgId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(orgId)); // path parameter
            localVarRequestOptions.Data = createOrgToken;

            // authentication (hathoraDevToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CreatedOrgToken>("/tokens/v1/orgs/{orgId}/create", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrgToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List all organization tokens for a given org.
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <returns>ListOrgTokens</returns>
        public ListOrgTokens GetOrgTokens(string orgId)
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<ListOrgTokens> localVarResponse = GetOrgTokensWithHttpInfo(orgId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List all organization tokens for a given org.
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <returns>ApiResponse of ListOrgTokens</returns>
        public Hathora.Cloud.Sdk.Client.ApiResponse<ListOrgTokens> GetOrgTokensWithHttpInfo(string orgId)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'orgId' when calling OrgTokensV1Api->GetOrgTokens");

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orgId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(orgId)); // path parameter

            // authentication (hathoraDevToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListOrgTokens>("/tokens/v1/orgs/{orgId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrgTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List all organization tokens for a given org.
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOrgTokens</returns>
        public async System.Threading.Tasks.Task<ListOrgTokens> GetOrgTokensAsync(string orgId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetOrgTokensWithHttpInfoAsync(orgId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Hathora.Cloud.Sdk.Client.ApiResponse<ListOrgTokens> localVarResponse = await task.ConfigureAwait(false);
#else
            Hathora.Cloud.Sdk.Client.ApiResponse<ListOrgTokens> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List all organization tokens for a given org.
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOrgTokens)</returns>
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<ListOrgTokens>> GetOrgTokensWithHttpInfoAsync(string orgId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'orgId' when calling OrgTokensV1Api->GetOrgTokens");


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orgId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(orgId)); // path parameter

            // authentication (hathoraDevToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ListOrgTokens>("/tokens/v1/orgs/{orgId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrgTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Revoke an organization token.
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="orgTokenId"></param>
        /// <returns>bool</returns>
        public bool RevokeOrgToken(string orgId, string orgTokenId)
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<bool> localVarResponse = RevokeOrgTokenWithHttpInfo(orgId, orgTokenId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Revoke an organization token.
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="orgTokenId"></param>
        /// <returns>ApiResponse of bool</returns>
        public Hathora.Cloud.Sdk.Client.ApiResponse<bool> RevokeOrgTokenWithHttpInfo(string orgId, string orgTokenId)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'orgId' when calling OrgTokensV1Api->RevokeOrgToken");

            // verify the required parameter 'orgTokenId' is set
            if (orgTokenId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'orgTokenId' when calling OrgTokensV1Api->RevokeOrgToken");

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orgId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(orgId)); // path parameter
            localVarRequestOptions.PathParameters.Add("orgTokenId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(orgTokenId)); // path parameter

            // authentication (hathoraDevToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/tokens/v1/orgs/{orgId}/tokens/{orgTokenId}/revoke", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOrgToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Revoke an organization token.
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="orgTokenId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> RevokeOrgTokenAsync(string orgId, string orgTokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = RevokeOrgTokenWithHttpInfoAsync(orgId, orgTokenId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Hathora.Cloud.Sdk.Client.ApiResponse<bool> localVarResponse = await task.ConfigureAwait(false);
#else
            Hathora.Cloud.Sdk.Client.ApiResponse<bool> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Revoke an organization token.
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId"></param>
        /// <param name="orgTokenId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<bool>> RevokeOrgTokenWithHttpInfoAsync(string orgId, string orgTokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'orgId' when calling OrgTokensV1Api->RevokeOrgToken");

            // verify the required parameter 'orgTokenId' is set
            if (orgTokenId == null)
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'orgTokenId' when calling OrgTokensV1Api->RevokeOrgToken");


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orgId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(orgId)); // path parameter
            localVarRequestOptions.PathParameters.Add("orgTokenId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(orgTokenId)); // path parameter

            // authentication (hathoraDevToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<bool>("/tokens/v1/orgs/{orgId}/tokens/{orgTokenId}/revoke", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOrgToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
