/*
 * Hathora Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Hathora.Cloud.Sdk.Client;
using Hathora.Cloud.Sdk.Model;

namespace Hathora.Cloud.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsV1ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="processId"></param>
        /// <param name="metrics"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="step"> (optional, default to 60D)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecordPartialMetricNameMetricValueArray</returns>
        RecordPartialMetricNameMetricValueArray GetMetrics(string appId, string processId, List<MetricName> metrics = default(List<MetricName>), double? end = default(double?), double? start = default(double?), double? step = default(double?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="processId"></param>
        /// <param name="metrics"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="step"> (optional, default to 60D)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecordPartialMetricNameMetricValueArray</returns>
        ApiResponse<RecordPartialMetricNameMetricValueArray> GetMetricsWithHttpInfo(string appId, string processId, List<MetricName> metrics = default(List<MetricName>), double? end = default(double?), double? start = default(double?), double? step = default(double?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsV1ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="processId"></param>
        /// <param name="metrics"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="step"> (optional, default to 60D)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecordPartialMetricNameMetricValueArray</returns>
        System.Threading.Tasks.Task<RecordPartialMetricNameMetricValueArray> GetMetricsAsync(string appId, string processId, List<MetricName> metrics = default(List<MetricName>), double? end = default(double?), double? start = default(double?), double? step = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="processId"></param>
        /// <param name="metrics"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="step"> (optional, default to 60D)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecordPartialMetricNameMetricValueArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordPartialMetricNameMetricValueArray>> GetMetricsWithHttpInfoAsync(string appId, string processId, List<MetricName> metrics = default(List<MetricName>), double? end = default(double?), double? start = default(double?), double? step = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsV1Api : IMetricsV1ApiSync, IMetricsV1ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetricsV1Api : IMetricsV1Api
    {
        private Hathora.Cloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsV1Api"/> class.
        /// </summary>
        /// <returns></returns>
        public MetricsV1Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsV1Api"/> class.
        /// </summary>
        /// <returns></returns>
        public MetricsV1Api(string basePath)
        {
            this.Configuration = Hathora.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                Hathora.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                new Hathora.Cloud.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Hathora.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Hathora.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Hathora.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsV1Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetricsV1Api(Hathora.Cloud.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Hathora.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                Hathora.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Hathora.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Hathora.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Hathora.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsV1Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetricsV1Api(Hathora.Cloud.Sdk.Client.ISynchronousClient client, Hathora.Cloud.Sdk.Client.IAsynchronousClient asyncClient, Hathora.Cloud.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Hathora.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Hathora.Cloud.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Hathora.Cloud.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Hathora.Cloud.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Hathora.Cloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="processId"></param>
        /// <param name="metrics"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="step"> (optional, default to 60D)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecordPartialMetricNameMetricValueArray</returns>
        public RecordPartialMetricNameMetricValueArray GetMetrics(string appId, string processId, List<MetricName> metrics = default(List<MetricName>), double? end = default(double?), double? start = default(double?), double? step = default(double?), int operationIndex = 0)
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<RecordPartialMetricNameMetricValueArray> localVarResponse = GetMetricsWithHttpInfo(appId, processId, metrics, end, start, step);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="processId"></param>
        /// <param name="metrics"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="step"> (optional, default to 60D)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecordPartialMetricNameMetricValueArray</returns>
        public Hathora.Cloud.Sdk.Client.ApiResponse<RecordPartialMetricNameMetricValueArray> GetMetricsWithHttpInfo(string appId, string processId, List<MetricName> metrics = default(List<MetricName>), double? end = default(double?), double? start = default(double?), double? step = default(double?), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling MetricsV1Api->GetMetrics");
            }

            // verify the required parameter 'processId' is set
            if (processId == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'processId' when calling MetricsV1Api->GetMetrics");
            }

            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("processId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(processId)); // path parameter
            if (metrics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "metrics", metrics));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (step != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "step", step));
            }

            localVarRequestOptions.Operation = "MetricsV1Api.GetMetrics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth0) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RecordPartialMetricNameMetricValueArray>("/metrics/v1/{appId}/process/{processId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetrics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="processId"></param>
        /// <param name="metrics"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="step"> (optional, default to 60D)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecordPartialMetricNameMetricValueArray</returns>
        public async System.Threading.Tasks.Task<RecordPartialMetricNameMetricValueArray> GetMetricsAsync(string appId, string processId, List<MetricName> metrics = default(List<MetricName>), double? end = default(double?), double? start = default(double?), double? step = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Hathora.Cloud.Sdk.Client.ApiResponse<RecordPartialMetricNameMetricValueArray> localVarResponse = await GetMetricsWithHttpInfoAsync(appId, processId, metrics, end, start, step, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Hathora.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="processId"></param>
        /// <param name="metrics"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="step"> (optional, default to 60D)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecordPartialMetricNameMetricValueArray)</returns>
        public async System.Threading.Tasks.Task<Hathora.Cloud.Sdk.Client.ApiResponse<RecordPartialMetricNameMetricValueArray>> GetMetricsWithHttpInfoAsync(string appId, string processId, List<MetricName> metrics = default(List<MetricName>), double? end = default(double?), double? start = default(double?), double? step = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'appId' when calling MetricsV1Api->GetMetrics");
            }

            // verify the required parameter 'processId' is set
            if (processId == null)
            {
                throw new Hathora.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'processId' when calling MetricsV1Api->GetMetrics");
            }


            Hathora.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new Hathora.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Hathora.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("processId", Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToString(processId)); // path parameter
            if (metrics != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "metrics", metrics));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (step != null)
            {
                localVarRequestOptions.QueryParameters.Add(Hathora.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "step", step));
            }

            localVarRequestOptions.Operation = "MetricsV1Api.GetMetrics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (auth0) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RecordPartialMetricNameMetricValueArray>("/metrics/v1/{appId}/process/{processId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetrics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
