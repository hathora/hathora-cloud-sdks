/*
 * Hathora Cloud API
 *
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Hathora.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace Hathora.Cloud.Sdk.Model
{
    /// <summary>
    /// Build is a versioned artifact for a game server&#39;s container image and its data.
    /// </summary>
    [DataContract(Name = "Build")]
    public partial class Build : IEquatable<Build>
    {
        /// <summary>
        /// Status of creating a build.  &#x60;created&#x60;: a new &#x60;buildId&#x60; was generated  &#x60;running&#x60;: the container image is being built  &#x60;succeeded&#x60;: the container image was successfully built and stored in our registry  &#x60;failed&#x60;: there was an issue creating and storing the container image in our container registry
        /// </summary>
        /// <value>Status of creating a build.  &#x60;created&#x60;: a new &#x60;buildId&#x60; was generated  &#x60;running&#x60;: the container image is being built  &#x60;succeeded&#x60;: the container image was successfully built and stored in our registry  &#x60;failed&#x60;: there was an issue creating and storing the container image in our container registry</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Created for value: created
            /// </summary>
            [EnumMember(Value = "created")]
            Created = 1,

            /// <summary>
            /// Enum Running for value: running
            /// </summary>
            [EnumMember(Value = "running")]
            Running = 2,

            /// <summary>
            /// Enum Succeeded for value: succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            Succeeded = 3,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 4

        }


        /// <summary>
        /// Status of creating a build.  &#x60;created&#x60;: a new &#x60;buildId&#x60; was generated  &#x60;running&#x60;: the container image is being built  &#x60;succeeded&#x60;: the container image was successfully built and stored in our registry  &#x60;failed&#x60;: there was an issue creating and storing the container image in our container registry
        /// </summary>
        /// <value>Status of creating a build.  &#x60;created&#x60;: a new &#x60;buildId&#x60; was generated  &#x60;running&#x60;: the container image is being built  &#x60;succeeded&#x60;: the container image was successfully built and stored in our registry  &#x60;failed&#x60;: there was an issue creating and storing the container image in our container registry</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Build" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Build()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Build" /> class.
        /// </summary>
        /// <param name="regionalContainerTags">An alias for the container image in our regional registries. (required).</param>
        /// <param name="imageSize">Image size in MB. (required).</param>
        /// <param name="status">Status of creating a build.  &#x60;created&#x60;: a new &#x60;buildId&#x60; was generated  &#x60;running&#x60;: the container image is being built  &#x60;succeeded&#x60;: the container image was successfully built and stored in our registry  &#x60;failed&#x60;: there was an issue creating and storing the container image in our container registry (required).</param>
        /// <param name="deletedAt">When the container image was deleted. (required).</param>
        /// <param name="finishedAt">When the container image finished being built. (required).</param>
        /// <param name="startedAt">When the container image starts getting built. (required).</param>
        /// <param name="createdAt">When a new &#x60;buildId&#x60; is generated. (required).</param>
        /// <param name="createdBy">Email address for the user that created the build. (required).</param>
        /// <param name="buildId">System generated id for a build. Increments by 1. (required).</param>
        /// <param name="appId">System generated unique identifier for an application. (required).</param>
        public Build(List<BuildRegionalContainerTagsInner> regionalContainerTags = default(List<BuildRegionalContainerTagsInner>), double imageSize = default(double), StatusEnum status = default(StatusEnum), DateTime? deletedAt = default(DateTime?), DateTime? finishedAt = default(DateTime?), DateTime? startedAt = default(DateTime?), DateTime createdAt = default(DateTime), string createdBy = default(string), int buildId = default(int), string appId = default(string))
        {
            // to ensure "regionalContainerTags" is required (not null)
            if (regionalContainerTags == null)
            {
                throw new ArgumentNullException("regionalContainerTags is a required property for Build and cannot be null");
            }
            this.RegionalContainerTags = regionalContainerTags;
            this.ImageSize = imageSize;
            this.Status = status;
            // to ensure "deletedAt" is required (not null)
            if (deletedAt == null)
            {
                throw new ArgumentNullException("deletedAt is a required property for Build and cannot be null");
            }
            this.DeletedAt = deletedAt;
            // to ensure "finishedAt" is required (not null)
            if (finishedAt == null)
            {
                throw new ArgumentNullException("finishedAt is a required property for Build and cannot be null");
            }
            this.FinishedAt = finishedAt;
            // to ensure "startedAt" is required (not null)
            if (startedAt == null)
            {
                throw new ArgumentNullException("startedAt is a required property for Build and cannot be null");
            }
            this.StartedAt = startedAt;
            this.CreatedAt = createdAt;
            // to ensure "createdBy" is required (not null)
            if (createdBy == null)
            {
                throw new ArgumentNullException("createdBy is a required property for Build and cannot be null");
            }
            this.CreatedBy = createdBy;
            this.BuildId = buildId;
            // to ensure "appId" is required (not null)
            if (appId == null)
            {
                throw new ArgumentNullException("appId is a required property for Build and cannot be null");
            }
            this.AppId = appId;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// An alias for the container image in our regional registries.
        /// </summary>
        /// <value>An alias for the container image in our regional registries.</value>
        [DataMember(Name = "regionalContainerTags", IsRequired = true, EmitDefaultValue = true)]
        public List<BuildRegionalContainerTagsInner> RegionalContainerTags { get; set; }

        /// <summary>
        /// Image size in MB.
        /// </summary>
        /// <value>Image size in MB.</value>
        [DataMember(Name = "imageSize", IsRequired = true, EmitDefaultValue = true)]
        public double ImageSize { get; set; }

        /// <summary>
        /// When the container image was deleted.
        /// </summary>
        /// <value>When the container image was deleted.</value>
        [DataMember(Name = "deletedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// When the container image finished being built.
        /// </summary>
        /// <value>When the container image finished being built.</value>
        [DataMember(Name = "finishedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? FinishedAt { get; set; }

        /// <summary>
        /// When the container image starts getting built.
        /// </summary>
        /// <value>When the container image starts getting built.</value>
        [DataMember(Name = "startedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? StartedAt { get; set; }

        /// <summary>
        /// When a new &#x60;buildId&#x60; is generated.
        /// </summary>
        /// <value>When a new &#x60;buildId&#x60; is generated.</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Email address for the user that created the build.
        /// </summary>
        /// <value>Email address for the user that created the build.</value>
        /// <example>&quot;dev@hathora.dev&quot;</example>
        [DataMember(Name = "createdBy", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// System generated id for a build. Increments by 1.
        /// </summary>
        /// <value>System generated id for a build. Increments by 1.</value>
        /// <example>1</example>
        [DataMember(Name = "buildId", IsRequired = true, EmitDefaultValue = true)]
        public int BuildId { get; set; }

        /// <summary>
        /// System generated unique identifier for an application.
        /// </summary>
        /// <value>System generated unique identifier for an application.</value>
        /// <example>&quot;app-af469a92-5b45-4565-b3c4-b79878de67d2&quot;</example>
        [DataMember(Name = "appId", IsRequired = true, EmitDefaultValue = true)]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Build {\n");
            sb.Append("  RegionalContainerTags: ").Append(RegionalContainerTags).Append("\n");
            sb.Append("  ImageSize: ").Append(ImageSize).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  BuildId: ").Append(BuildId).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Build);
        }

        /// <summary>
        /// Returns true if Build instances are equal
        /// </summary>
        /// <param name="input">Instance of Build to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Build input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RegionalContainerTags == input.RegionalContainerTags ||
                    this.RegionalContainerTags != null &&
                    input.RegionalContainerTags != null &&
                    this.RegionalContainerTags.SequenceEqual(input.RegionalContainerTags)
                ) && 
                (
                    this.ImageSize == input.ImageSize ||
                    this.ImageSize.Equals(input.ImageSize)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.FinishedAt == input.FinishedAt ||
                    (this.FinishedAt != null &&
                    this.FinishedAt.Equals(input.FinishedAt))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.BuildId == input.BuildId ||
                    this.BuildId.Equals(input.BuildId)
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RegionalContainerTags != null)
                {
                    hashCode = (hashCode * 59) + this.RegionalContainerTags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ImageSize.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.DeletedAt != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedAt.GetHashCode();
                }
                if (this.FinishedAt != null)
                {
                    hashCode = (hashCode * 59) + this.FinishedAt.GetHashCode();
                }
                if (this.StartedAt != null)
                {
                    hashCode = (hashCode * 59) + this.StartedAt.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BuildId.GetHashCode();
                if (this.AppId != null)
                {
                    hashCode = (hashCode * 59) + this.AppId.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
