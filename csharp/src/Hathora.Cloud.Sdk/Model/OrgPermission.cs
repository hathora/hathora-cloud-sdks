/*
 * Hathora Cloud API
 *
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Hathora.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace Hathora.Cloud.Sdk.Model
{
    /// <summary>
    /// OrgPermission
    /// </summary>
    [DataContract(Name = "OrgPermission")]
    public partial class OrgPermission : IEquatable<OrgPermission>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgPermission" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrgPermission()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgPermission" /> class.
        /// </summary>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="userEmail">userEmail (required).</param>
        /// <param name="invitedBy">System generated unique identifier for a user. Not guaranteed to have a specific format. (required).</param>
        /// <param name="orgId">System generated unique identifier for an organization. Not guaranteed to have a specific format. (required).</param>
        public OrgPermission(DateTime updatedAt = default(DateTime), DateTime createdAt = default(DateTime), OrganizationInviteStatus status = default(OrganizationInviteStatus), string userEmail = default(string), string invitedBy = default(string), string orgId = default(string))
        {
            this.UpdatedAt = updatedAt;
            this.CreatedAt = createdAt;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for OrgPermission and cannot be null");
            }
            this.Status = status;
            // to ensure "userEmail" is required (not null)
            if (userEmail == null)
            {
                throw new ArgumentNullException("userEmail is a required property for OrgPermission and cannot be null");
            }
            this.UserEmail = userEmail;
            // to ensure "invitedBy" is required (not null)
            if (invitedBy == null)
            {
                throw new ArgumentNullException("invitedBy is a required property for OrgPermission and cannot be null");
            }
            this.InvitedBy = invitedBy;
            // to ensure "orgId" is required (not null)
            if (orgId == null)
            {
                throw new ArgumentNullException("orgId is a required property for OrgPermission and cannot be null");
            }
            this.OrgId = orgId;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public OrganizationInviteStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets UserEmail
        /// </summary>
        [DataMember(Name = "userEmail", IsRequired = true, EmitDefaultValue = true)]
        public string UserEmail { get; set; }

        /// <summary>
        /// System generated unique identifier for a user. Not guaranteed to have a specific format.
        /// </summary>
        /// <value>System generated unique identifier for a user. Not guaranteed to have a specific format.</value>
        /// <example>&quot;auth0|646bdf96f7fb73d04c8c84db&quot;</example>
        [DataMember(Name = "invitedBy", IsRequired = true, EmitDefaultValue = true)]
        public string InvitedBy { get; set; }

        /// <summary>
        /// System generated unique identifier for an organization. Not guaranteed to have a specific format.
        /// </summary>
        /// <value>System generated unique identifier for an organization. Not guaranteed to have a specific format.</value>
        /// <example>&quot;org-6f706e83-0ec1-437a-9a46-7d4281eb2f39&quot;</example>
        [DataMember(Name = "orgId", IsRequired = true, EmitDefaultValue = true)]
        public string OrgId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrgPermission {\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  InvitedBy: ").Append(InvitedBy).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgPermission);
        }

        /// <summary>
        /// Returns true if OrgPermission instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgPermission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgPermission input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.UserEmail == input.UserEmail ||
                    (this.UserEmail != null &&
                    this.UserEmail.Equals(input.UserEmail))
                ) && 
                (
                    this.InvitedBy == input.InvitedBy ||
                    (this.InvitedBy != null &&
                    this.InvitedBy.Equals(input.InvitedBy))
                ) && 
                (
                    this.OrgId == input.OrgId ||
                    (this.OrgId != null &&
                    this.OrgId.Equals(input.OrgId))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.UserEmail != null)
                {
                    hashCode = (hashCode * 59) + this.UserEmail.GetHashCode();
                }
                if (this.InvitedBy != null)
                {
                    hashCode = (hashCode * 59) + this.InvitedBy.GetHashCode();
                }
                if (this.OrgId != null)
                {
                    hashCode = (hashCode * 59) + this.OrgId.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
