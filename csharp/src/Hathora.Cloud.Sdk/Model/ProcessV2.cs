/*
 * Hathora Cloud API
 *
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Hathora.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace Hathora.Cloud.Sdk.Model
{
    /// <summary>
    /// ProcessV2
    /// </summary>
    [DataContract(Name = "ProcessV2")]
    public partial class ProcessV2 : IEquatable<ProcessV2>
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public ProcessStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", IsRequired = true, EmitDefaultValue = true)]
        public Region Region { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessV2()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessV2" /> class.
        /// </summary>
        /// <param name="status">status (required).</param>
        /// <param name="roomsAllocated">Tracks the number of rooms that have been allocated to the process. (required).</param>
        /// <param name="terminatedAt">When the process has been terminated. (required).</param>
        /// <param name="stoppingAt">When the process is issued to stop. We use this to determine when we should stop billing. (required).</param>
        /// <param name="startedAt">When the process bound to the specified port. We use this to determine when we should start billing. (required).</param>
        /// <param name="createdAt">When the process started being provisioned. (required).</param>
        /// <param name="roomsPerProcess">Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process. (required).</param>
        /// <param name="additionalExposedPorts">additionalExposedPorts (required).</param>
        /// <param name="exposedPort">exposedPort.</param>
        /// <param name="region">region (required).</param>
        /// <param name="processId">System generated unique identifier to a runtime instance of your game server. (required).</param>
        /// <param name="deploymentId">System generated id for a deployment. Increments by 1. (required).</param>
        /// <param name="appId">System generated unique identifier for an application. (required).</param>
        public ProcessV2(ProcessStatus status = default(ProcessStatus), int roomsAllocated = default(int), DateTime? terminatedAt = default(DateTime?), DateTime? stoppingAt = default(DateTime?), DateTime? startedAt = default(DateTime?), DateTime createdAt = default(DateTime), int roomsPerProcess = default(int), List<ExposedPort> additionalExposedPorts = default(List<ExposedPort>), ExposedPort exposedPort = default(ExposedPort), Region region = default(Region), string processId = default(string), int deploymentId = default(int), string appId = default(string))
        {
            this.Status = status;
            this.RoomsAllocated = roomsAllocated;
            // to ensure "terminatedAt" is required (not null)
            if (terminatedAt == null)
            {
                throw new ArgumentNullException("terminatedAt is a required property for ProcessV2 and cannot be null");
            }
            this.TerminatedAt = terminatedAt;
            // to ensure "stoppingAt" is required (not null)
            if (stoppingAt == null)
            {
                throw new ArgumentNullException("stoppingAt is a required property for ProcessV2 and cannot be null");
            }
            this.StoppingAt = stoppingAt;
            // to ensure "startedAt" is required (not null)
            if (startedAt == null)
            {
                throw new ArgumentNullException("startedAt is a required property for ProcessV2 and cannot be null");
            }
            this.StartedAt = startedAt;
            this.CreatedAt = createdAt;
            this.RoomsPerProcess = roomsPerProcess;
            // to ensure "additionalExposedPorts" is required (not null)
            if (additionalExposedPorts == null)
            {
                throw new ArgumentNullException("additionalExposedPorts is a required property for ProcessV2 and cannot be null");
            }
            this.AdditionalExposedPorts = additionalExposedPorts;
            this.Region = region;
            // to ensure "processId" is required (not null)
            if (processId == null)
            {
                throw new ArgumentNullException("processId is a required property for ProcessV2 and cannot be null");
            }
            this.ProcessId = processId;
            this.DeploymentId = deploymentId;
            // to ensure "appId" is required (not null)
            if (appId == null)
            {
                throw new ArgumentNullException("appId is a required property for ProcessV2 and cannot be null");
            }
            this.AppId = appId;
            this.ExposedPort = exposedPort;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Tracks the number of rooms that have been allocated to the process.
        /// </summary>
        /// <value>Tracks the number of rooms that have been allocated to the process.</value>
        /// <example>1</example>
        [DataMember(Name = "roomsAllocated", IsRequired = true, EmitDefaultValue = true)]
        public int RoomsAllocated { get; set; }

        /// <summary>
        /// When the process has been terminated.
        /// </summary>
        /// <value>When the process has been terminated.</value>
        [DataMember(Name = "terminatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? TerminatedAt { get; set; }

        /// <summary>
        /// When the process is issued to stop. We use this to determine when we should stop billing.
        /// </summary>
        /// <value>When the process is issued to stop. We use this to determine when we should stop billing.</value>
        [DataMember(Name = "stoppingAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? StoppingAt { get; set; }

        /// <summary>
        /// When the process bound to the specified port. We use this to determine when we should start billing.
        /// </summary>
        /// <value>When the process bound to the specified port. We use this to determine when we should start billing.</value>
        [DataMember(Name = "startedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? StartedAt { get; set; }

        /// <summary>
        /// When the process started being provisioned.
        /// </summary>
        /// <value>When the process started being provisioned.</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
        /// </summary>
        /// <value>Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.</value>
        /// <example>3</example>
        [DataMember(Name = "roomsPerProcess", IsRequired = true, EmitDefaultValue = true)]
        public int RoomsPerProcess { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalExposedPorts
        /// </summary>
        [DataMember(Name = "additionalExposedPorts", IsRequired = true, EmitDefaultValue = true)]
        public List<ExposedPort> AdditionalExposedPorts { get; set; }

        /// <summary>
        /// Gets or Sets ExposedPort
        /// </summary>
        [DataMember(Name = "exposedPort", EmitDefaultValue = false)]
        public ExposedPort ExposedPort { get; set; }

        /// <summary>
        /// System generated unique identifier to a runtime instance of your game server.
        /// </summary>
        /// <value>System generated unique identifier to a runtime instance of your game server.</value>
        /// <example>&quot;cbfcddd2-0006-43ae-996c-995fff7bed2e&quot;</example>
        [DataMember(Name = "processId", IsRequired = true, EmitDefaultValue = true)]
        public string ProcessId { get; set; }

        /// <summary>
        /// System generated id for a deployment. Increments by 1.
        /// </summary>
        /// <value>System generated id for a deployment. Increments by 1.</value>
        /// <example>1</example>
        [DataMember(Name = "deploymentId", IsRequired = true, EmitDefaultValue = true)]
        public int DeploymentId { get; set; }

        /// <summary>
        /// System generated unique identifier for an application.
        /// </summary>
        /// <value>System generated unique identifier for an application.</value>
        /// <example>&quot;app-af469a92-5b45-4565-b3c4-b79878de67d2&quot;</example>
        [DataMember(Name = "appId", IsRequired = true, EmitDefaultValue = true)]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessV2 {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RoomsAllocated: ").Append(RoomsAllocated).Append("\n");
            sb.Append("  TerminatedAt: ").Append(TerminatedAt).Append("\n");
            sb.Append("  StoppingAt: ").Append(StoppingAt).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  RoomsPerProcess: ").Append(RoomsPerProcess).Append("\n");
            sb.Append("  AdditionalExposedPorts: ").Append(AdditionalExposedPorts).Append("\n");
            sb.Append("  ExposedPort: ").Append(ExposedPort).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  DeploymentId: ").Append(DeploymentId).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessV2);
        }

        /// <summary>
        /// Returns true if ProcessV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessV2 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.RoomsAllocated == input.RoomsAllocated ||
                    this.RoomsAllocated.Equals(input.RoomsAllocated)
                ) && 
                (
                    this.TerminatedAt == input.TerminatedAt ||
                    (this.TerminatedAt != null &&
                    this.TerminatedAt.Equals(input.TerminatedAt))
                ) && 
                (
                    this.StoppingAt == input.StoppingAt ||
                    (this.StoppingAt != null &&
                    this.StoppingAt.Equals(input.StoppingAt))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.RoomsPerProcess == input.RoomsPerProcess ||
                    this.RoomsPerProcess.Equals(input.RoomsPerProcess)
                ) && 
                (
                    this.AdditionalExposedPorts == input.AdditionalExposedPorts ||
                    this.AdditionalExposedPorts != null &&
                    input.AdditionalExposedPorts != null &&
                    this.AdditionalExposedPorts.SequenceEqual(input.AdditionalExposedPorts)
                ) && 
                (
                    this.ExposedPort == input.ExposedPort ||
                    (this.ExposedPort != null &&
                    this.ExposedPort.Equals(input.ExposedPort))
                ) && 
                (
                    this.Region == input.Region ||
                    this.Region.Equals(input.Region)
                ) && 
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                ) && 
                (
                    this.DeploymentId == input.DeploymentId ||
                    this.DeploymentId.Equals(input.DeploymentId)
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.RoomsAllocated.GetHashCode();
                if (this.TerminatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.TerminatedAt.GetHashCode();
                }
                if (this.StoppingAt != null)
                {
                    hashCode = (hashCode * 59) + this.StoppingAt.GetHashCode();
                }
                if (this.StartedAt != null)
                {
                    hashCode = (hashCode * 59) + this.StartedAt.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RoomsPerProcess.GetHashCode();
                if (this.AdditionalExposedPorts != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalExposedPorts.GetHashCode();
                }
                if (this.ExposedPort != null)
                {
                    hashCode = (hashCode * 59) + this.ExposedPort.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Region.GetHashCode();
                if (this.ProcessId != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeploymentId.GetHashCode();
                if (this.AppId != null)
                {
                    hashCode = (hashCode * 59) + this.AppId.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
