/*
 * Hathora Cloud API
 *
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Hathora.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace Hathora.Cloud.Sdk.Model
{
    /// <summary>
    /// OrgToken
    /// </summary>
    [DataContract(Name = "OrgToken")]
    public partial class OrgToken : IEquatable<OrgToken>
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public OrgTokenStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrgToken()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgToken" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="createdBy">createdBy (required).</param>
        /// <param name="lastFourCharsOfKey">lastFourCharsOfKey (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="name">Readable name for a token. Must be unique within an organization. (required).</param>
        /// <param name="orgId">orgId (required).</param>
        /// <param name="orgTokenId">System generated unique identifier for an organization token. (required).</param>
        public OrgToken(DateTime createdAt = default(DateTime), string createdBy = default(string), string lastFourCharsOfKey = default(string), OrgTokenStatus status = default(OrgTokenStatus), string name = default(string), string orgId = default(string), string orgTokenId = default(string))
        {
            this.CreatedAt = createdAt;
            // to ensure "createdBy" is required (not null)
            if (createdBy == null)
            {
                throw new ArgumentNullException("createdBy is a required property for OrgToken and cannot be null");
            }
            this.CreatedBy = createdBy;
            // to ensure "lastFourCharsOfKey" is required (not null)
            if (lastFourCharsOfKey == null)
            {
                throw new ArgumentNullException("lastFourCharsOfKey is a required property for OrgToken and cannot be null");
            }
            this.LastFourCharsOfKey = lastFourCharsOfKey;
            this.Status = status;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for OrgToken and cannot be null");
            }
            this.Name = name;
            // to ensure "orgId" is required (not null)
            if (orgId == null)
            {
                throw new ArgumentNullException("orgId is a required property for OrgToken and cannot be null");
            }
            this.OrgId = orgId;
            // to ensure "orgTokenId" is required (not null)
            if (orgTokenId == null)
            {
                throw new ArgumentNullException("orgTokenId is a required property for OrgToken and cannot be null");
            }
            this.OrgTokenId = orgTokenId;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets LastFourCharsOfKey
        /// </summary>
        [DataMember(Name = "lastFourCharsOfKey", IsRequired = true, EmitDefaultValue = true)]
        public string LastFourCharsOfKey { get; set; }

        /// <summary>
        /// Readable name for a token. Must be unique within an organization.
        /// </summary>
        /// <value>Readable name for a token. Must be unique within an organization.</value>
        /// <example>&quot;ci-token&quot;</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OrgId
        /// </summary>
        [DataMember(Name = "orgId", IsRequired = true, EmitDefaultValue = true)]
        public string OrgId { get; set; }

        /// <summary>
        /// System generated unique identifier for an organization token.
        /// </summary>
        /// <value>System generated unique identifier for an organization token.</value>
        /// <example>&quot;org-token-af469a92-5b45-4565-b3c4-b79878de67d2&quot;</example>
        [DataMember(Name = "orgTokenId", IsRequired = true, EmitDefaultValue = true)]
        public string OrgTokenId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrgToken {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  LastFourCharsOfKey: ").Append(LastFourCharsOfKey).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  OrgTokenId: ").Append(OrgTokenId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgToken);
        }

        /// <summary>
        /// Returns true if OrgToken instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgToken input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.LastFourCharsOfKey == input.LastFourCharsOfKey ||
                    (this.LastFourCharsOfKey != null &&
                    this.LastFourCharsOfKey.Equals(input.LastFourCharsOfKey))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OrgId == input.OrgId ||
                    (this.OrgId != null &&
                    this.OrgId.Equals(input.OrgId))
                ) && 
                (
                    this.OrgTokenId == input.OrgTokenId ||
                    (this.OrgTokenId != null &&
                    this.OrgTokenId.Equals(input.OrgTokenId))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.LastFourCharsOfKey != null)
                {
                    hashCode = (hashCode * 59) + this.LastFourCharsOfKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.OrgId != null)
                {
                    hashCode = (hashCode * 59) + this.OrgId.GetHashCode();
                }
                if (this.OrgTokenId != null)
                {
                    hashCode = (hashCode * 59) + this.OrgTokenId.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
