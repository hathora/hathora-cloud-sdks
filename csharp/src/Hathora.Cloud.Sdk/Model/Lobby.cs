/*
 * Hathora Cloud API
 *
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Hathora.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace Hathora.Cloud.Sdk.Model
{
    /// <summary>
    /// A lobby object allows you to store and manage metadata for your rooms.
    /// </summary>
    [DataContract(Name = "Lobby")]
    public partial class Lobby : IEquatable<Lobby>
    {

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [DataMember(Name = "visibility", IsRequired = true, EmitDefaultValue = true)]
        public LobbyVisibility Visibility { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", IsRequired = true, EmitDefaultValue = true)]
        public Region Region { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Lobby" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Lobby()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Lobby" /> class.
        /// </summary>
        /// <param name="shortCode">User-defined identifier for a lobby. (required).</param>
        /// <param name="state">JSON blob to store metadata for a room. Must be smaller than 1MB..</param>
        /// <param name="initialConfig">User input to initialize the game state. Object must be smaller than 64KB. (required).</param>
        /// <param name="createdAt">When the lobby was created. (required).</param>
        /// <param name="createdBy">UserId or email address for the user that created the lobby. (required).</param>
        /// <param name="local">local (required).</param>
        /// <param name="visibility">visibility (required).</param>
        /// <param name="region">region (required).</param>
        /// <param name="roomId">Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own. Note: error will be returned if &#x60;roomId&#x60; is not globally unique. (required).</param>
        /// <param name="appId">System generated unique identifier for an application. (required).</param>
        public Lobby(string shortCode = default(string), Object state = default(Object), Object initialConfig = default(Object), DateTime createdAt = default(DateTime), string createdBy = default(string), bool local = default(bool), LobbyVisibility visibility = default(LobbyVisibility), Region region = default(Region), string roomId = default(string), string appId = default(string))
        {
            // to ensure "shortCode" is required (not null)
            if (shortCode == null)
            {
                throw new ArgumentNullException("shortCode is a required property for Lobby and cannot be null");
            }
            this.ShortCode = shortCode;
            // to ensure "initialConfig" is required (not null)
            if (initialConfig == null)
            {
                throw new ArgumentNullException("initialConfig is a required property for Lobby and cannot be null");
            }
            this.InitialConfig = initialConfig;
            this.CreatedAt = createdAt;
            // to ensure "createdBy" is required (not null)
            if (createdBy == null)
            {
                throw new ArgumentNullException("createdBy is a required property for Lobby and cannot be null");
            }
            this.CreatedBy = createdBy;
            this.Local = local;
            this.Visibility = visibility;
            this.Region = region;
            // to ensure "roomId" is required (not null)
            if (roomId == null)
            {
                throw new ArgumentNullException("roomId is a required property for Lobby and cannot be null");
            }
            this.RoomId = roomId;
            // to ensure "appId" is required (not null)
            if (appId == null)
            {
                throw new ArgumentNullException("appId is a required property for Lobby and cannot be null");
            }
            this.AppId = appId;
            this.State = state;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// User-defined identifier for a lobby.
        /// </summary>
        /// <value>User-defined identifier for a lobby.</value>
        /// <example>&quot;LFG4&quot;</example>
        [DataMember(Name = "shortCode", IsRequired = true, EmitDefaultValue = true)]
        public string ShortCode { get; set; }

        /// <summary>
        /// JSON blob to store metadata for a room. Must be smaller than 1MB.
        /// </summary>
        /// <value>JSON blob to store metadata for a room. Must be smaller than 1MB.</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public Object State { get; set; }

        /// <summary>
        /// User input to initialize the game state. Object must be smaller than 64KB.
        /// </summary>
        /// <value>User input to initialize the game state. Object must be smaller than 64KB.</value>
        [DataMember(Name = "initialConfig", IsRequired = true, EmitDefaultValue = true)]
        public Object InitialConfig { get; set; }

        /// <summary>
        /// When the lobby was created.
        /// </summary>
        /// <value>When the lobby was created.</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// UserId or email address for the user that created the lobby.
        /// </summary>
        /// <value>UserId or email address for the user that created the lobby.</value>
        /// <example>&quot;google-oauth2|107030234048588177467&quot;</example>
        [DataMember(Name = "createdBy", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Local
        /// </summary>
        [DataMember(Name = "local", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public bool Local { get; set; }

        /// <summary>
        /// Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own. Note: error will be returned if &#x60;roomId&#x60; is not globally unique.
        /// </summary>
        /// <value>Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own. Note: error will be returned if &#x60;roomId&#x60; is not globally unique.</value>
        /// <example>&quot;2swovpy1fnunu&quot;</example>
        [DataMember(Name = "roomId", IsRequired = true, EmitDefaultValue = true)]
        public string RoomId { get; set; }

        /// <summary>
        /// System generated unique identifier for an application.
        /// </summary>
        /// <value>System generated unique identifier for an application.</value>
        /// <example>&quot;app-af469a92-5b45-4565-b3c4-b79878de67d2&quot;</example>
        [DataMember(Name = "appId", IsRequired = true, EmitDefaultValue = true)]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Lobby {\n");
            sb.Append("  ShortCode: ").Append(ShortCode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  InitialConfig: ").Append(InitialConfig).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Local: ").Append(Local).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Lobby);
        }

        /// <summary>
        /// Returns true if Lobby instances are equal
        /// </summary>
        /// <param name="input">Instance of Lobby to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Lobby input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ShortCode == input.ShortCode ||
                    (this.ShortCode != null &&
                    this.ShortCode.Equals(input.ShortCode))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.InitialConfig == input.InitialConfig ||
                    (this.InitialConfig != null &&
                    this.InitialConfig.Equals(input.InitialConfig))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Local == input.Local ||
                    this.Local.Equals(input.Local)
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    this.Visibility.Equals(input.Visibility)
                ) && 
                (
                    this.Region == input.Region ||
                    this.Region.Equals(input.Region)
                ) && 
                (
                    this.RoomId == input.RoomId ||
                    (this.RoomId != null &&
                    this.RoomId.Equals(input.RoomId))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShortCode != null)
                {
                    hashCode = (hashCode * 59) + this.ShortCode.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.InitialConfig != null)
                {
                    hashCode = (hashCode * 59) + this.InitialConfig.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Local.GetHashCode();
                hashCode = (hashCode * 59) + this.Visibility.GetHashCode();
                hashCode = (hashCode * 59) + this.Region.GetHashCode();
                if (this.RoomId != null)
                {
                    hashCode = (hashCode * 59) + this.RoomId.GetHashCode();
                }
                if (this.AppId != null)
                {
                    hashCode = (hashCode * 59) + this.AppId.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
