openapi: 3.0.0
info:
  contact: {}
  title: Hathora Cloud API
  version: 0.0.1
servers:
- url: https://api.hathora.dev
- url: /
paths:
  /apps/v1/list:
    get:
      operationId: GetApps
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationWithDeployment'
                type: array
          description: Ok
      security:
      - auth0: []
      tags:
      - AppV1
  /apps/v1/create:
    post:
      operationId: CreateApp
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppConfig'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: ""
        "422":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - AppV1
  /apps/v1/update/{appId}:
    post:
      operationId: UpdateApp
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppConfig'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - AppV1
  /apps/v1/info/{appId}:
    get:
      operationId: GetAppInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - AppV1
  /apps/v1/delete/{appId}:
    delete:
      operationId: DeleteApp
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "204":
          description: No content
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - AppV1
  /auth/v1/{appId}/login/anonymous:
    post:
      operationId: LoginAnonymous
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginAnonymous_200_response'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security: []
      tags:
      - AuthV1
  /auth/v1/{appId}/login/nickname:
    post:
      operationId: LoginNickname
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginNickname_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginAnonymous_200_response'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security: []
      tags:
      - AuthV1
  /auth/v1/{appId}/login/google:
    post:
      operationId: LoginGoogle
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginGoogle_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginAnonymous_200_response'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security: []
      tags:
      - AuthV1
  /builds/v1/{appId}/list:
    get:
      operationId: GetBuilds
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Build'
                type: array
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - BuildV1
  /builds/v1/{appId}/info/{buildId}:
    get:
      operationId: GetBuildInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: buildId
        required: true
        schema:
          $ref: '#/components/schemas/BuildId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - BuildV1
  /builds/v1/{appId}/create:
    post:
      operationId: CreateBuild
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "422":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - BuildV1
  /builds/v1/{appId}/run/{buildId}:
    post:
      operationId: RunBuild
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: buildId
        required: true
        schema:
          $ref: '#/components/schemas/BuildId'
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RunBuild_request'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: byte
                type: string
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - BuildV1
  /builds/v1/{appId}/delete/{buildId}:
    delete:
      operationId: DeleteBuild
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: buildId
        required: true
        schema:
          $ref: '#/components/schemas/BuildId'
        style: simple
      responses:
        "204":
          description: No content
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "422":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - BuildV1
  /deployments/v1/{appId}/list:
    get:
      operationId: GetDeployments
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Deployment'
                type: array
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - DeploymentV1
  /deployments/v1/{appId}/info/{deploymentId}:
    get:
      operationId: GetDeploymentInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: deploymentId
        required: true
        schema:
          $ref: '#/components/schemas/DeploymentId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - DeploymentV1
  /deployments/v1/{appId}/create/{buildId}:
    post:
      operationId: CreateDeployment
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: buildId
        required: true
        schema:
          $ref: '#/components/schemas/BuildId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentConfig'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - DeploymentV1
  /discovery/v1/ping:
    get:
      operationId: GetPingServiceEndpoints
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryResponse'
          description: Ok
      security: []
      tags:
      - DiscoveryV1
  /lobby/v1/{appId}/create/private:
    post:
      deprecated: true
      operationId: CreatePrivateLobbyDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      - explode: true
        in: query
        name: local
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomId'
          description: Ok
        "400":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "401":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "422":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "429":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security: []
      tags:
      - LobbyV1
  /lobby/v1/{appId}/create/public:
    post:
      deprecated: true
      operationId: CreatePublicLobbyDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      - explode: true
        in: query
        name: local
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomId'
          description: Ok
        "400":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "401":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "422":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "429":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security: []
      tags:
      - LobbyV1
  /lobby/v1/{appId}/list:
    get:
      deprecated: true
      operationId: ListActivePublicLobbiesDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: local
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Lobby'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security: []
      tags:
      - LobbyV1
  /lobby/v2/{appId}/create/private:
    post:
      deprecated: true
      operationId: CreatePrivateLobby
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: roomId
        required: false
        schema:
          $ref: '#/components/schemas/RoomId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrivateLobby_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "401":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "422":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "429":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security: []
      tags:
      - LobbyV2
  /lobby/v2/{appId}/create/public:
    post:
      deprecated: true
      operationId: CreatePublicLobby
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: roomId
        required: false
        schema:
          $ref: '#/components/schemas/RoomId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrivateLobby_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "401":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "422":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "429":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security: []
      tags:
      - LobbyV2
  /lobby/v2/{appId}/create/local:
    post:
      deprecated: true
      operationId: CreateLocalLobby
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: roomId
        required: false
        schema:
          $ref: '#/components/schemas/RoomId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrivateLobby_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "401":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "422":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "429":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security: []
      tags:
      - LobbyV2
  /lobby/v2/{appId}/create:
    post:
      operationId: CreateLobby
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: roomId
        required: false
        schema:
          $ref: '#/components/schemas/RoomId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLobby_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "401":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "422":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "429":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security: []
      tags:
      - LobbyV2
  /lobby/v2/{appId}/list/public:
    get:
      operationId: ListActivePublicLobbies
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Lobby'
                type: array
          description: Ok
      security: []
      tags:
      - LobbyV2
  /lobby/v2/{appId}/info/{roomId}:
    get:
      operationId: GetLobbyInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security: []
      tags:
      - LobbyV2
  /lobby/v2/{appId}/setState/{roomId}:
    post:
      operationId: SetLobbyState
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetLobbyState_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "422":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - LobbyV2
  /logs/v1/{appId}/all:
    get:
      operationId: GetLogsForApp
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: follow
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - explode: true
        in: query
        name: tailLines
        required: false
        schema:
          $ref: '#/components/schemas/TailLines'
        style: form
      - explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: byte
                type: string
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - LogV1
  /logs/v1/{appId}/process/{processId}:
    get:
      operationId: GetLogsForProcess
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      - explode: true
        in: query
        name: follow
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - explode: true
        in: query
        name: tailLines
        required: false
        schema:
          $ref: '#/components/schemas/TailLines'
        style: form
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: byte
                type: string
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - LogV1
  /logs/v1/{appId}/deployment/{deploymentId}:
    get:
      operationId: GetLogsForDeployment
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: deploymentId
        required: true
        schema:
          $ref: '#/components/schemas/DeploymentId'
        style: simple
      - explode: true
        in: query
        name: follow
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - explode: true
        in: query
        name: tailLines
        required: false
        schema:
          $ref: '#/components/schemas/TailLines'
        style: form
      responses:
        "200":
          content:
            text/plain:
              schema: {}
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - LogV1
  /metrics/v1/{appId}/process/{processId}:
    get:
      operationId: GetMetrics
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      - explode: true
        in: query
        name: metrics
        required: false
        schema:
          default:
          - cpu
          - memory
          - rate_egress
          items:
            $ref: '#/components/schemas/MetricName'
          type: array
        style: form
      - explode: true
        in: query
        name: end
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: start
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: step
        required: false
        schema:
          default: 60
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "422":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - MetricsV1
  /processes/v1/{appId}/list/running:
    get:
      operationId: GetRunningProcesses
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProcessWithRooms'
                type: array
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - ProcessesV1
  /processes/v1/{appId}/list/stopped:
    get:
      operationId: GetStoppedProcesses
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Process'
                type: array
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - ProcessesV1
  /processes/v1/{appId}/info/{processId}:
    get:
      operationId: GetProcessInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Process'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - ProcessesV1
  /rooms/v1/{appId}/create:
    post:
      operationId: CreateRoom
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: roomId
        required: false
        schema:
          $ref: '#/components/schemas/RoomId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoom_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomId'
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - RoomV1
  /rooms/v1/{appId}/info/{roomId}:
    get:
      operationId: GetRoomInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - RoomV1
  /rooms/v1/{appId}/list/{processId}/active:
    get:
      operationId: GetActiveRoomsForProcess
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoomWithoutAllocations'
                type: array
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - RoomV1
  /rooms/v1/{appId}/list/{processId}/inactive:
    get:
      operationId: GetInactiveRoomsForProcess
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoomWithoutAllocations'
                type: array
          description: Ok
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - RoomV1
  /rooms/v1/{appId}/destroy/{roomId}:
    post:
      operationId: DestroyRoom
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "204":
          description: No content
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - RoomV1
  /rooms/v1/{appId}/suspend/{roomId}:
    post:
      operationId: SuspendRoom
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "204":
          description: No content
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security:
      - auth0: []
      tags:
      - RoomV1
  /rooms/v1/{appId}/connectioninfo/{roomId}:
    get:
      operationId: GetConnectionInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionInfo'
          description: Ok
        "400":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: string
          description: ""
        "500":
          content:
            application/json:
              schema:
                type: string
          description: ""
      security: []
      tags:
      - RoomV1
components:
  examples: {}
  headers: {}
  parameters: {}
  requestBodies: {}
  responses: {}
  schemas:
    Record_string.never_:
      description: Construct a type with a set of properties K of type T
      properties: {}
      type: object
    OrgId:
      type: string
    Application:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        deletedAt: 2000-01-23T04:56:07.000+00:00
        createdBy: createdBy
        appName: appName
        appId: appId
        appSecret: appSecret
        deletedBy: deletedBy
        orgId: orgId
        authConfiguration:
          nickname: "{}"
          anonymous: "{}"
          google:
            clientId: clientId
      properties:
        deletedBy:
          nullable: true
          type: string
        deletedAt:
          format: date-time
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          type: string
        orgId:
          type: string
        authConfiguration:
          $ref: '#/components/schemas/Application_authConfiguration'
        appSecret:
          type: string
        appId:
          type: string
        appName:
          type: string
      required:
      - appId
      - appName
      - appSecret
      - authConfiguration
      - createdAt
      - createdBy
      - deletedAt
      - deletedBy
      - orgId
      type: object
    TransportType:
      enum:
      - tcp
      - udp
      - tls
      type: string
    PlanName:
      enum:
      - tiny
      - small
      - medium
      - large
      type: string
    DeploymentConfig:
      example:
        roomsPerProcess: 801
        planName: null
        containerPort: 39501
        transportType: null
        env:
        - name: name
          value: value
        - name: name
          value: value
        - name: name
          value: value
        - name: name
          value: value
        - name: name
          value: value
      properties:
        env:
          items:
            $ref: '#/components/schemas/DeploymentConfig_env_inner'
          maxItems: 100
          type: array
        roomsPerProcess:
          format: int32
          maximum: 10000
          minimum: 1
          type: integer
        planName:
          $ref: '#/components/schemas/PlanName'
        transportType:
          $ref: '#/components/schemas/TransportType'
        containerPort:
          format: int32
          maximum: 65535
          minimum: 1
          type: integer
      required:
      - containerPort
      - env
      - planName
      - roomsPerProcess
      - transportType
      type: object
    AppId:
      type: string
    BuildId:
      format: double
      type: number
    DeploymentId:
      format: double
      type: number
    Deployment:
      allOf:
      - $ref: '#/components/schemas/DeploymentConfig'
      - $ref: '#/components/schemas/Deployment_allOf'
    ApplicationWithDeployment:
      allOf:
      - $ref: '#/components/schemas/Application'
      - $ref: '#/components/schemas/ApplicationWithDeployment_allOf'
    AppConfig:
      example:
        appName: appName
        authConfiguration:
          nickname: "{}"
          anonymous: "{}"
          google:
            clientId: clientId
      properties:
        authConfiguration:
          $ref: '#/components/schemas/Application_authConfiguration'
        appName:
          maxLength: 32
          pattern: "^[a-z0-9-]+$"
          type: string
      required:
      - appName
      - authConfiguration
      type: object
    Region:
      enum:
      - Seattle
      - Washington_DC
      - Chicago
      - London
      - Frankfurt
      - Mumbai
      - Singapore
      - Tokyo
      - Sydney
      - Sao_Paulo
      type: string
    Build:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        deletedAt: 2000-01-23T04:56:07.000+00:00
        regionalContainerTags:
        - region: null
          containerTag: containerTag
        - region: null
          containerTag: containerTag
        createdBy: createdBy
        appId: appId
        startedAt: 2000-01-23T04:56:07.000+00:00
        buildId: 6.027456183070403
        imageSize: 0.8008281904610115
        status: created
        finishedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        regionalContainerTags:
          items:
            $ref: '#/components/schemas/Build_regionalContainerTags_inner'
          type: array
        imageSize:
          format: double
          type: number
        status:
          enum:
          - created
          - running
          - succeeded
          - failed
          type: string
        deletedAt:
          format: date-time
          nullable: true
          type: string
        finishedAt:
          format: date-time
          nullable: true
          type: string
        startedAt:
          format: date-time
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          type: string
        buildId:
          format: double
          type: number
        appId:
          type: string
      required:
      - appId
      - buildId
      - createdAt
      - createdBy
      - deletedAt
      - finishedAt
      - imageSize
      - regionalContainerTags
      - startedAt
      - status
      type: object
    DiscoveryResponse:
      items:
        $ref: '#/components/schemas/DiscoveryResponse_inner'
      type: array
    RoomId:
      maxLength: 100
      minLength: 1
      pattern: "^[a-zA-Z0-9_-]*$"
      type: string
    Lobby:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        visibility: private
        createdBy: createdBy
        initialConfig: "{}"
        appId: appId
        state: "{}"
        region: null
        local: true
        roomId: roomId
      properties:
        state:
          additionalProperties: false
          type: object
        initialConfig:
          additionalProperties: false
          type: object
        createdAt:
          format: date-time
          type: string
        createdBy:
          type: string
        local:
          type: boolean
        visibility:
          enum:
          - private
          - public
          - local
          type: string
        region:
          $ref: '#/components/schemas/Region'
        roomId:
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]*$"
          type: string
        appId:
          type: string
      required:
      - appId
      - createdAt
      - createdBy
      - initialConfig
      - local
      - region
      - roomId
      - visibility
      type: object
    TailLines:
      format: int32
      maximum: 10000
      minimum: 1
      type: integer
    ProcessId:
      type: string
    MetricValue:
      example:
        value: 0.8008281904610115
        timestamp: 6.027456183070403
      properties:
        value:
          format: double
          type: number
        timestamp:
          format: double
          type: number
      required:
      - timestamp
      - value
      type: object
    Record_Partial_MetricName_.MetricValue-Array_:
      description: Construct a type with a set of properties K of type T
      example:
        memory:
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        total_egress:
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        cpu:
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        rate_egress:
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
      properties:
        cpu:
          items:
            $ref: '#/components/schemas/MetricValue'
          type: array
        memory:
          items:
            $ref: '#/components/schemas/MetricValue'
          type: array
        rate_egress:
          items:
            $ref: '#/components/schemas/MetricValue'
          type: array
        total_egress:
          items:
            $ref: '#/components/schemas/MetricValue'
          type: array
      type: object
    MetricsResponse:
      $ref: '#/components/schemas/Record_Partial_MetricName_.MetricValue-Array_'
    MetricName:
      enum:
      - cpu
      - memory
      - rate_egress
      - total_egress
      type: string
    Process:
      example:
        egressedBytes: 0.8008281904610115
        idleSince: 2000-01-23T04:56:07.000+00:00
        terminatedAt: 2000-01-23T04:56:07.000+00:00
        roomsPerProcess: 5.962133916683182
        startedAt: 2000-01-23T04:56:07.000+00:00
        stoppingAt: 2000-01-23T04:56:07.000+00:00
        activeConnections: 6.027456183070403
        port: 5.637376656633329
        processId: processId
        startingAt: 2000-01-23T04:56:07.000+00:00
        draining: true
        deploymentId: 2.3021358869347655
        appId: appId
        host: host
        region: null
        roomSlotsAvailable: 1.4658129805029452
      properties:
        egressedBytes:
          format: double
          type: number
        idleSince:
          format: date-time
          nullable: true
          type: string
        activeConnections:
          format: double
          type: number
        roomSlotsAvailable:
          format: double
          type: number
        draining:
          type: boolean
        terminatedAt:
          format: date-time
          nullable: true
          type: string
        stoppingAt:
          format: date-time
          nullable: true
          type: string
        startedAt:
          format: date-time
          nullable: true
          type: string
        startingAt:
          format: date-time
          type: string
        roomsPerProcess:
          format: double
          type: number
        port:
          format: double
          type: number
        host:
          type: string
        region:
          $ref: '#/components/schemas/Region'
        processId:
          type: string
        deploymentId:
          format: double
          type: number
        appId:
          type: string
      required:
      - activeConnections
      - appId
      - deploymentId
      - draining
      - egressedBytes
      - host
      - idleSince
      - port
      - processId
      - region
      - roomSlotsAvailable
      - roomsPerProcess
      - startedAt
      - startingAt
      - stoppingAt
      - terminatedAt
      type: object
    RoomStatus:
      enum:
      - scheduling
      - active
      - suspended
      - destroyed
      type: string
    RoomAllocationId:
      type: string
    RoomAllocation:
      example:
        unscheduledAt: 2000-01-23T04:56:07.000+00:00
        processId: processId
        scheduledAt: 2000-01-23T04:56:07.000+00:00
        roomAllocationId: roomAllocationId
      properties:
        unscheduledAt:
          format: date-time
          nullable: true
          type: string
        scheduledAt:
          format: date-time
          type: string
        processId:
          type: string
        roomAllocationId:
          type: string
      required:
      - processId
      - roomAllocationId
      - scheduledAt
      - unscheduledAt
      type: object
    Pick_Room.Exclude_keyofRoom.allocations__:
      description: "From T, pick a set of properties whose keys are in the union K"
      properties:
        appId:
          type: string
        roomId:
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]*$"
          type: string
        status:
          $ref: '#/components/schemas/RoomStatus'
        currentAllocation:
          allOf:
          - $ref: '#/components/schemas/RoomAllocation'
          nullable: true
      required:
      - appId
      - currentAllocation
      - roomId
      - status
      type: object
    Omit_Room.allocations_:
      $ref: '#/components/schemas/Pick_Room.Exclude_keyofRoom.allocations__'
    RoomWithoutAllocations:
      $ref: '#/components/schemas/Omit_Room.allocations_'
    ProcessWithRooms:
      allOf:
      - $ref: '#/components/schemas/Process'
      - $ref: '#/components/schemas/ProcessWithRooms_allOf'
    Room:
      example:
        allocations:
        - unscheduledAt: 2000-01-23T04:56:07.000+00:00
          processId: processId
          scheduledAt: 2000-01-23T04:56:07.000+00:00
          roomAllocationId: roomAllocationId
        - unscheduledAt: 2000-01-23T04:56:07.000+00:00
          processId: processId
          scheduledAt: 2000-01-23T04:56:07.000+00:00
          roomAllocationId: roomAllocationId
        appId: appId
        currentAllocation: ""
        roomId: roomId
        status: null
      properties:
        currentAllocation:
          allOf:
          - $ref: '#/components/schemas/RoomAllocation'
          nullable: true
        status:
          $ref: '#/components/schemas/RoomStatus'
        allocations:
          items:
            $ref: '#/components/schemas/RoomAllocation'
          type: array
        roomId:
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]*$"
          type: string
        appId:
          type: string
      required:
      - allocations
      - appId
      - currentAllocation
      - roomId
      - status
      type: object
    StartingConnectionInfo:
      properties:
        status:
          enum:
          - starting
          nullable: false
          type: string
        roomId:
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]*$"
          type: string
      required:
      - roomId
      - status
      type: object
    ActiveConnectionInfo:
      properties:
        status:
          enum:
          - active
          nullable: false
          type: string
        transportType:
          $ref: '#/components/schemas/TransportType'
        port:
          format: double
          type: number
        host:
          type: string
        roomId:
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]*$"
          type: string
      required:
      - host
      - port
      - roomId
      - status
      - transportType
      type: object
    ConnectionInfo:
      anyOf:
      - $ref: '#/components/schemas/StartingConnectionInfo'
      - $ref: '#/components/schemas/ActiveConnectionInfo'
    LoginAnonymous_200_response:
      example:
        token: token
      properties:
        token:
          type: string
      required:
      - token
      type: object
    LoginNickname_request:
      properties:
        nickname:
          type: string
      required:
      - nickname
      type: object
    LoginGoogle_request:
      properties:
        idToken:
          type: string
      required:
      - idToken
      type: object
    RunBuild_request:
      properties:
        file:
          format: binary
          type: string
      required:
      - file
      type: object
    CreatePrivateLobby_request:
      properties:
        initialConfig:
          additionalProperties: false
          type: object
        region:
          $ref: '#/components/schemas/Region'
      required:
      - initialConfig
      - region
      type: object
    CreateLobby_request:
      properties:
        visibility:
          enum:
          - public
          - private
          - local
          type: string
        initialConfig:
          additionalProperties: false
          type: object
        region:
          $ref: '#/components/schemas/Region'
      required:
      - initialConfig
      - region
      - visibility
      type: object
    SetLobbyState_request:
      properties:
        state:
          additionalProperties: false
          type: object
      required:
      - state
      type: object
    CreateRoom_request:
      properties:
        region:
          $ref: '#/components/schemas/Region'
      required:
      - region
      type: object
    Application_authConfiguration_google:
      example:
        clientId: clientId
      properties:
        clientId:
          type: string
      required:
      - clientId
      type: object
    Application_authConfiguration:
      example:
        nickname: "{}"
        anonymous: "{}"
        google:
          clientId: clientId
      properties:
        google:
          $ref: '#/components/schemas/Application_authConfiguration_google'
        nickname:
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
        anonymous:
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      type: object
    DeploymentConfig_env_inner:
      example:
        name: name
        value: value
      properties:
        value:
          maxLength: 5000
          type: string
        name:
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z_][a-zA-Z0-9_]*$"
          type: string
      required:
      - name
      - value
      type: object
    Deployment_allOf:
      properties:
        createdAt:
          format: date-time
          type: string
        createdBy:
          type: string
        requestedMemoryMB:
          format: double
          type: number
        requestedCPU:
          format: double
          type: number
        deploymentId:
          format: double
          type: number
        buildId:
          format: double
          type: number
        appId:
          type: string
      required:
      - appId
      - buildId
      - createdAt
      - createdBy
      - deploymentId
      - requestedCPU
      - requestedMemoryMB
      type: object
      example: null
    ApplicationWithDeployment_allOf:
      properties:
        deployment:
          $ref: '#/components/schemas/Deployment'
      required:
      - deployment
      type: object
      example: null
    Build_regionalContainerTags_inner:
      example:
        region: null
        containerTag: containerTag
      properties:
        containerTag:
          type: string
        region:
          $ref: '#/components/schemas/Region'
      required:
      - containerTag
      - region
      type: object
    DiscoveryResponse_inner:
      example:
        port: 0.8008281904610115
        host: host
        region: null
      properties:
        port:
          format: double
          type: number
        host:
          type: string
        region:
          $ref: '#/components/schemas/Region'
      required:
      - host
      - port
      - region
      type: object
    ProcessWithRooms_allOf:
      properties:
        rooms:
          items:
            $ref: '#/components/schemas/RoomWithoutAllocations'
          type: array
        totalRooms:
          format: double
          type: number
      required:
      - rooms
      - totalRooms
      type: object
      example: null
  securitySchemes:
    auth0:
      bearerFormat: JWT
      scheme: bearer
      type: http

