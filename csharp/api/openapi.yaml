openapi: 3.0.0
info:
  contact: {}
  description: Welcome to the Hathora Cloud API documentation! Learn how to use the
    Hathora Cloud APIs to build and scale your game servers globally.
  title: Hathora Cloud API
  version: 0.0.1
servers:
- url: https://api.hathora.dev
- url: /
tags:
- description: "Operations that allow you manage your [applications](https://hathora.dev/docs/concepts/hathora-entities#application)."
  name: AppV1
- description: "Operations that allow you to generate a Hathora-signed [JSON web token\
    \ (JWT)](https://jwt.io/) for [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service)."
  name: AuthV1
- description: ' '
  name: BillingV1
- description: "Operations that allow you create and manage your [builds](https://hathora.dev/docs/concepts/hathora-entities#build)."
  name: BuildV2
- description: "Deprecated. Use [BuildV2](https://hathora.dev/api#tag/BuildV2)."
  name: BuildV1
- description: "Operations that allow you configure and manage an application's [build](https://hathora.dev/docs/concepts/hathora-entities#build)\
    \ at runtime."
  name: DeploymentV2
- description: "Deprecated. Use [DeploymentV2](https://hathora.dev/api#tag/DeploymentV2)."
  name: DeploymentV1
- description: Service that allows clients to directly ping all Hathora regions to
    get latency information
  name: DiscoveryV1
- description: "Operations to create and manage lobbies using our [Lobby Service](https://hathora.dev/docs/lobbies-and-matchmaking/lobby-service)."
  name: LobbyV3
- description: "Deprecated. Use [LobbyV3](https://hathora.dev/api#tag/LobbyV3)."
  name: LobbyV2
- description: "Deprecated. Use [LobbyV3](https://hathora.dev/api#tag/LobbyV3)."
  name: LobbyV1
- description: "Operations to get logs by [applications](https://hathora.dev/docs/concepts/hathora-entities#application),\
    \ [processes](https://hathora.dev/docs/concepts/hathora-entities#process), and\
    \ [deployments](https://hathora.dev/docs/concepts/hathora-entities#deployment).\
    \ We store 20GB of logs data."
  name: LogV1
- description: ' '
  name: ManagementV1
- description: "Operations to get metrics by [process](https://hathora.dev/docs/concepts/hathora-entities#process).\
    \ We store 72 hours of metrics data."
  name: MetricsV1
- description: "Operations to get data on active and stopped [processes](https://hathora.dev/docs/concepts/hathora-entities#process)."
  name: ProcessesV2
- description: "Deprecated. Use [ProcessesV2](https://hathora.dev/api#tag/ProcessesV2)."
  name: ProcessesV1
- description: "Operations to create, manage, and connect to [rooms](https://hathora.dev/docs/concepts/hathora-entities#room)."
  name: RoomV2
- description: "Deprecated. Use [RoomV2](https://hathora.dev/api#tag/RoomV2)."
  name: RoomV1
- description: ' '
  name: OrgTokensV1
paths:
  /apps/v1/list:
    get:
      description: "Returns an unsorted list of your organizationâ€™s [applications](https://hathora.dev/docs/concepts/hathora-entities#application).\
        \ An application is uniquely identified by an `appId`."
      operationId: GetApps
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationWithLatestDeploymentAndBuild'
                type: array
          description: Ok
      security:
      - hathoraDevToken: []
      tags:
      - AppV1
  /apps/v1/create:
    post:
      description: "Create a new [application](https://hathora.dev/docs/concepts/hathora-entities#application)."
      operationId: CreateApp
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppConfig'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - AppV1
  /apps/v1/update/{appId}:
    post:
      description: "Update data for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application)\
        \ using `appId`."
      operationId: UpdateApp
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppConfig'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - AppV1
  /apps/v1/info/{appId}:
    get:
      description: "Get details for an [application](https://hathora.dev/docs/concepts/hathora-entities#application)\
        \ using `appId`."
      operationId: GetAppInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - AppV1
  /apps/v1/delete/{appId}:
    delete:
      description: "Delete an [application](https://hathora.dev/docs/concepts/hathora-entities#application)\
        \ using `appId`. Your organization will lose access to this application."
      operationId: DeleteApp
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - AppV1
  /auth/v1/{appId}/login/anonymous:
    post:
      description: Returns a unique player token for an anonymous user.
      operationId: LoginAnonymous
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerTokenObject'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security: []
      tags:
      - AuthV1
  /auth/v1/{appId}/login/nickname:
    post:
      description: Returns a unique player token with a specified nickname for a user.
      operationId: LoginNickname
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NicknameObject'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerTokenObject'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security: []
      tags:
      - AuthV1
  /auth/v1/{appId}/login/google:
    post:
      description: Returns a unique player token using a Google-signed OIDC `idToken`.
      operationId: LoginGoogle
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleIdTokenObject'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerTokenObject'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security: []
      tags:
      - AuthV1
  /billing/v1/balance:
    get:
      operationId: GetBalance
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                format: double
                type: number
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BillingV1
  /billing/v1/paymentmethod:
    get:
      operationId: GetPaymentMethod
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BillingV1
  /billing/v1/customerportalurl:
    post:
      operationId: InitStripeCustomerPortalUrl
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPortalUrl'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BillingV1
  /billing/v1/invoices:
    get:
      operationId: GetInvoices
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Invoice'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BillingV1
  /builds/v1/{appId}/list:
    get:
      deprecated: true
      description: "Returns an array of [builds](https://hathora.dev/docs/concepts/hathora-entities#build)\
        \ for an [application](https://hathora.dev/docs/concepts/hathora-entities#application)."
      operationId: GetBuildsDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Build'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BuildV1
  /builds/v1/{appId}/info/{buildId}:
    get:
      deprecated: true
      description: "Get details for a [build](https://hathora.dev/docs/concepts/hathora-entities#build)."
      operationId: GetBuildInfoDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: buildId
        required: true
        schema:
          $ref: '#/components/schemas/BuildId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BuildV1
  /builds/v1/{appId}/create:
    post:
      deprecated: true
      description: "Creates a new [build](https://hathora.dev/docs/concepts/hathora-entities#build).\
        \ Responds with a `buildId` that you must pass to [`RunBuild()`](https://hathora.dev/api#tag/BuildV1/operation/RunBuild)\
        \ to build the game server artifact. You can optionally pass in a `buildTag`\
        \ to associate an external version with a build."
      operationId: CreateBuildDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBuildParams'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BuildV1
  /builds/v1/{appId}/run/{buildId}:
    post:
      deprecated: true
      description: "Builds a game server artifact from a tarball you provide. Pass\
        \ in the `buildId` generated from [`CreateBuild()`](https://hathora.dev/api#tag/BuildV1/operation/CreateBuild)."
      operationId: RunBuildDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: buildId
        required: true
        schema:
          $ref: '#/components/schemas/BuildId'
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RunBuildDeprecated_request'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: byte
                type: string
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BuildV1
  /builds/v1/{appId}/delete/{buildId}:
    delete:
      deprecated: true
      description: "Delete a [build](https://hathora.dev/docs/concepts/hathora-entities#build).\
        \ All associated metadata is deleted."
      operationId: DeleteBuildDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: buildId
        required: true
        schema:
          $ref: '#/components/schemas/BuildId'
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BuildV1
  /builds/v2/{appId}/list:
    get:
      description: "Returns an array of [builds](https://hathora.dev/docs/concepts/hathora-entities#build)\
        \ for an [application](https://hathora.dev/docs/concepts/hathora-entities#application)."
      operationId: GetBuilds
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Build'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BuildV2
  /builds/v2/{appId}/info/{buildId}:
    get:
      description: "Get details for a [build](https://hathora.dev/docs/concepts/hathora-entities#build)."
      operationId: GetBuildInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: buildId
        required: true
        schema:
          $ref: '#/components/schemas/BuildId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BuildV2
  /builds/v2/{appId}/create:
    post:
      description: "Creates a new [build](https://hathora.dev/docs/concepts/hathora-entities#build).\
        \ Responds with a `buildId` that you must pass to [`RunBuild()`](https://hathora.dev/api#tag/BuildV1/operation/RunBuild)\
        \ to build the game server artifact. You can optionally pass in a `buildTag`\
        \ to associate an external version with a build."
      operationId: CreateBuild
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBuildParams'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BuildV2
  /builds/v2/{appId}/run/{buildId}:
    post:
      description: "Builds a game server artifact from a tarball you provide. Pass\
        \ in the `buildId` generated from [`CreateBuild()`](https://hathora.dev/api#tag/BuildV1/operation/CreateBuild)."
      operationId: RunBuild
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: buildId
        required: true
        schema:
          $ref: '#/components/schemas/BuildId'
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RunBuildDeprecated_request'
        required: true
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BuildV2
  /builds/v2/{appId}/delete/{buildId}:
    delete:
      description: "Delete a [build](https://hathora.dev/docs/concepts/hathora-entities#build).\
        \ All associated metadata is deleted."
      operationId: DeleteBuild
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: buildId
        required: true
        schema:
          $ref: '#/components/schemas/BuildId'
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - BuildV2
  /deployments/v1/{appId}/list:
    get:
      deprecated: true
      description: "Returns an array of [deployments](https://hathora.dev/docs/concepts/hathora-entities#deployment)\
        \ for an [application](https://hathora.dev/docs/concepts/hathora-entities#application)."
      operationId: GetDeploymentsDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Deployment'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - DeploymentV1
  /deployments/v1/{appId}/latest:
    get:
      deprecated: true
      description: "Get the latest [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment)\
        \ for an [application](https://hathora.dev/docs/concepts/hathora-entities#application)."
      operationId: GetLatestDeploymentDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - DeploymentV1
  /deployments/v1/{appId}/info/{deploymentId}:
    get:
      deprecated: true
      description: "Get details for a [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment)."
      operationId: GetDeploymentInfoDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: deploymentId
        required: true
        schema:
          $ref: '#/components/schemas/DeploymentId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - DeploymentV1
  /deployments/v1/{appId}/create/{buildId}:
    post:
      deprecated: true
      description: "Create a new [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment).\
        \ Creating a new deployment means all new rooms created will use the latest\
        \ deployment configuration, but existing games in progress will not be affected."
      operationId: CreateDeploymentDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: buildId
        required: true
        schema:
          $ref: '#/components/schemas/BuildId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentConfig'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - DeploymentV1
  /deployments/v2/{appId}/list:
    get:
      description: "Returns an array of [deployments](https://hathora.dev/docs/concepts/hathora-entities#deployment)\
        \ for an [application](https://hathora.dev/docs/concepts/hathora-entities#application)."
      operationId: GetDeployments
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeploymentV2'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - DeploymentV2
  /deployments/v2/{appId}/latest:
    get:
      description: "Get the latest [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment)\
        \ for an [application](https://hathora.dev/docs/concepts/hathora-entities#application)."
      operationId: GetLatestDeployment
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentV2'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - DeploymentV2
  /deployments/v2/{appId}/info/{deploymentId}:
    get:
      description: "Get details for a [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment)."
      operationId: GetDeploymentInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: deploymentId
        required: true
        schema:
          $ref: '#/components/schemas/DeploymentId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentV2'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - DeploymentV2
  /deployments/v2/{appId}/create/{buildId}:
    post:
      description: "Create a new [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment).\
        \ Creating a new deployment means all new rooms created will use the latest\
        \ deployment configuration, but existing games in progress will not be affected."
      operationId: CreateDeployment
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: buildId
        required: true
        schema:
          $ref: '#/components/schemas/BuildId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentConfigV2'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentV2'
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - DeploymentV2
  /discovery/v1/ping:
    get:
      deprecated: true
      description: "Returns an array of V1 regions with a host and port that a client\
        \ can directly ping. Open a websocket connection to `wss://<host>:<port>/ws`\
        \ and send a packet. To calculate ping, measure the time it takes to get an\
        \ echo packet back."
      operationId: GetPingServiceEndpointsDeprecated
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingEndpoints'
          description: Ok
      security: []
      tags:
      - DiscoveryV1
  /discovery/v2/ping:
    get:
      description: "Returns an array of all regions with a host and port that a client\
        \ can directly ping. Open a websocket connection to `wss://<host>:<port>/ws`\
        \ and send a packet. To calculate ping, measure the time it takes to get an\
        \ echo packet back."
      operationId: GetPingServiceEndpoints
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingEndpoints'
          description: Ok
      security: []
      tags:
      - DiscoveryV2
  /lobby/v1/{appId}/create/private:
    post:
      deprecated: true
      operationId: CreatePrivateLobbyDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      - explode: true
        in: query
        name: local
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomId'
          description: Ok
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - playerAuth: []
      tags:
      - LobbyV1
  /lobby/v1/{appId}/create/public:
    post:
      deprecated: true
      operationId: CreatePublicLobbyDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      - explode: true
        in: query
        name: local
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomId'
          description: Ok
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - playerAuth: []
      tags:
      - LobbyV1
  /lobby/v1/{appId}/list:
    get:
      deprecated: true
      operationId: ListActivePublicLobbiesDeprecatedV1
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: local
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Lobby'
                type: array
          description: Ok
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security: []
      tags:
      - LobbyV1
  /lobby/v2/{appId}/create/private:
    post:
      deprecated: true
      operationId: CreatePrivateLobby
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: roomId
        required: false
        schema:
          $ref: '#/components/schemas/RoomId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrivateLobby_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - playerAuth: []
      tags:
      - LobbyV2
  /lobby/v2/{appId}/create/public:
    post:
      deprecated: true
      operationId: CreatePublicLobby
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: roomId
        required: false
        schema:
          $ref: '#/components/schemas/RoomId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrivateLobby_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - playerAuth: []
      tags:
      - LobbyV2
  /lobby/v2/{appId}/create/local:
    post:
      deprecated: true
      operationId: CreateLocalLobby
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: roomId
        required: false
        schema:
          $ref: '#/components/schemas/RoomId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrivateLobby_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - playerAuth: []
      tags:
      - LobbyV2
  /lobby/v2/{appId}/create:
    post:
      deprecated: true
      description: "Create a new lobby for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).\
        \ A lobby object is a wrapper around a [room](https://hathora.dev/docs/concepts/hathora-entities#room)\
        \ object. With a lobby, you get additional functionality like configuring\
        \ the visibility of the room, managing the state of a match, and retrieving\
        \ a list of public lobbies to display to players."
      operationId: CreateLobbyDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: roomId
        required: false
        schema:
          $ref: '#/components/schemas/RoomId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLobbyParams'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - playerAuth: []
      tags:
      - LobbyV2
  /lobby/v2/{appId}/list/public:
    get:
      deprecated: true
      description: "Get all active lobbies for a an [application](https://hathora.dev/docs/concepts/hathora-entities#application).\
        \ Filter by optionally passing in a `region`. Use this endpoint to display\
        \ all public lobbies that a player can join in the game client."
      operationId: ListActivePublicLobbiesDeprecatedV2
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - description: "Region to filter by. If omitted, active public lobbies in all\
          \ regions will be returned."
        explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Lobby'
                type: array
          description: Ok
      security: []
      tags:
      - LobbyV2
  /lobby/v2/{appId}/info/{roomId}:
    get:
      deprecated: true
      description: Get details for a lobby.
      operationId: GetLobbyInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security: []
      tags:
      - LobbyV2
  /lobby/v2/{appId}/setState/{roomId}:
    post:
      deprecated: true
      description: Set the state of a lobby. State is intended to be set by the server
        and must be smaller than 1MB. Use this endpoint to store match data like live
        player count to enforce max number of clients or persist end-game data (i.e.
        winner or final scores).
      operationId: SetLobbyState
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetLobbyStateParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - LobbyV2
  /lobby/v3/{appId}/create:
    post:
      description: "Create a new lobby for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).\
        \ A lobby object is a wrapper around a [room](https://hathora.dev/docs/concepts/hathora-entities#room)\
        \ object. With a lobby, you get additional functionality like configuring\
        \ the visibility of the room, managing the state of a match, and retrieving\
        \ a list of public lobbies to display to players."
      operationId: CreateLobby
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: shortCode
        required: false
        schema:
          $ref: '#/components/schemas/ShortCode'
        style: form
      - explode: true
        in: query
        name: roomId
        required: false
        schema:
          $ref: '#/components/schemas/RoomId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLobbyV3Params'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LobbyV3'
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - playerAuth: []
      tags:
      - LobbyV3
  /lobby/v3/{appId}/list/public:
    get:
      description: "Get all active lobbies for a given [application](https://hathora.dev/docs/concepts/hathora-entities#application).\
        \ Filter the array by optionally passing in a `region`. Use this endpoint\
        \ to display all public lobbies that a player can join in the game client."
      operationId: ListActivePublicLobbies
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - description: "If omitted, active public lobbies in all regions will be returned."
        explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LobbyV3'
                type: array
          description: Ok
      security: []
      tags:
      - LobbyV3
  /lobby/v3/{appId}/info/roomid/{roomId}:
    get:
      description: Get details for a lobby.
      operationId: GetLobbyInfoByRoomId
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LobbyV3'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security: []
      tags:
      - LobbyV3
  /lobby/v3/{appId}/info/shortcode/{shortCode}:
    get:
      description: "Get details for a lobby. If 2 or more lobbies have the same `shortCode`,\
        \ then the most recently created lobby will be returned."
      operationId: GetLobbyInfoByShortCode
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: shortCode
        required: true
        schema:
          $ref: '#/components/schemas/ShortCode'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LobbyV3'
          description: Ok
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security: []
      tags:
      - LobbyV3
  /logs/v1/{appId}/all:
    get:
      deprecated: true
      description: "Returns a stream of logs for an [application](https://hathora.dev/docs/concepts/hathora-entities#application)\
        \ using `appId`."
      operationId: GetLogsForApp
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: follow
        required: false
        schema:
          $ref: '#/components/schemas/LogsFollow'
        style: form
      - explode: true
        in: query
        name: tailLines
        required: false
        schema:
          $ref: '#/components/schemas/TailLines'
        style: form
      - explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - LogV1
  /logs/v1/{appId}/process/{processId}:
    get:
      description: "Returns a stream of logs for a [process](https://hathora.dev/docs/concepts/hathora-entities#process)\
        \ using `appId` and `processId`."
      operationId: GetLogsForProcess
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      - explode: true
        in: query
        name: follow
        required: false
        schema:
          $ref: '#/components/schemas/LogsFollow'
        style: form
      - explode: true
        in: query
        name: tailLines
        required: false
        schema:
          $ref: '#/components/schemas/TailLines'
        style: form
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Ok
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - LogV1
  /logs/v1/{appId}/process/{processId}/download:
    get:
      description: Download entire log file for a stopped process.
      operationId: DownloadLogForProcess
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Ok
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - LogV1
  /logs/v1/{appId}/deployment/{deploymentId}:
    get:
      deprecated: true
      description: "Returns a stream of logs for a [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment)\
        \ using `appId` and `deploymentId`."
      operationId: GetLogsForDeployment
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: deploymentId
        required: true
        schema:
          $ref: '#/components/schemas/DeploymentId'
        style: simple
      - explode: true
        in: query
        name: follow
        required: false
        schema:
          $ref: '#/components/schemas/LogsFollow'
        style: form
      - explode: true
        in: query
        name: tailLines
        required: false
        schema:
          $ref: '#/components/schemas/TailLines'
        style: form
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - LogV1
  /management/v1/sendverificationemail:
    post:
      operationId: SendVerificationEmail
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationEmailRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationEmailSuccess'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security: []
      tags:
      - ManagementV1
  /metrics/v1/{appId}/process/{processId}:
    get:
      description: "Get metrics for a [process](https://hathora.dev/docs/concepts/hathora-entities#process)\
        \ using `appId` and `processId`."
      operationId: GetMetrics
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      - description: Available metrics to query over time.
        explode: true
        in: query
        name: metrics
        required: false
        schema:
          default:
          - cpu
          - memory
          - rate_egress
          items:
            $ref: '#/components/schemas/MetricName'
          type: array
        style: form
      - description: Unix timestamp. Default is current time.
        explode: true
        in: query
        name: end
        required: false
        schema:
          format: double
          type: number
        style: form
      - description: Unix timestamp. Default is -1 hour from `end`.
        explode: true
        in: query
        name: start
        required: false
        schema:
          format: double
          type: number
        style: form
      - explode: true
        in: query
        name: step
        required: false
        schema:
          $ref: '#/components/schemas/MetricsStep'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsData'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - MetricsV1
  /orgs/v1/{orgId}/invites:
    put:
      operationId: InviteUser
      parameters:
      - explode: false
        in: path
        name: orgId
        required: true
        schema:
          $ref: '#/components/schemas/OrgId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInvite'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgPermission'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - OrganizationsV1
  /orgs/v1/{orgId}/invites/rescind:
    post:
      operationId: RescindInvite
      parameters:
      - explode: false
        in: path
        name: orgId
        required: true
        schema:
          $ref: '#/components/schemas/OrgId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RescindUserInvite'
        required: true
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - OrganizationsV1
  /orgs/v1/{orgId}/invites/pending:
    get:
      operationId: GetOrgPendingInvites
      parameters:
      - explode: false
        in: path
        name: orgId
        required: true
        schema:
          $ref: '#/components/schemas/OrgId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgInvitesPage'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - OrganizationsV1
  /orgs/v1/user/invites/pending:
    get:
      operationId: GetUserPendingInvites
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgInvitesPage'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - OrganizationsV1
  /orgs/v1/{orgId}/invites/accept:
    post:
      operationId: AcceptInvite
      parameters:
      - explode: false
        in: path
        name: orgId
        required: true
        schema:
          $ref: '#/components/schemas/OrgId'
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - OrganizationsV1
  /orgs/v1/{orgId}/invites/reject:
    post:
      operationId: RejectInvite
      parameters:
      - explode: false
        in: path
        name: orgId
        required: true
        schema:
          $ref: '#/components/schemas/OrgId'
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - OrganizationsV1
  /processes/v1/{appId}/list/running:
    get:
      deprecated: true
      description: "Retrieve 10 most recently started [process](https://hathora.dev/docs/concepts/hathora-entities#process)\
        \ objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).\
        \ Filter the array by optionally passing in a `region`."
      operationId: GetRunningProcesses
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProcessWithRooms'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - ProcessesV1
  /processes/v1/{appId}/list/stopped:
    get:
      deprecated: true
      description: "Retrieve 10 most recently stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process)\
        \ objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).\
        \ Filter the array by optionally passing in a `region`."
      operationId: GetStoppedProcesses
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: region
        required: false
        schema:
          $ref: '#/components/schemas/Region'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Process'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - ProcessesV1
  /processes/v1/{appId}/info/{processId}:
    get:
      deprecated: true
      description: "Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process)."
      operationId: GetProcessInfoDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Process'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - ProcessesV1
  /processes/v2/{appId}/info/{processId}:
    get:
      description: "Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process)."
      operationId: GetProcessInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessV2'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - ProcessesV2
  /processes/v2/{appId}/list/latest:
    get:
      description: "Retrieve the 10 most recent [processes](https://hathora.dev/docs/concepts/hathora-entities#process)\
        \ objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).\
        \ Filter the array by optionally passing in a `status` or `region`."
      operationId: GetLatestProcesses
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: status
        required: false
        schema:
          items:
            $ref: '#/components/schemas/ProcessStatus'
          type: array
        style: form
      - explode: true
        in: query
        name: region
        required: false
        schema:
          items:
            $ref: '#/components/schemas/Region'
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProcessV2'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - ProcessesV2
  /processes/v2/{appId}/stop/{processId}:
    post:
      description: "Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process)\
        \ immediately."
      operationId: StopProcess
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - ProcessesV2
  /processes/v2/{appId}/create/{region}:
    post:
      description: "Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process)\
        \ without a room. Use this to pre-allocate processes ahead of time so that\
        \ subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom)\
        \ can be instant."
      operationId: CreateProcess
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: region
        required: true
        schema:
          $ref: '#/components/schemas/Region'
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessV2'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - ProcessesV2
  /rooms/v1/{appId}/create:
    post:
      deprecated: true
      operationId: CreateRoomDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: roomId
        required: false
        schema:
          $ref: '#/components/schemas/RoomId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomParams'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomId'
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - RoomV1
  /rooms/v1/{appId}/info/{roomId}:
    get:
      deprecated: true
      operationId: GetRoomInfoDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - RoomV1
  /rooms/v1/{appId}/list/{processId}/active:
    get:
      deprecated: true
      operationId: GetActiveRoomsForProcessDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoomWithoutAllocations'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - RoomV1
  /rooms/v1/{appId}/list/{processId}/inactive:
    get:
      deprecated: true
      operationId: GetInactiveRoomsForProcessDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoomWithoutAllocations'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - RoomV1
  /rooms/v1/{appId}/destroy/{roomId}:
    post:
      deprecated: true
      operationId: DestroyRoomDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - RoomV1
  /rooms/v1/{appId}/suspend/{roomId}:
    post:
      deprecated: true
      operationId: SuspendRoomDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - RoomV1
  /rooms/v1/{appId}/connectioninfo/{roomId}:
    get:
      deprecated: true
      operationId: GetConnectionInfoDeprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionInfo'
          description: Ok
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security: []
      tags:
      - RoomV1
  /rooms/v2/{appId}/create:
    post:
      description: "Create a new [room](https://hathora.dev/docs/concepts/hathora-entities#room)\
        \ for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application).\
        \ Poll the [`GetConnectionInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetConnectionInfo)\
        \ endpoint to get connection details for an active room."
      operationId: CreateRoom
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: true
        in: query
        name: roomId
        required: false
        schema:
          $ref: '#/components/schemas/RoomId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomParams'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomConnectionData'
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - RoomV2
  /rooms/v2/{appId}/info/{roomId}:
    get:
      description: "Retreive current and historical allocation data for a [room](https://hathora.dev/docs/concepts/hathora-entities#room)."
      operationId: GetRoomInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - RoomV2
  /rooms/v2/{appId}/list/{processId}/active:
    get:
      description: "Get all active [rooms](https://hathora.dev/docs/concepts/hathora-entities#room)\
        \ for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process)."
      operationId: GetActiveRoomsForProcess
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoomWithoutAllocations'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - RoomV2
  /rooms/v2/{appId}/list/{processId}/inactive:
    get:
      description: "Get all inactive [rooms](https://hathora.dev/docs/concepts/hathora-entities#room)\
        \ for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process)."
      operationId: GetInactiveRoomsForProcess
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: processId
        required: true
        schema:
          $ref: '#/components/schemas/ProcessId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoomWithoutAllocations'
                type: array
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - RoomV2
  /rooms/v2/{appId}/destroy/{roomId}:
    post:
      description: "Destroy a [room](https://hathora.dev/docs/concepts/hathora-entities#room).\
        \ All associated metadata is deleted."
      operationId: DestroyRoom
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - RoomV2
  /rooms/v2/{appId}/suspend/{roomId}:
    post:
      deprecated: true
      description: "Suspend a [room](https://hathora.dev/docs/concepts/hathora-entities#room).\
        \ The room is unallocated from the process but can be rescheduled later using\
        \ the same `roomId`."
      operationId: SuspendRoomV2Deprecated
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - RoomV2
  /rooms/v2/{appId}/connectioninfo/{roomId}:
    get:
      description: "Poll this endpoint to get connection details to a [room](https://hathora.dev/docs/concepts/hathora-entities#room).\
        \ Clients can call this endpoint without authentication."
      operationId: GetConnectionInfo
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionInfoV2'
          description: Ok
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security: []
      tags:
      - RoomV2
  /rooms/v2/{appId}/update/{roomId}:
    post:
      operationId: UpdateRoomConfig
      parameters:
      - explode: false
        in: path
        name: appId
        required: true
        schema:
          $ref: '#/components/schemas/AppId'
        style: simple
      - explode: false
        in: path
        name: roomId
        required: true
        schema:
          $ref: '#/components/schemas/RoomId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoomConfigParams'
        required: true
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - RoomV2
  /tokens/v1/orgs/{orgId}:
    get:
      description: List all organization tokens for a given org.
      operationId: GetOrgTokens
      parameters:
      - explode: false
        in: path
        name: orgId
        required: true
        schema:
          $ref: '#/components/schemas/OrgId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrgTokens'
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - OrgTokensV1
  /tokens/v1/orgs/{orgId}/create:
    post:
      description: Create a new organization token.
      operationId: CreateOrgToken
      parameters:
      - explode: false
        in: path
        name: orgId
        required: true
        schema:
          $ref: '#/components/schemas/OrgId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrgToken'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedOrgToken'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - OrgTokensV1
  /tokens/v1/orgs/{orgId}/tokens/{orgTokenId}/revoke:
    post:
      description: Revoke an organization token.
      operationId: RevokeOrgToken
      parameters:
      - explode: false
        in: path
        name: orgId
        required: true
        schema:
          $ref: '#/components/schemas/OrgId'
        style: simple
      - explode: false
        in: path
        name: orgTokenId
        required: true
        schema:
          $ref: '#/components/schemas/OrgId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: Ok
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: ""
      security:
      - hathoraDevToken: []
      tags:
      - OrgTokensV1
components:
  examples: {}
  headers: {}
  parameters: {}
  requestBodies: {}
  responses: {}
  schemas:
    AppName:
      description: Readable name for an application. Must be unique within an organization.
      example: minecraft
      maxLength: 64
      pattern: "^[a-z0-9-]+$"
      type: string
    AppId:
      description: System generated unique identifier for an application.
      example: app-af469a92-5b45-4565-b3c4-b79878de67d2
      type: string
    Record_string.never_:
      description: Construct a type with a set of properties K of type T
      properties: {}
      type: object
    AuthConfiguration:
      description: "Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service)\
        \ for your application. Use Hathora's built-in auth providers or use your\
        \ own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider)."
      example:
        nickname: "{}"
        anonymous: "{}"
        google:
          clientId: clientId
      properties:
        google:
          $ref: '#/components/schemas/AuthConfiguration_google'
        nickname:
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
        anonymous:
          description: Construct a type with a set of properties K of type T
          properties: {}
          type: object
      type: object
    OrgId:
      description: System generated unique identifier for an organization. Not guaranteed
        to have a specific format.
      example: org-6f706e83-0ec1-437a-9a46-7d4281eb2f39
      type: string
    Application:
      description: An application object is the top level namespace for the game server.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        deletedAt: 2000-01-23T04:56:07.000+00:00
        createdBy: google-oauth2|107030234048588177467
        appName: minecraft
        appId: app-af469a92-5b45-4565-b3c4-b79878de67d2
        appSecret: secret-6f706e83-0ec1-437a-9a46-7d4281eb2f39
        deletedBy: google-oauth2|107030234048588177467
        orgId: org-6f706e83-0ec1-437a-9a46-7d4281eb2f39
        authConfiguration:
          nickname: "{}"
          anonymous: "{}"
          google:
            clientId: clientId
      properties:
        deletedBy:
          description: UserId or email address for the user that deleted the application.
          example: google-oauth2|107030234048588177467
          nullable: true
          type: string
        deletedAt:
          description: When the application was deleted.
          format: date-time
          nullable: true
          type: string
        createdAt:
          description: When the application was created.
          format: date-time
          type: string
        createdBy:
          description: UserId or email address for the user that created the application.
          example: google-oauth2|107030234048588177467
          type: string
        orgId:
          description: System generated unique identifier for an organization. Not
            guaranteed to have a specific format.
          example: org-6f706e83-0ec1-437a-9a46-7d4281eb2f39
          type: string
        authConfiguration:
          $ref: '#/components/schemas/AuthConfiguration'
        appSecret:
          description: Secret that is used for identity and access management.
          example: secret-6f706e83-0ec1-437a-9a46-7d4281eb2f39
          type: string
        appId:
          description: System generated unique identifier for an application.
          example: app-af469a92-5b45-4565-b3c4-b79878de67d2
          type: string
        appName:
          description: Readable name for an application. Must be unique within an
            organization.
          example: minecraft
          maxLength: 64
          pattern: "^[a-z0-9-]+$"
          type: string
      required:
      - appId
      - appName
      - appSecret
      - authConfiguration
      - createdAt
      - createdBy
      - deletedAt
      - deletedBy
      - orgId
      type: object
    BuildId:
      description: System generated id for a build. Increments by 1.
      example: 1
      format: int32
      type: integer
    DeploymentId:
      description: System generated id for a deployment. Increments by 1.
      example: 1
      format: int32
      type: integer
    TransportType:
      description: Transport type specifies the underlying communication protocol
        to the exposed port.
      enum:
      - tcp
      - udp
      - tls
      type: string
    ContainerPort:
      description: A container port object represents the transport configruations
        for how your server will listen.
      example:
        port: 8000
        name: default
        transportType: null
      properties:
        transportType:
          $ref: '#/components/schemas/TransportType'
        port:
          example: 8000
          format: int32
          maximum: 65535
          minimum: 1
          type: integer
        name:
          description: Readable name for the port.
          example: default
          maxLength: 100
          minLength: 1
          pattern: "^[a-z][a-z0-9-]*$"
          type: string
      required:
      - name
      - port
      - transportType
      type: object
    NumRoomsPerProcess:
      description: "Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room)\
        \ can be scheduled in a process."
      example: 3
      format: int32
      maximum: 10000
      minimum: 1
      type: integer
    DeploymentV2:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        requestedCPU: 0.5
        defaultContainerPort:
          port: 8000
          name: default
          transportType: null
        roomsPerProcess: 3
        additionalContainerPorts:
          transportType: tcp
          port: 4000
          name: debug
        createdBy: google-oauth2|107030234048588177467
        deploymentId: 1
        appId: app-af469a92-5b45-4565-b3c4-b79878de67d2
        buildId: 1
        requestedMemoryMB: 1024
        env:
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        idleTimeoutEnabled: true
      properties:
        idleTimeoutEnabled:
          description: |-
            Option to shut down processes that have had no new connections or rooms
            for five minutes.
          type: boolean
        env:
          description: The environment variable that our process will have access
            to at runtime.
          items:
            $ref: '#/components/schemas/DeploymentV2_env_inner'
          maxItems: 100
          type: array
        roomsPerProcess:
          description: "Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room)\
            \ can be scheduled in a process."
          example: 3
          format: int32
          maximum: 10000
          minimum: 1
          type: integer
        additionalContainerPorts:
          description: Additional ports your server listens on.
          example:
            transportType: tcp
            port: 4000
            name: debug
          items:
            $ref: '#/components/schemas/ContainerPort'
          maxItems: 2
          type: array
        defaultContainerPort:
          $ref: '#/components/schemas/ContainerPort'
        createdAt:
          description: When the deployment was created.
          format: date-time
          type: string
        createdBy:
          description: UserId or email address for the user that created the deployment.
          example: google-oauth2|107030234048588177467
          type: string
        requestedMemoryMB:
          description: The amount of memory allocated to your process.
          example: 1024
          format: double
          type: number
        requestedCPU:
          description: The number of cores allocated to your process.
          example: 0.5
          format: double
          type: number
        deploymentId:
          description: System generated id for a deployment. Increments by 1.
          example: 1
          format: int32
          type: integer
        buildId:
          description: System generated id for a build. Increments by 1.
          example: 1
          format: int32
          type: integer
        appId:
          description: System generated unique identifier for an application.
          example: app-af469a92-5b45-4565-b3c4-b79878de67d2
          type: string
      required:
      - additionalContainerPorts
      - appId
      - buildId
      - createdAt
      - createdBy
      - defaultContainerPort
      - deploymentId
      - env
      - idleTimeoutEnabled
      - requestedCPU
      - requestedMemoryMB
      - roomsPerProcess
      type: object
    BuildStatus:
      enum:
      - created
      - running
      - succeeded
      - failed
      type: string
    Region:
      enum:
      - Seattle
      - Los_Angeles
      - Washington_DC
      - Chicago
      - London
      - Frankfurt
      - Mumbai
      - Singapore
      - Tokyo
      - Sydney
      - Sao_Paulo
      - Dallas
      type: string
    BuildTag:
      description: "Tag to associate an external version with a build. It is accessible\
        \ via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV2/operation/GetBuildInfo)."
      example: 0.1.14-14c793
      maxLength: 1000
      type: string
    Build:
      description: A build represents a game server artifact and its associated metadata.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        deletedAt: 2000-01-23T04:56:07.000+00:00
        buildTag: ""
        regionalContainerTags:
        - region: null
          containerTag: containerTag
        - region: null
          containerTag: containerTag
        createdBy: google-oauth2|107030234048588177467
        appId: app-af469a92-5b45-4565-b3c4-b79878de67d2
        startedAt: 2000-01-23T04:56:07.000+00:00
        buildId: 1
        imageSize: 0
        status: null
        finishedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        buildTag:
          allOf:
          - $ref: '#/components/schemas/BuildTag'
          nullable: true
        regionalContainerTags:
          deprecated: true
          items:
            $ref: '#/components/schemas/Build_regionalContainerTags_inner'
          type: array
        imageSize:
          description: The size (in bytes) of the Docker image built by Hathora.
          format: int64
          type: integer
        status:
          $ref: '#/components/schemas/BuildStatus'
        deletedAt:
          description: When the build was deleted.
          format: date-time
          nullable: true
          type: string
        finishedAt:
          description: "When [`RunBuild()`](https://hathora.dev/api#tag/BuildV2/operation/RunBuild)\
            \ finished executing."
          format: date-time
          nullable: true
          type: string
        startedAt:
          description: "When [`RunBuild()`](https://hathora.dev/api#tag/BuildV2/operation/RunBuild)\
            \ is called."
          format: date-time
          nullable: true
          type: string
        createdAt:
          description: "When [`CreateBuild()`](https://hathora.dev/api#tag/BuildV2/operation/CreateBuild)\
            \ is called."
          format: date-time
          type: string
        createdBy:
          description: UserId or email address for the user that created the build.
          example: google-oauth2|107030234048588177467
          type: string
        buildId:
          description: System generated id for a build. Increments by 1.
          example: 1
          format: int32
          type: integer
        appId:
          description: System generated unique identifier for an application.
          example: app-af469a92-5b45-4565-b3c4-b79878de67d2
          type: string
      required:
      - appId
      - buildId
      - createdAt
      - createdBy
      - deletedAt
      - finishedAt
      - imageSize
      - regionalContainerTags
      - startedAt
      - status
      type: object
    ApplicationWithLatestDeploymentAndBuild:
      allOf:
      - $ref: '#/components/schemas/Application'
      - $ref: '#/components/schemas/ApplicationWithLatestDeploymentAndBuild_allOf'
    AppConfig:
      example:
        appName: minecraft
        authConfiguration:
          nickname: "{}"
          anonymous: "{}"
          google:
            clientId: clientId
      properties:
        authConfiguration:
          $ref: '#/components/schemas/AuthConfiguration'
        appName:
          description: Readable name for an application. Must be unique within an
            organization.
          example: minecraft
          maxLength: 64
          pattern: "^[a-z0-9-]+$"
          type: string
      required:
      - appName
      - authConfiguration
      type: object
    ApiError:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    PlayerTokenObject:
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYW5vbnltb3VzIiwiaWQiOiJ3aDA4eWN3eTJwOSIsIm5hbWUiOiJqaXR0ZXJ5LXNhbG1vbi1ndWxsIiwiaWF0IjoxNjg5MzQ5MTk3fQ.-LzlPhZw2tw0ycZ229IRHwwmINGKWNPFMDrXOphLjEk
      properties:
        token:
          description: A unique Hathora-signed JWT player token.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYW5vbnltb3VzIiwiaWQiOiJ3aDA4eWN3eTJwOSIsIm5hbWUiOiJqaXR0ZXJ5LXNhbG1vbi1ndWxsIiwiaWF0IjoxNjg5MzQ5MTk3fQ.-LzlPhZw2tw0ycZ229IRHwwmINGKWNPFMDrXOphLjEk
          type: string
      required:
      - token
      type: object
    NicknameObject:
      example:
        nickname: squiddytwoshoes
      properties:
        nickname:
          description: An alias to represent a player.
          example: squiddytwoshoes
          type: string
      required:
      - nickname
      type: object
    GoogleIdTokenObject:
      example:
        idToken: eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkNDhhNzUxMzhkOWQ0OGYwYWE2MzVlZjU2OWM0ZTE5NmY3YWU4ZDYiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXpwIjoiODQ4NDEyODI2Nzg4LW00bXNyYjZxNDRkbTJ1ZTNrZ3Z1aTBmcTdrZGE1NWxzLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiODQ4NDEyODI2Nzg4LW00bXNyYjZxNDRkbTJ1ZTNrZ3Z1aTBmcTdrZGE1NWxzLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwic3ViIjoiMTE0NTQyMzMwNzI3MTU2MTMzNzc2IiwiZW1haWwiOiJocGFdkeivmeuzQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhdF9oYXNoIjoidno1NGhhdTNxbnVR
      properties:
        idToken:
          description: "A Google-signed OIDC ID token representing a player's authenticated\
            \ identity. Learn how to get an `idToken` [here](https://cloud.google.com/docs/authentication/get-id-token)."
          example: eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkNDhhNzUxMzhkOWQ0OGYwYWE2MzVlZjU2OWM0ZTE5NmY3YWU4ZDYiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXpwIjoiODQ4NDEyODI2Nzg4LW00bXNyYjZxNDRkbTJ1ZTNrZ3Z1aTBmcTdrZGE1NWxzLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiODQ4NDEyODI2Nzg4LW00bXNyYjZxNDRkbTJ1ZTNrZ3Z1aTBmcTdrZGE1NWxzLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwic3ViIjoiMTE0NTQyMzMwNzI3MTU2MTMzNzc2IiwiZW1haWwiOiJocGFdkeivmeuzQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhdF9oYXNoIjoidno1NGhhdTNxbnVR
          type: string
      required:
      - idToken
      type: object
    CardBrand:
      enum:
      - amex
      - cartes_bancaires
      - diners
      - discover
      - jcb
      - mastercard
      - visa
      - unionpay
      - card
      type: string
    CardPaymentMethod:
      example:
        last4: last4
        brand: null
      properties:
        last4:
          type: string
        brand:
          $ref: '#/components/schemas/CardBrand'
      required:
      - brand
      - last4
      type: object
    AchPaymentMethod:
      example:
        last4: last4
        bankName: bankName
      properties:
        last4:
          type: string
        bankName:
          type: string
      type: object
    LinkPaymentMethod:
      example:
        email: email
      properties:
        email:
          type: string
      type: object
    Partial__card-CardPaymentMethod--ach-AchPaymentMethod--link-LinkPaymentMethod--__:
      description: Make all properties in T optional
      example:
        ach:
          last4: last4
          bankName: bankName
        link:
          email: email
        card:
          last4: last4
          brand: null
      properties:
        card:
          $ref: '#/components/schemas/CardPaymentMethod'
        ach:
          $ref: '#/components/schemas/AchPaymentMethod'
        link:
          $ref: '#/components/schemas/LinkPaymentMethod'
      type: object
    PaymentMethod:
      $ref: '#/components/schemas/Partial__card-CardPaymentMethod--ach-AchPaymentMethod--link-LinkPaymentMethod--__'
    CustomerPortalUrl:
      example:
        returnUrl: returnUrl
      properties:
        returnUrl:
          type: string
      required:
      - returnUrl
      type: object
    InvoiceStatus:
      enum:
      - pending
      - paid
      - overdue
      type: string
    Invoice:
      example:
        amountDue: 0.8008281904610115
        pdfUrl: pdfUrl
        month: 1.4658129805029452
        year: 6.027456183070403
        dueDate: 2000-01-23T04:56:07.000+00:00
        id: id
        status: null
      properties:
        status:
          $ref: '#/components/schemas/InvoiceStatus'
        amountDue:
          format: double
          type: number
        pdfUrl:
          type: string
        dueDate:
          format: date-time
          type: string
        year:
          format: double
          type: number
        month:
          format: double
          type: number
        id:
          type: string
      required:
      - amountDue
      - dueDate
      - id
      - month
      - pdfUrl
      - status
      - year
      type: object
    CreateBuildParams:
      example:
        buildTag: 0.1.14-14c793
      properties:
        buildTag:
          description: "Tag to associate an external version with a build. It is accessible\
            \ via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV2/operation/GetBuildInfo)."
          example: 0.1.14-14c793
          maxLength: 1000
          type: string
      type: object
    PlanName:
      description: |-
        A plan defines how much CPU and memory is required to run an instance of your game server.

        `tiny`: shared core, 1gb memory

        `small`: 1 core, 2gb memory

        `medium`: 2 core, 4gb memory

        `large`: 4 core, 8gb memory
      enum:
      - tiny
      - small
      - medium
      - large
      example: tiny
      type: string
    Deployment:
      description: Deployment is a versioned configuration for a build that describes
        runtime behavior.
      example:
        requestedCPU: 0.5
        defaultContainerPort:
          port: 8000
          name: default
          transportType: null
        roomsPerProcess: 3
        planName: tiny
        buildId: 1
        env:
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        idleTimeoutEnabled: true
        createdAt: 2000-01-23T04:56:07.000+00:00
        additionalContainerPorts:
          transportType: tcp
          port: 4000
          name: debug
        createdBy: google-oauth2|107030234048588177467
        deploymentId: 1
        appId: app-af469a92-5b45-4565-b3c4-b79878de67d2
        containerPort: 0.8008281904610115
        transportType: tcp
        requestedMemoryMB: 1024
      properties:
        idleTimeoutEnabled:
          default: true
          description: |-
            Option to shut down processes that have had no new connections or rooms
            for five minutes.
          type: boolean
        env:
          description: The environment variable that our process will have access
            to at runtime.
          items:
            $ref: '#/components/schemas/DeploymentV2_env_inner'
          maxItems: 100
          type: array
        roomsPerProcess:
          description: "Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room)\
            \ can be scheduled in a process."
          example: 3
          format: int32
          maximum: 10000
          minimum: 1
          type: integer
        planName:
          $ref: '#/components/schemas/PlanName'
        additionalContainerPorts:
          description: Additional ports your server listens on.
          example:
            transportType: tcp
            port: 4000
            name: debug
          items:
            $ref: '#/components/schemas/ContainerPort'
          maxItems: 2
          type: array
        defaultContainerPort:
          $ref: '#/components/schemas/ContainerPort'
        transportType:
          deprecated: true
          enum:
          - tcp
          - udp
          - tls
          type: string
        containerPort:
          deprecated: true
          format: double
          type: number
        createdAt:
          description: When the deployment was created.
          format: date-time
          type: string
        createdBy:
          description: UserId or email address for the user that created the deployment.
          example: google-oauth2|107030234048588177467
          type: string
        requestedMemoryMB:
          description: The amount of memory allocated to your process.
          example: 1024
          format: int32
          type: integer
        requestedCPU:
          description: The number of cores allocated to your process.
          example: 0.5
          format: double
          type: number
        deploymentId:
          description: System generated id for a deployment. Increments by 1.
          example: 1
          format: int32
          type: integer
        buildId:
          description: System generated id for a build. Increments by 1.
          example: 1
          format: int32
          type: integer
        appId:
          description: System generated unique identifier for an application.
          example: app-af469a92-5b45-4565-b3c4-b79878de67d2
          type: string
      required:
      - additionalContainerPorts
      - appId
      - buildId
      - containerPort
      - createdAt
      - createdBy
      - defaultContainerPort
      - deploymentId
      - env
      - planName
      - requestedCPU
      - requestedMemoryMB
      - roomsPerProcess
      - transportType
      type: object
    DeploymentConfig:
      description: User specified deployment configuration for your application at
        runtime.
      example:
        roomsPerProcess: 3
        additionalContainerPorts:
        - port: 8000
          name: default
          transportType: null
        - port: 8000
          name: default
          transportType: null
        planName: tiny
        containerPort: 4000
        transportType: null
        env:
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        idleTimeoutEnabled: true
      properties:
        idleTimeoutEnabled:
          default: true
          description: |-
            Option to shut down processes that have had no new connections or rooms
            for five minutes.
          type: boolean
        env:
          description: The environment variable that our process will have access
            to at runtime.
          items:
            $ref: '#/components/schemas/DeploymentV2_env_inner'
          maxItems: 100
          type: array
        roomsPerProcess:
          description: "Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room)\
            \ can be scheduled in a process."
          example: 3
          format: int32
          maximum: 10000
          minimum: 1
          type: integer
        planName:
          $ref: '#/components/schemas/PlanName'
        additionalContainerPorts:
          description: Additional ports your server listens on.
          items:
            $ref: '#/components/schemas/ContainerPort'
          maxItems: 2
          type: array
        transportType:
          $ref: '#/components/schemas/TransportType'
        containerPort:
          description: Default port the server listens on.
          example: 4000
          format: int32
          maximum: 65535
          minimum: 1
          type: integer
      required:
      - containerPort
      - env
      - planName
      - roomsPerProcess
      - transportType
      type: object
    DeploymentConfigV2:
      example:
        requestedCPU: 0.5
        roomsPerProcess: 3
        additionalContainerPorts:
        - port: 8000
          name: default
          transportType: null
        - port: 8000
          name: default
          transportType: null
        containerPort: 4000
        transportType: null
        requestedMemoryMB: 1024
        env:
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        - name: EULA
          value: "TRUE"
        idleTimeoutEnabled: true
      properties:
        idleTimeoutEnabled:
          description: |-
            Option to shut down processes that have had no new connections or rooms
            for five minutes.
          type: boolean
        env:
          description: The environment variable that our process will have access
            to at runtime.
          items:
            $ref: '#/components/schemas/DeploymentV2_env_inner'
          maxItems: 100
          type: array
        roomsPerProcess:
          description: "Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room)\
            \ can be scheduled in a process."
          example: 3
          format: int32
          maximum: 10000
          minimum: 1
          type: integer
        additionalContainerPorts:
          description: Additional ports your server listens on.
          items:
            $ref: '#/components/schemas/ContainerPort'
          maxItems: 2
          type: array
        transportType:
          $ref: '#/components/schemas/TransportType'
        containerPort:
          description: Default port the server listens on.
          example: 4000
          format: int32
          maximum: 65535
          minimum: 1
          type: integer
        requestedMemoryMB:
          description: The amount of memory allocated to your process.
          example: 1024
          format: double
          type: number
        requestedCPU:
          description: The number of cores allocated to your process.
          example: 0.5
          format: double
          type: number
      required:
      - containerPort
      - env
      - idleTimeoutEnabled
      - requestedCPU
      - requestedMemoryMB
      - roomsPerProcess
      - transportType
      type: object
    PingEndpoints:
      example:
      - region: Seattle
        host: ping.hathora.dev
        port: 2000
      items:
        $ref: '#/components/schemas/PingEndpoints_inner'
      type: array
    RoomId:
      description: |-
        Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
        Note: error will be returned if `roomId` is not globally unique.
      example: 2swovpy1fnunu
      maxLength: 100
      minLength: 1
      pattern: "^[a-zA-Z0-9_-]*$"
      type: string
    LobbyVisibility:
      description: |-
        Types of lobbies a player can create.

        `private`: the player who created the room must share the roomId with their friends

        `public`: visible in the public lobby list, anyone can join

        `local`: for testing with a server running locally
      enum:
      - private
      - public
      - local
      example: private
      type: string
    LobbyInitialConfig:
      additionalProperties: false
      description: User input to initialize the game state. Object must be smaller
        than 64KB.
      type: object
    ShortCode:
      description: User-defined identifier for a lobby.
      example: LFG4
      maxLength: 100
      type: string
    Lobby:
      description: A lobby object allows you to store and manage metadata for your
        rooms.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        visibility: private
        createdBy: google-oauth2|107030234048588177467
        initialConfig: "{}"
        appId: app-af469a92-5b45-4565-b3c4-b79878de67d2
        state: "{}"
        region: null
        shortCode: ""
        local: true
        roomId: 2swovpy1fnunu
      properties:
        shortCode:
          allOf:
          - $ref: '#/components/schemas/ShortCode'
          nullable: true
        state:
          additionalProperties: false
          description: JSON blob to store metadata for a room. Must be smaller than
            1MB.
          nullable: true
          type: object
        initialConfig:
          additionalProperties: false
          description: User input to initialize the game state. Object must be smaller
            than 64KB.
          type: object
        createdAt:
          description: When the lobby was created.
          format: date-time
          type: string
        createdBy:
          description: UserId or email address for the user that created the lobby.
          example: google-oauth2|107030234048588177467
          type: string
        local:
          deprecated: true
          type: boolean
        visibility:
          $ref: '#/components/schemas/LobbyVisibility'
        region:
          $ref: '#/components/schemas/Region'
        roomId:
          description: |-
            Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
            Note: error will be returned if `roomId` is not globally unique.
          example: 2swovpy1fnunu
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]*$"
          type: string
        appId:
          description: System generated unique identifier for an application.
          example: app-af469a92-5b45-4565-b3c4-b79878de67d2
          type: string
      required:
      - appId
      - createdAt
      - createdBy
      - initialConfig
      - local
      - region
      - roomId
      - shortCode
      - visibility
      type: object
    CreateLobbyParams:
      example:
        visibility: private
        initialConfig: "{}"
        region: null
      properties:
        visibility:
          $ref: '#/components/schemas/LobbyVisibility'
        initialConfig:
          additionalProperties: false
          description: User input to initialize the game state. Object must be smaller
            than 64KB.
          type: object
        region:
          $ref: '#/components/schemas/Region'
      required:
      - initialConfig
      - region
      - visibility
      type: object
    SetLobbyStateParams:
      example:
        state: "{}"
      properties:
        state:
          additionalProperties: false
          description: JSON blob to store metadata for a room. Must be smaller than
            1MB.
          type: object
      required:
      - state
      type: object
    RoomConfig:
      description: "Optional configuration parameters for the room. Can be any string\
        \ including stringified JSON. It is accessible from the room via [`GetRoomInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetRoomInfo)."
      example: "{\"name\":\"my-room\"}"
      maxLength: 10000
      type: string
    LobbyV3:
      description: A lobby object allows you to store and manage metadata for your
        rooms.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        roomConfig: ""
        visibility: private
        createdBy: google-oauth2|107030234048588177467
        appId: app-af469a92-5b45-4565-b3c4-b79878de67d2
        region: null
        shortCode: LFG4
        roomId: 2swovpy1fnunu
      properties:
        shortCode:
          description: User-defined identifier for a lobby.
          example: LFG4
          maxLength: 100
          type: string
        createdAt:
          description: When the lobby was created.
          format: date-time
          type: string
        createdBy:
          description: UserId or email address for the user that created the lobby.
          example: google-oauth2|107030234048588177467
          type: string
        roomConfig:
          allOf:
          - $ref: '#/components/schemas/RoomConfig'
          nullable: true
        visibility:
          $ref: '#/components/schemas/LobbyVisibility'
        region:
          $ref: '#/components/schemas/Region'
        roomId:
          description: |-
            Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
            Note: error will be returned if `roomId` is not globally unique.
          example: 2swovpy1fnunu
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]*$"
          type: string
        appId:
          description: System generated unique identifier for an application.
          example: app-af469a92-5b45-4565-b3c4-b79878de67d2
          type: string
      required:
      - appId
      - createdAt
      - createdBy
      - region
      - roomConfig
      - roomId
      - shortCode
      - visibility
      type: object
    CreateLobbyV3Params:
      example:
        roomConfig: "{\"name\":\"my-room\"}"
        visibility: private
        region: null
      properties:
        visibility:
          $ref: '#/components/schemas/LobbyVisibility'
        roomConfig:
          description: "Optional configuration parameters for the room. Can be any\
            \ string including stringified JSON. It is accessible from the room via\
            \ [`GetRoomInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetRoomInfo)."
          example: "{\"name\":\"my-room\"}"
          maxLength: 10000
          type: string
        region:
          $ref: '#/components/schemas/Region'
      required:
      - region
      - visibility
      type: object
    LogsFollow:
      default: false
      description: Stream logs in realtime.
      type: boolean
    TailLines:
      description: Number of lines to return from most recent logs history.
      example: 100
      format: int32
      maximum: 5000
      minimum: 1
      type: integer
    ProcessId:
      description: System generated unique identifier to a runtime instance of your
        game server.
      example: cbfcddd2-0006-43ae-996c-995fff7bed2e
      type: string
    VerificationEmailSuccess:
      enum:
      - success
      nullable: false
      type: string
    VerificationEmailRequest:
      example:
        userId: userId
      properties:
        userId:
          type: string
      required:
      - userId
      type: object
    NewUserInfo:
      properties:
        email:
          type: string
        user_id:
          type: string
      required:
      - email
      - user_id
      type: object
    MetricValue:
      example:
        value: 0.8008281904610115
        timestamp: 6.027456183070403
      properties:
        value:
          format: double
          type: number
        timestamp:
          format: double
          type: number
      required:
      - timestamp
      - value
      type: object
    Record_Partial_MetricName_.MetricValue-Array_:
      description: Construct a type with a set of properties K of type T
      example:
        memory:
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        total_egress:
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        cpu:
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        rate_egress:
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        active_connections:
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
        - value: 0.8008281904610115
          timestamp: 6.027456183070403
      properties:
        cpu:
          items:
            $ref: '#/components/schemas/MetricValue'
          type: array
        memory:
          items:
            $ref: '#/components/schemas/MetricValue'
          type: array
        rate_egress:
          items:
            $ref: '#/components/schemas/MetricValue'
          type: array
        total_egress:
          items:
            $ref: '#/components/schemas/MetricValue'
          type: array
        active_connections:
          items:
            $ref: '#/components/schemas/MetricValue'
          type: array
      type: object
    MetricsData:
      $ref: '#/components/schemas/Record_Partial_MetricName_.MetricValue-Array_'
    MetricName:
      description: Available metrics to query over time.
      enum:
      - cpu
      - memory
      - rate_egress
      - total_egress
      - active_connections
      type: string
    MetricsStep:
      description: Width of time in seconds to group data.
      format: int32
      type: integer
    UserId:
      description: System generated unique identifier for a user. Not guaranteed to
        have a specific format.
      example: auth0|646bdf96f7fb73d04c8c84db
      type: string
    InviteStatusPending:
      properties:
        type:
          enum:
          - pending
          nullable: false
          type: string
      required:
      - type
      type: object
    InviteStatusAccepted:
      properties:
        userId:
          description: System generated unique identifier for a user. Not guaranteed
            to have a specific format.
          example: auth0|646bdf96f7fb73d04c8c84db
          type: string
        type:
          enum:
          - accepted
          nullable: false
          type: string
      required:
      - type
      - userId
      type: object
    InviteStatusRejected:
      properties:
        userId:
          description: System generated unique identifier for a user. Not guaranteed
            to have a specific format.
          example: auth0|646bdf96f7fb73d04c8c84db
          type: string
        type:
          enum:
          - rejected
          nullable: false
          type: string
      required:
      - type
      - userId
      type: object
    InviteStatusRescinded:
      properties:
        rescindedBy:
          description: System generated unique identifier for a user. Not guaranteed
            to have a specific format.
          example: auth0|646bdf96f7fb73d04c8c84db
          type: string
        userId:
          description: System generated unique identifier for a user. Not guaranteed
            to have a specific format.
          example: auth0|646bdf96f7fb73d04c8c84db
          type: string
        type:
          enum:
          - rescinded
          nullable: false
          type: string
      required:
      - rescindedBy
      - type
      type: object
    OrganizationInviteStatus:
      anyOf:
      - $ref: '#/components/schemas/InviteStatusPending'
      - $ref: '#/components/schemas/InviteStatusAccepted'
      - $ref: '#/components/schemas/InviteStatusRejected'
      - $ref: '#/components/schemas/InviteStatusRescinded'
    OrgPermission:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        invitedBy: auth0|646bdf96f7fb73d04c8c84db
        userEmail: userEmail
        orgId: org-6f706e83-0ec1-437a-9a46-7d4281eb2f39
        updatedAt: 2000-01-23T04:56:07.000+00:00
        status: null
      properties:
        updatedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/OrganizationInviteStatus'
        userEmail:
          type: string
        invitedBy:
          description: System generated unique identifier for a user. Not guaranteed
            to have a specific format.
          example: auth0|646bdf96f7fb73d04c8c84db
          type: string
        orgId:
          description: System generated unique identifier for an organization. Not
            guaranteed to have a specific format.
          example: org-6f706e83-0ec1-437a-9a46-7d4281eb2f39
          type: string
      required:
      - createdAt
      - invitedBy
      - orgId
      - status
      - updatedAt
      - userEmail
      type: object
    CreateUserInvite:
      example:
        userEmail: userEmail
      properties:
        userEmail:
          type: string
      required:
      - userEmail
      type: object
    RescindUserInvite:
      example:
        userEmail: userEmail
      properties:
        userEmail:
          type: string
      required:
      - userEmail
      type: object
    OrgInvitesPage:
      example:
        invites:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          invitedBy: auth0|646bdf96f7fb73d04c8c84db
          userEmail: userEmail
          orgId: org-6f706e83-0ec1-437a-9a46-7d4281eb2f39
          updatedAt: 2000-01-23T04:56:07.000+00:00
          status: null
        - createdAt: 2000-01-23T04:56:07.000+00:00
          invitedBy: auth0|646bdf96f7fb73d04c8c84db
          userEmail: userEmail
          orgId: org-6f706e83-0ec1-437a-9a46-7d4281eb2f39
          updatedAt: 2000-01-23T04:56:07.000+00:00
          status: null
      properties:
        invites:
          items:
            $ref: '#/components/schemas/OrgPermission'
          type: array
      required:
      - invites
      type: object
    ExposedPort:
      description: Connection details for an active process.
      example:
        host: 1.proxy.hathora.dev
        name: default
        port: 34567
        transportType: tcp
      properties:
        transportType:
          $ref: '#/components/schemas/TransportType'
        port:
          format: int32
          type: integer
        host:
          type: string
        name:
          type: string
      required:
      - host
      - name
      - port
      - transportType
      type: object
    Process:
      description: A process object represents a runtime instance of your game server
        and its metadata.
      example:
        egressedBytes: 435
        idleSince: 2000-01-23T04:56:07.000+00:00
        terminatedAt: 2000-01-23T04:56:07.000+00:00
        roomsPerProcess: 3
        exposedPort: ""
        startedAt: 2000-01-23T04:56:07.000+00:00
        roomsAllocated: 1
        roomsAllocatedUpdatedAt: 2000-01-23T04:56:07.000+00:00
        stoppingAt: 2000-01-23T04:56:07.000+00:00
        roomSlotsAvailableUpdatedAt: 2000-01-23T04:56:07.000+00:00
        activeConnections: 10
        port: 6.027456183070403
        processId: cbfcddd2-0006-43ae-996c-995fff7bed2e
        startingAt: 2000-01-23T04:56:07.000+00:00
        activeConnectionsUpdatedAt: 2000-01-23T04:56:07.000+00:00
        draining: true
        deploymentId: 1
        appId: app-af469a92-5b45-4565-b3c4-b79878de67d2
        host: host
        additionalExposedPorts:
        - host: 1.proxy.hathora.dev
          name: debug
          port: 72941
          transportType: tcp
        region: null
        roomSlotsAvailable: 0.8008281904610115
      properties:
        egressedBytes:
          description: Measures network traffic leaving the process in bytes.
          example: 435
          format: int32
          type: integer
        idleSince:
          deprecated: true
          format: date-time
          nullable: true
          type: string
        activeConnectionsUpdatedAt:
          deprecated: true
          format: date-time
          type: string
        activeConnections:
          deprecated: true
          description: Tracks the number of active connections to a process.
          example: 10
          format: int32
          type: integer
        roomsAllocatedUpdatedAt:
          format: date-time
          type: string
        roomsAllocated:
          description: Tracks the number of rooms that have been allocated to the
            process.
          example: 1
          format: int32
          type: integer
        roomSlotsAvailableUpdatedAt:
          deprecated: true
          format: date-time
          type: string
        roomSlotsAvailable:
          deprecated: true
          format: double
          type: number
        draining:
          description: Process in drain will not accept any new rooms.
          type: boolean
        terminatedAt:
          description: When the process has been terminated.
          format: date-time
          nullable: true
          type: string
        stoppingAt:
          description: When the process is issued to stop. We use this to determine
            when we should stop billing.
          format: date-time
          nullable: true
          type: string
        startedAt:
          description: When the process bound to the specified port. We use this to
            determine when we should start billing.
          format: date-time
          nullable: true
          type: string
        startingAt:
          description: When the process started being provisioned.
          format: date-time
          type: string
        roomsPerProcess:
          description: "Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room)\
            \ can be scheduled in a process."
          example: 3
          format: int32
          maximum: 10000
          minimum: 1
          type: integer
        additionalExposedPorts:
          example:
          - host: 1.proxy.hathora.dev
            name: debug
            port: 72941
            transportType: tcp
          items:
            $ref: '#/components/schemas/ExposedPort'
          maxItems: 2
          type: array
        exposedPort:
          allOf:
          - $ref: '#/components/schemas/ExposedPort'
          nullable: true
        port:
          deprecated: true
          format: double
          type: number
        host:
          deprecated: true
          type: string
        region:
          $ref: '#/components/schemas/Region'
        processId:
          description: System generated unique identifier to a runtime instance of
            your game server.
          example: cbfcddd2-0006-43ae-996c-995fff7bed2e
          type: string
        deploymentId:
          description: System generated id for a deployment. Increments by 1.
          example: 1
          format: int32
          type: integer
        appId:
          description: System generated unique identifier for an application.
          example: app-af469a92-5b45-4565-b3c4-b79878de67d2
          type: string
      required:
      - activeConnections
      - activeConnectionsUpdatedAt
      - additionalExposedPorts
      - appId
      - deploymentId
      - draining
      - egressedBytes
      - exposedPort
      - host
      - idleSince
      - port
      - processId
      - region
      - roomSlotsAvailable
      - roomSlotsAvailableUpdatedAt
      - roomsAllocated
      - roomsAllocatedUpdatedAt
      - roomsPerProcess
      - startedAt
      - startingAt
      - stoppingAt
      - terminatedAt
      type: object
    RoomStatus:
      description: |-
        The allocation status of a room.

        `scheduling`: a process is not allocated yet and the room is waiting to be scheduled

        `active`: ready to accept connections

        `suspended`: room is unallocated from the process but can be rescheduled later with the same `roomId`

        `destroyed`: all associated metadata is deleted
      enum:
      - scheduling
      - active
      - suspended
      - destroyed
      example: active
      type: string
    RoomAllocationId:
      description: System generated unique identifier to an allocated instance of
        a room.
      example: e3a0aa32-1711-4036-acfa-008b96061a78
      type: string
    RoomAllocation:
      description: Metadata on an allocated instance of a room.
      example:
        unscheduledAt: 2000-01-23T04:56:07.000+00:00
        processId: cbfcddd2-0006-43ae-996c-995fff7bed2e
        scheduledAt: 2000-01-23T04:56:07.000+00:00
        roomAllocationId: e3a0aa32-1711-4036-acfa-008b96061a78
      properties:
        unscheduledAt:
          format: date-time
          nullable: true
          type: string
        scheduledAt:
          format: date-time
          type: string
        processId:
          description: System generated unique identifier to a runtime instance of
            your game server.
          example: cbfcddd2-0006-43ae-996c-995fff7bed2e
          type: string
        roomAllocationId:
          description: System generated unique identifier to an allocated instance
            of a room.
          example: e3a0aa32-1711-4036-acfa-008b96061a78
          type: string
      required:
      - processId
      - roomAllocationId
      - scheduledAt
      - unscheduledAt
      type: object
    Pick_Room.Exclude_keyofRoom.allocations__:
      description: "From T, pick a set of properties whose keys are in the union K"
      properties:
        appId:
          description: System generated unique identifier for an application.
          example: app-af469a92-5b45-4565-b3c4-b79878de67d2
          type: string
        roomId:
          description: |-
            Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
            Note: error will be returned if `roomId` is not globally unique.
          example: 2swovpy1fnunu
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]*$"
          type: string
        roomConfig:
          allOf:
          - $ref: '#/components/schemas/RoomConfig'
          nullable: true
        status:
          $ref: '#/components/schemas/RoomStatus'
        currentAllocation:
          allOf:
          - $ref: '#/components/schemas/RoomAllocation'
          nullable: true
      required:
      - appId
      - currentAllocation
      - roomConfig
      - roomId
      - status
      type: object
    Omit_Room.allocations_:
      $ref: '#/components/schemas/Pick_Room.Exclude_keyofRoom.allocations__'
    RoomWithoutAllocations:
      $ref: '#/components/schemas/Omit_Room.allocations_'
    ProcessWithRooms:
      allOf:
      - $ref: '#/components/schemas/Process'
      - $ref: '#/components/schemas/ProcessWithRooms_allOf'
    ProcessStatus:
      enum:
      - starting
      - running
      - draining
      - stopping
      - stopped
      - failed
      type: string
    ProcessV2:
      example:
        terminatedAt: 2000-01-23T04:56:07.000+00:00
        roomsPerProcess: 3
        exposedPort: ""
        startedAt: 2000-01-23T04:56:07.000+00:00
        roomsAllocated: 1
        stoppingAt: 2000-01-23T04:56:07.000+00:00
        createdAt: 2000-01-23T04:56:07.000+00:00
        processId: cbfcddd2-0006-43ae-996c-995fff7bed2e
        deploymentId: 1
        appId: app-af469a92-5b45-4565-b3c4-b79878de67d2
        additionalExposedPorts:
        - host: 1.proxy.hathora.dev
          name: debug
          port: 72941
          transportType: tcp
        region: null
        status: null
      properties:
        status:
          $ref: '#/components/schemas/ProcessStatus'
        roomsAllocated:
          description: Tracks the number of rooms that have been allocated to the
            process.
          example: 1
          format: int32
          type: integer
        terminatedAt:
          description: When the process has been terminated.
          format: date-time
          nullable: true
          type: string
        stoppingAt:
          description: When the process is issued to stop. We use this to determine
            when we should stop billing.
          format: date-time
          nullable: true
          type: string
        startedAt:
          description: When the process bound to the specified port. We use this to
            determine when we should start billing.
          format: date-time
          nullable: true
          type: string
        createdAt:
          description: When the process started being provisioned.
          format: date-time
          type: string
        roomsPerProcess:
          description: "Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room)\
            \ can be scheduled in a process."
          example: 3
          format: int32
          maximum: 10000
          minimum: 1
          type: integer
        additionalExposedPorts:
          example:
          - host: 1.proxy.hathora.dev
            name: debug
            port: 72941
            transportType: tcp
          items:
            $ref: '#/components/schemas/ExposedPort'
          maxItems: 2
          type: array
        exposedPort:
          allOf:
          - $ref: '#/components/schemas/ExposedPort'
          nullable: true
        region:
          $ref: '#/components/schemas/Region'
        processId:
          description: System generated unique identifier to a runtime instance of
            your game server.
          example: cbfcddd2-0006-43ae-996c-995fff7bed2e
          type: string
        deploymentId:
          description: System generated id for a deployment. Increments by 1.
          example: 1
          format: int32
          type: integer
        appId:
          description: System generated unique identifier for an application.
          example: app-af469a92-5b45-4565-b3c4-b79878de67d2
          type: string
      required:
      - additionalExposedPorts
      - appId
      - createdAt
      - deploymentId
      - exposedPort
      - processId
      - region
      - roomsAllocated
      - roomsPerProcess
      - startedAt
      - status
      - stoppingAt
      - terminatedAt
      type: object
    CreateRoomParams:
      example:
        roomConfig: "{\"name\":\"my-room\"}"
        region: null
      properties:
        roomConfig:
          description: "Optional configuration parameters for the room. Can be any\
            \ string including stringified JSON. It is accessible from the room via\
            \ [`GetRoomInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetRoomInfo)."
          example: "{\"name\":\"my-room\"}"
          maxLength: 10000
          type: string
        region:
          $ref: '#/components/schemas/Region'
      required:
      - region
      type: object
    Room:
      description: A room object represents a game session or match.
      example:
        roomConfig: ""
        allocations:
        - unscheduledAt: 2000-01-23T04:56:07.000+00:00
          processId: cbfcddd2-0006-43ae-996c-995fff7bed2e
          scheduledAt: 2000-01-23T04:56:07.000+00:00
          roomAllocationId: e3a0aa32-1711-4036-acfa-008b96061a78
        - unscheduledAt: 2000-01-23T04:56:07.000+00:00
          processId: cbfcddd2-0006-43ae-996c-995fff7bed2e
          scheduledAt: 2000-01-23T04:56:07.000+00:00
          roomAllocationId: e3a0aa32-1711-4036-acfa-008b96061a78
        appId: app-af469a92-5b45-4565-b3c4-b79878de67d2
        currentAllocation: ""
        roomId: 2swovpy1fnunu
        status: active
      properties:
        currentAllocation:
          allOf:
          - $ref: '#/components/schemas/RoomAllocation'
          nullable: true
        status:
          $ref: '#/components/schemas/RoomStatus'
        allocations:
          items:
            $ref: '#/components/schemas/RoomAllocation'
          type: array
        roomConfig:
          allOf:
          - $ref: '#/components/schemas/RoomConfig'
          nullable: true
        roomId:
          description: |-
            Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
            Note: error will be returned if `roomId` is not globally unique.
          example: 2swovpy1fnunu
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]*$"
          type: string
        appId:
          description: System generated unique identifier for an application.
          example: app-af469a92-5b45-4565-b3c4-b79878de67d2
          type: string
      required:
      - allocations
      - appId
      - currentAllocation
      - roomConfig
      - roomId
      - status
      type: object
    StartingConnectionInfo:
      properties:
        status:
          enum:
          - starting
          nullable: false
          type: string
        roomId:
          description: |-
            Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
            Note: error will be returned if `roomId` is not globally unique.
          example: 2swovpy1fnunu
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]*$"
          type: string
      required:
      - roomId
      - status
      type: object
    ActiveConnectionInfo:
      properties:
        status:
          enum:
          - active
          nullable: false
          type: string
        transportType:
          $ref: '#/components/schemas/TransportType'
        port:
          format: double
          type: number
        host:
          type: string
        roomId:
          description: |-
            Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
            Note: error will be returned if `roomId` is not globally unique.
          example: 2swovpy1fnunu
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]*$"
          type: string
      required:
      - host
      - port
      - roomId
      - status
      - transportType
      type: object
    ConnectionInfo:
      anyOf:
      - $ref: '#/components/schemas/StartingConnectionInfo'
      - $ref: '#/components/schemas/ActiveConnectionInfo'
      description: Connection information to the default port.
    RoomReadyStatus:
      enum:
      - active
      - starting
      type: string
    ConnectionInfoV2:
      description: Connection information for the default and additional ports.
      example:
        exposedPort:
          host: 1.proxy.hathora.dev
          name: default
          port: 34567
          transportType: tcp
        additionalExposedPorts:
        - host: 1.proxy.hathora.dev
          name: debug
          port: 72941
          transportType: tcp
        roomId: 2swovpy1fnunu
        status: null
      properties:
        additionalExposedPorts:
          example:
          - host: 1.proxy.hathora.dev
            name: debug
            port: 72941
            transportType: tcp
          items:
            $ref: '#/components/schemas/ExposedPort'
          maxItems: 2
          type: array
        exposedPort:
          $ref: '#/components/schemas/ExposedPort'
        status:
          $ref: '#/components/schemas/RoomReadyStatus'
        roomId:
          description: |-
            Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
            Note: error will be returned if `roomId` is not globally unique.
          example: 2swovpy1fnunu
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]*$"
          type: string
      required:
      - additionalExposedPorts
      - roomId
      - status
      type: object
    RoomConnectionData:
      allOf:
      - $ref: '#/components/schemas/ConnectionInfoV2'
      - $ref: '#/components/schemas/RoomConnectionData_allOf'
    UpdateRoomConfigParams:
      example:
        roomConfig: "{\"name\":\"my-room\"}"
      properties:
        roomConfig:
          description: "Optional configuration parameters for the room. Can be any\
            \ string including stringified JSON. It is accessible from the room via\
            \ [`GetRoomInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetRoomInfo)."
          example: "{\"name\":\"my-room\"}"
          maxLength: 10000
          type: string
      required:
      - roomConfig
      type: object
    OrgTokenId:
      description: System generated unique identifier for an organization token.
      example: org-token-af469a92-5b45-4565-b3c4-b79878de67d2
      type: string
    OrgTokenName:
      description: Readable name for a token. Must be unique within an organization.
      example: ci-token
      maxLength: 64
      type: string
    OrgTokenStatus:
      enum:
      - active
      - revoked
      type: string
    OrgToken:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        orgTokenId: org-token-af469a92-5b45-4565-b3c4-b79878de67d2
        createdBy: createdBy
        name: ci-token
        lastFourCharsOfKey: lastFourCharsOfKey
        orgId: orgId
        status: null
      properties:
        createdAt:
          format: date-time
          type: string
        createdBy:
          type: string
        lastFourCharsOfKey:
          type: string
        status:
          $ref: '#/components/schemas/OrgTokenStatus'
        name:
          description: Readable name for a token. Must be unique within an organization.
          example: ci-token
          maxLength: 64
          type: string
        orgId:
          type: string
        orgTokenId:
          description: System generated unique identifier for an organization token.
          example: org-token-af469a92-5b45-4565-b3c4-b79878de67d2
          type: string
      required:
      - createdAt
      - createdBy
      - lastFourCharsOfKey
      - name
      - orgId
      - orgTokenId
      - status
      type: object
    ListOrgTokens:
      example:
        tokens:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          orgTokenId: org-token-af469a92-5b45-4565-b3c4-b79878de67d2
          createdBy: createdBy
          name: ci-token
          lastFourCharsOfKey: lastFourCharsOfKey
          orgId: orgId
          status: null
        - createdAt: 2000-01-23T04:56:07.000+00:00
          orgTokenId: org-token-af469a92-5b45-4565-b3c4-b79878de67d2
          createdBy: createdBy
          name: ci-token
          lastFourCharsOfKey: lastFourCharsOfKey
          orgId: orgId
          status: null
      properties:
        tokens:
          items:
            $ref: '#/components/schemas/OrgToken'
          type: array
      required:
      - tokens
      type: object
    CreatedOrgToken:
      example:
        plainTextToken: plainTextToken
        orgToken:
          createdAt: 2000-01-23T04:56:07.000+00:00
          orgTokenId: org-token-af469a92-5b45-4565-b3c4-b79878de67d2
          createdBy: createdBy
          name: ci-token
          lastFourCharsOfKey: lastFourCharsOfKey
          orgId: orgId
          status: null
      properties:
        plainTextToken:
          type: string
        orgToken:
          $ref: '#/components/schemas/OrgToken'
      required:
      - orgToken
      - plainTextToken
      type: object
    CreateOrgToken:
      example:
        name: ci-token
      properties:
        name:
          description: Readable name for a token. Must be unique within an organization.
          example: ci-token
          maxLength: 64
          type: string
      required:
      - name
      type: object
    RunBuildDeprecated_request:
      properties:
        file:
          format: binary
          type: string
      required:
      - file
      type: object
    CreatePrivateLobby_request:
      properties:
        initialConfig:
          additionalProperties: false
          description: User input to initialize the game state. Object must be smaller
            than 64KB.
          type: object
        region:
          $ref: '#/components/schemas/Region'
      required:
      - initialConfig
      - region
      type: object
    AuthConfiguration_google:
      description: Enable google auth for your application.
      example:
        clientId: clientId
      properties:
        clientId:
          description: "A Google generated token representing the developer's credentials\
            \ for [Google's API Console](https://console.cloud.google.com/apis/dashboard?pli=1&project=discourse-login-388921).\
            \ Learn how to get a `clientId` [here](https://developers.google.com/identity/gsi/web/guides/get-google-api-clientid)."
          type: string
      required:
      - clientId
      type: object
    DeploymentV2_env_inner:
      example:
        name: EULA
        value: "TRUE"
      properties:
        value:
          example: "TRUE"
          maxLength: 5000
          type: string
        name:
          example: EULA
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z_][a-zA-Z0-9_]*$"
          type: string
      required:
      - name
      - value
      type: object
    Build_regionalContainerTags_inner:
      example:
        region: null
        containerTag: containerTag
      properties:
        containerTag:
          type: string
        region:
          $ref: '#/components/schemas/Region'
      required:
      - containerTag
      - region
      type: object
    ApplicationWithLatestDeploymentAndBuild_allOf_deployment_allOf:
      properties:
        build:
          $ref: '#/components/schemas/Build'
      required:
      - build
      type: object
    ApplicationWithLatestDeploymentAndBuild_allOf_deployment:
      allOf:
      - $ref: '#/components/schemas/DeploymentV2'
      - $ref: '#/components/schemas/ApplicationWithLatestDeploymentAndBuild_allOf_deployment_allOf'
    ApplicationWithLatestDeploymentAndBuild_allOf:
      properties:
        deployment:
          $ref: '#/components/schemas/ApplicationWithLatestDeploymentAndBuild_allOf_deployment'
      type: object
      example: null
    PingEndpoints_inner:
      properties:
        port:
          format: double
          type: number
        host:
          type: string
        region:
          $ref: '#/components/schemas/Region'
      required:
      - host
      - port
      - region
      type: object
    ProcessWithRooms_allOf:
      properties:
        rooms:
          items:
            $ref: '#/components/schemas/RoomWithoutAllocations'
          type: array
        totalRooms:
          format: int32
          type: integer
      required:
      - rooms
      - totalRooms
      type: object
      example: null
    RoomConnectionData_allOf:
      properties:
        processId:
          description: System generated unique identifier to a runtime instance of
            your game server.
          example: cbfcddd2-0006-43ae-996c-995fff7bed2e
          type: string
      required:
      - processId
      type: object
      example: null
  securitySchemes:
    hathoraDevToken:
      bearerFormat: JWT
      scheme: bearer
      type: http
    playerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
x-speakeasy-globals:
  parameters:
  - in: path
    name: appId
    schema:
      $ref: '#/components/schemas/AppId'

