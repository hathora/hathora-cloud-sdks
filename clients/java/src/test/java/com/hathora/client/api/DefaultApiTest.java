/*
 * hathora-coordinator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hathora.client.api;

import com.hathora.client.ApiException;
import com.hathora.client.model.Application;
import com.hathora.client.model.ApplicationWithDeployment;
import com.hathora.client.model.Build;
import com.hathora.client.model.ConnectionInfo;
import com.hathora.client.model.CreateAppRequest;
import com.hathora.client.model.CreateRoomRequest;
import com.hathora.client.model.Deployment;
import com.hathora.client.model.DeploymentConfig;
import java.io.File;
import com.hathora.client.model.Lobby;
import com.hathora.client.model.LoginAnonymous200Response;
import com.hathora.client.model.LoginGoogleRequest;
import com.hathora.client.model.LoginNicknameRequest;
import com.hathora.client.model.MetricName;
import com.hathora.client.model.PickRoomExcludeKeyofRoomAllocations;
import com.hathora.client.model.Process;
import com.hathora.client.model.ProcessWithRooms;
import com.hathora.client.model.RecordPartialMetricNameMetricValueArray;
import com.hathora.client.model.Region;
import com.hathora.client.model.Room;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAppTest() throws ApiException {
        CreateAppRequest createAppRequest = null;
        Application response = api.createApp(createAppRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBuildTest() throws ApiException {
        String appId = null;
        Build response = api.createBuild(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeploymentTest() throws ApiException {
        String appId = null;
        Double buildId = null;
        DeploymentConfig deploymentConfig = null;
        Deployment response = api.createDeployment(appId, buildId, deploymentConfig);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPrivateLobbyTest() throws ApiException {
        String appId = null;
        String authorization = null;
        Region region = null;
        Boolean local = null;
        String response = api.createPrivateLobby(appId, authorization, region, local);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPublicLobbyTest() throws ApiException {
        String appId = null;
        String authorization = null;
        Region region = null;
        Boolean local = null;
        String response = api.createPublicLobby(appId, authorization, region, local);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRoomTest() throws ApiException {
        String appId = null;
        CreateRoomRequest createRoomRequest = null;
        String response = api.createRoom(appId, createRoomRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppTest() throws ApiException {
        String appId = null;
        api.deleteApp(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBuildTest() throws ApiException {
        String appId = null;
        Double buildId = null;
        api.deleteBuild(appId, buildId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destroyRoomTest() throws ApiException {
        String appId = null;
        String roomId = null;
        api.destroyRoom(appId, roomId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActiveRoomsForProcessTest() throws ApiException {
        String appId = null;
        String processId = null;
        List<PickRoomExcludeKeyofRoomAllocations> response = api.getActiveRoomsForProcess(appId, processId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppInfoTest() throws ApiException {
        String appId = null;
        Application response = api.getAppInfo(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppsTest() throws ApiException {
        List<ApplicationWithDeployment> response = api.getApps();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBuildInfoTest() throws ApiException {
        String appId = null;
        Double buildId = null;
        Build response = api.getBuildInfo(appId, buildId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBuildsTest() throws ApiException {
        String appId = null;
        List<Build> response = api.getBuilds(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectionInfoTest() throws ApiException {
        String appId = null;
        String roomId = null;
        ConnectionInfo response = api.getConnectionInfo(appId, roomId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeploymentInfoTest() throws ApiException {
        String appId = null;
        Double deploymentId = null;
        Deployment response = api.getDeploymentInfo(appId, deploymentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeploymentsTest() throws ApiException {
        String appId = null;
        List<Deployment> response = api.getDeployments(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInactiveRoomsForProcessTest() throws ApiException {
        String appId = null;
        String processId = null;
        List<PickRoomExcludeKeyofRoomAllocations> response = api.getInactiveRoomsForProcess(appId, processId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLogsForAppTest() throws ApiException {
        String appId = null;
        Boolean follow = null;
        Double tailLines = null;
        Region region = null;
        byte[] response = api.getLogsForApp(appId, follow, tailLines, region);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLogsForDeploymentTest() throws ApiException {
        String appId = null;
        Double deploymentId = null;
        Boolean follow = null;
        Double tailLines = null;
        Object response = api.getLogsForDeployment(appId, deploymentId, follow, tailLines);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLogsForProcessTest() throws ApiException {
        String appId = null;
        String processId = null;
        Boolean follow = null;
        Double tailLines = null;
        byte[] response = api.getLogsForProcess(appId, processId, follow, tailLines);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMetricsTest() throws ApiException {
        String appId = null;
        String processId = null;
        List<MetricName> metrics = null;
        Double end = null;
        Double start = null;
        Double step = null;
        RecordPartialMetricNameMetricValueArray response = api.getMetrics(appId, processId, metrics, end, start, step);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProcessInfoTest() throws ApiException {
        String appId = null;
        String processId = null;
        Process response = api.getProcessInfo(appId, processId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoomInfoTest() throws ApiException {
        String appId = null;
        String roomId = null;
        Room response = api.getRoomInfo(appId, roomId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRunningProcessesTest() throws ApiException {
        String appId = null;
        Region region = null;
        List<ProcessWithRooms> response = api.getRunningProcesses(appId, region);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStoppedProcessesTest() throws ApiException {
        String appId = null;
        Region region = null;
        List<Process> response = api.getStoppedProcesses(appId, region);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listActivePublicLobbiesTest() throws ApiException {
        String appId = null;
        String authorization = null;
        Boolean local = null;
        Region region = null;
        List<Lobby> response = api.listActivePublicLobbies(appId, authorization, local, region);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginAnonymousTest() throws ApiException {
        String appId = null;
        LoginAnonymous200Response response = api.loginAnonymous(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginGoogleTest() throws ApiException {
        String appId = null;
        LoginGoogleRequest loginGoogleRequest = null;
        LoginAnonymous200Response response = api.loginGoogle(appId, loginGoogleRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginNicknameTest() throws ApiException {
        String appId = null;
        LoginNicknameRequest loginNicknameRequest = null;
        LoginAnonymous200Response response = api.loginNickname(appId, loginNicknameRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runBuildTest() throws ApiException {
        String appId = null;
        Double buildId = null;
        File _file = null;
        byte[] response = api.runBuild(appId, buildId, _file);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void suspendRoomTest() throws ApiException {
        String appId = null;
        String roomId = null;
        api.suspendRoom(appId, roomId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAppTest() throws ApiException {
        String appId = null;
        CreateAppRequest createAppRequest = null;
        Application response = api.updateApp(appId, createAppRequest);
        // TODO: test validations
    }

}
